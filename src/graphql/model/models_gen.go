// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID          string       `json:"id"`
	UserID      string       `json:"userId"`
	UserName    string       `json:"userName"`
	Email       *string      `json:"email,omitempty"`
	PhoneNumber *string      `json:"phoneNumber,omitempty"`
	FullName    *string      `json:"fullName,omitempty"`
	BirthDate   *string      `json:"birthDate,omitempty"`
	AccountType *AccountType `json:"accountType,omitempty"`
	CreatedAt   *string      `json:"createdAt,omitempty"`
	UpdatedAt   *string      `json:"updatedAt,omitempty"`
}

type AccountBanking struct {
	ID             string  `json:"id"`
	AccountID      string  `json:"accountId"`
	BankID         string  `json:"bankId"`
	FullNameOnBank string  `json:"fullNameOnBank"`
	BankAccount    string  `json:"bankAccount"`
	Currency       string  `json:"currency"`
	CreatedAt      *string `json:"createdAt,omitempty"`
	UpdatedAt      *string `json:"updatedAt,omitempty"`
	DeletedAt      *string `json:"deletedAt,omitempty"`
}

type AdPayments struct {
	ID              string   `json:"id"`
	AdvertisementID string   `json:"advertisementId"`
	AccountID       string   `json:"accountId"`
	CampaignID      string   `json:"campaignId"`
	ChannelID       string   `json:"channelId"`
	Amount          *float64 `json:"amount,omitempty"`
	Currency        *string  `json:"currency,omitempty"`
	CompletionTime  *string  `json:"completionTime,omitempty"`
	CreatedAt       *string  `json:"createdAt,omitempty"`
	UpdatedAt       *string  `json:"updatedAt,omitempty"`
	DeletedAt       *string  `json:"deletedAt,omitempty"`
}

type AdvertisementCPMs struct {
	AdvertisementID string  `json:"advertisementId"`
	Rate            float64 `json:"Rate"`
	ChannelShare    float64 `json:"channelShare"`
	ProviderShare   float64 `json:"providerShare"`
	TotalBudget     float64 `json:"totalBudget"`
	MaxLifeCycle    int     `json:"maxLifeCycle"`
	RequiredViews   int     `json:"requiredViews"`
}

type AdvertisementResults struct {
	AdvertisementID     string  `json:"advertisementId"`
	StartedAt           string  `json:"startedAt"`
	Budget              float64 `json:"budget"`
	ProviderBudgetShare float64 `json:"providerBudgetShare"`
	ChannelBudgetShare  float64 `json:"channelBudgetShare"`
	TotalHour           int     `json:"totalHour"`
	TotalClick          int     `json:"totalClick"`
	TotalViews          int     `json:"totalViews"`
	TotalForward        int     `json:"totalForward"`
	TotalReaction       int     `json:"totalReaction"`
}

type Advertisements struct {
	ID         string    `json:"id"`
	CampaignID string    `json:"campaignId"`
	ContentID  string    `json:"contentId"`
	ChannelID  string    `json:"channelId"`
	MessageID  *int      `json:"messageId,omitempty"`
	Status     *AdStatus `json:"status,omitempty"`
	CreatedAt  *string   `json:"createdAt,omitempty"`
	UpdatedAt  *string   `json:"updatedAt,omitempty"`
	DeletedAt  *string   `json:"deletedAt,omitempty"`
}

type Audiences struct {
	CampaignID string  `json:"campaignId"`
	Category   *string `json:"category,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type Banks struct {
	ID        string  `json:"id"`
	BankName  string  `json:"bankName"`
	BankCode  string  `json:"bankCode"`
	CreatedAt *string `json:"createdAt,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	DeletedAt *string `json:"deletedAt,omitempty"`
}

type Budgets struct {
	CampaignID     string   `json:"campaignId"`
	InitialAmount  float64  `json:"initialAmount"`
	UsedAmount     *float64 `json:"usedAmount,omitempty"`
	RefundedAmount *float64 `json:"refundedAmount,omitempty"`
	Currency       *string  `json:"currency,omitempty"`
}

type Campaigns struct {
	ID        string         `json:"id"`
	CompanyID string         `json:"companyId"`
	Name      string         `json:"name"`
	Objective *ObjectiveType `json:"objective,omitempty"`
	StartDate *string        `json:"startDate,omitempty"`
	CreatedAt *string        `json:"createdAt,omitempty"`
	UpdatedAt *string        `json:"updatedAt,omitempty"`
	DeletedAt *string        `json:"deletedAt,omitempty"`
}

type Categories struct {
	Category string `json:"category"`
}

type ChannelBalances struct {
	ID        string   `json:"id"`
	AccountID string   `json:"accountId"`
	ChannelID string   `json:"channelId"`
	Amount    *float64 `json:"amount,omitempty"`
	Currency  *string  `json:"currency,omitempty"`
	CreatedAt *string  `json:"createdAt,omitempty"`
	UpdatedAt *string  `json:"updatedAt,omitempty"`
	DeletedAt *string  `json:"deletedAt,omitempty"`
}

type ChannelCategories struct {
	ID        string  `json:"id"`
	ChannelID *string `json:"channelId,omitempty"`
	Category  *string `json:"category,omitempty"`
}

type ChannelCollectedAdLinks struct {
	ChannelBalanceID string `json:"channelBalanceId"`
	AdPaymentID      string `json:"adPaymentId"`
}

type ChannelContentLanguages struct {
	ID        string  `json:"id"`
	ChannelID *string `json:"channelId,omitempty"`
	Language  *string `json:"language,omitempty"`
}

type ChannelDetails struct {
	ChannelID       string   `json:"channelId"`
	SubCount        *int     `json:"subCount,omitempty"`
	AveragePostView *int     `json:"averagePostView,omitempty"`
	PostToSubRatio  *float64 `json:"postToSubRatio,omitempty"`
	PostFrequency   *float64 `json:"PostFrequency,omitempty"`
	LastPostID      *string  `json:"lastPostId,omitempty"`
	LastPost        *string  `json:"lastPost,omitempty"`
	CollectedDate   *string  `json:"collectedDate,omitempty"`
	CreatedAt       *string  `json:"createdAt,omitempty"`
	UpdatedAt       *string  `json:"updatedAt,omitempty"`
	DeletedAt       *string  `json:"deletedAt,omitempty"`
}

type ChannelLifeTimeBalances struct {
	ID          string  `json:"id"`
	AccountID   string  `json:"accountId"`
	ChannelID   string  `json:"channelId"`
	TotalAmount float64 `json:"totalAmount"`
	Currency    *string `json:"currency,omitempty"`
	TotalHour   float64 `json:"totalHour"`
	TotalAd     float64 `json:"totalAd"`
	CreatedAt   *string `json:"createdAt,omitempty"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
	DeletedAt   *string `json:"deletedAt,omitempty"`
}

type Channels struct {
	ID               string                     `json:"id"`
	OwnerID          string                     `json:"ownerId"`
	UserName         string                     `json:"userName"`
	Name             *string                    `json:"name,omitempty"`
	Description      *string                    `json:"description,omitempty"`
	BotAddAsAdmin    *bool                      `json:"botAddAsAdmin,omitempty"`
	ChannelCreatedAt *string                    `json:"channelCreatedAt,omitempty"`
	Country          *string                    `json:"country,omitempty"`
	Currency         *string                    `json:"currency,omitempty"`
	CpmRating        *CpmRates                  `json:"cpmRating,omitempty"`
	Categories       []*ChannelCategories       `json:"categories,omitempty"`
	Languages        []*ChannelContentLanguages `json:"languages,omitempty"`
	ChannelDetails   *ChannelDetails            `json:"channelDetails,omitempty"`
	CreatedAt        *string                    `json:"createdAt,omitempty"`
	UpdatedAt        *string                    `json:"updatedAt,omitempty"`
	DeletedAt        *string                    `json:"deletedAt,omitempty"`
}

type Companies struct {
	ID         string  `json:"id"`
	CreatorID  string  `json:"creatorId"`
	Name       string  `json:"name"`
	UniqueName string  `json:"uniqueName"`
	TinNumber  *string `json:"tinNumber,omitempty"`
	VatNumber  *string `json:"vatNumber,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
}

type CompanyBankings struct {
	ID             string  `json:"id"`
	CompanyID      string  `json:"companyId"`
	BankID         string  `json:"bankId"`
	FullNameOnBank string  `json:"fullNameOnBank"`
	BankAccount    string  `json:"bankAccount"`
	Currency       string  `json:"currency"`
	CreatedAt      *string `json:"createdAt,omitempty"`
	UpdatedAt      *string `json:"updatedAt,omitempty"`
	DeletedAt      *string `json:"deletedAt,omitempty"`
}

type CompanyLocations struct {
	CompanyID  string `json:"companyId"`
	LocationID string `json:"locationId"`
}

type CompanyMembers struct {
	ID        string       `json:"id"`
	AccountID string       `json:"accountId"`
	CompanyID string       `json:"companyId"`
	Role      *CompanyRole `json:"role,omitempty"`
	CreatedAt *string      `json:"createdAt,omitempty"`
	UpdatedAt *string      `json:"updatedAt,omitempty"`
}

type ContentLinks struct {
	ContentID string  `json:"contentId"`
	Link      *string `json:"link,omitempty"`
	Title     *string `json:"title,omitempty"`
}

type Contents struct {
	ID          string       `json:"id"`
	CampaignID  string       `json:"campaignId"`
	ContentType *ContentType `json:"contentType,omitempty"`
	Description *string      `json:"description,omitempty"`
	CreatedAt   *string      `json:"createdAt,omitempty"`
	UpdatedAt   *string      `json:"updatedAt,omitempty"`
	DeletedAt   *string      `json:"deletedAt,omitempty"`
}

type DeletionResult struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type FilterInput struct {
	After  *string `json:"after,omitempty"`
	Before *string `json:"before,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type Funding struct {
	ID           string         `json:"id"`
	CompanyID    string         `json:"companyId"`
	Amount       float64        `json:"amount"`
	Currency     *string        `json:"currency,omitempty"`
	Key          string         `json:"key"`
	Method       *string        `json:"method,omitempty"`
	FundingTxRef *string        `json:"fundingTxRef,omitempty"`
	Reference    *string        `json:"reference,omitempty"`
	PaymentDate  *string        `json:"paymentDate,omitempty"`
	RedirectURL  *string        `json:"redirectUrl,omitempty"`
	Status       *FundingStatus `json:"status,omitempty"`
	Extra        interface{}    `json:"extra,omitempty"`
	Log          interface{}    `json:"log,omitempty"`
	Tax          string         `json:"tax"`
	CreatedAt    *string        `json:"createdAt,omitempty"`
	UpdatedAt    *string        `json:"updatedAt,omitempty"`
	DeletedAt    *string        `json:"deletedAt,omitempty"`
}

type HourlyRates struct {
	ID              string   `json:"id"`
	ChannelID       string   `json:"channelId"`
	Active          *bool    `json:"active,omitempty"`
	HourlyRate      *float64 `json:"hourlyRate,omitempty"`
	MinHourlyVolume *float64 `json:"minHourlyVolume,omitempty"`
	MaxHourlyVolume *float64 `json:"maxHourlyVolume,omitempty"`
	CreatedAt       *string  `json:"createdAt,omitempty"`
	RemoveAt        *string  `json:"removeAt,omitempty"`
}

type Languages struct {
	Language string `json:"language"`
}

type Locations struct {
	ID         string  `json:"id"`
	Country    string  `json:"country"`
	State      string  `json:"state"`
	City       string  `json:"city"`
	Address    *string `json:"address,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	DeletedAt  *string `json:"deletedAt,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type User struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

type WithdrawalChannelLinkFilter struct {
	ChannelBalanceID *string      `json:"channelBalanceId,omitempty"`
	Filter           *FilterInput `json:"filter,omitempty"`
}

type WithdrawalChannelLinkInput struct {
	WithdrawalID     string `json:"withdrawalId"`
	ChannelBalanceID string `json:"channelBalanceId"`
}

type WithdrawalChannelLinks struct {
	WithdrawalID     string `json:"withdrawalId"`
	ChannelBalanceID string `json:"channelBalanceId"`
}

type Withdrawals struct {
	ID            string      `json:"id"`
	AccountID     string      `json:"accountId"`
	AccountBankID string      `json:"accountBankId"`
	TotalAmount   float64     `json:"totalAmount"`
	Currency      *string     `json:"currency,omitempty"`
	FundingKey    *string     `json:"fundingKey,omitempty"`
	Method        *string     `json:"method,omitempty"`
	Reference     *string     `json:"reference,omitempty"`
	PaymentDate   *string     `json:"paymentDate,omitempty"`
	Status        *Status     `json:"status,omitempty"`
	Extra         interface{} `json:"extra,omitempty"`
	Log           interface{} `json:"log,omitempty"`
	CreatedAt     *string     `json:"createdAt,omitempty"`
	UpdatedAt     *string     `json:"updatedAt,omitempty"`
	DeletedAt     *string     `json:"deletedAt,omitempty"`
}

type AccountBankingsFilter struct {
	Filter    *FilterInput `json:"filter,omitempty"`
	AccountID *string      `json:"accountId,omitempty"`
	BankID    *string      `json:"bankId,omitempty"`
}

type AdPaymentFilter struct {
	AdvertisementID *string            `json:"advertisementId,omitempty"`
	CampaignID      *string            `json:"campaignId,omitempty"`
	ChannelID       *string            `json:"channelId,omitempty"`
	Amount          *MinMaxFilterInput `json:"amount,omitempty"`
	Currency        *string            `json:"currency,omitempty"`
	Filter          *FilterInput       `json:"filter,omitempty"`
}

type AdvertisementFilter struct {
	ChannelID          *string            `json:"channelId,omitempty"`
	CompanyID          *string            `json:"companyId,omitempty"`
	Status             []AdStatus         `json:"status,omitempty"`
	Rate               *MinMaxFilterInput `json:"rate,omitempty"`
	ChannelBudgetShare *MinMaxFilterInput `json:"channelBudgetShare,omitempty"`
	RequiredViews      *MinMaxFilterInput `json:"requiredViews,omitempty"`
	Views              *MinMaxFilterInput `json:"Views,omitempty"`
	Hours              *MinMaxFilterInput `json:"Hours,omitempty"`
	Filter             *FilterInput       `json:"filter,omitempty"`
}

type BankFilter struct {
	Filter *FilterInput `json:"filter,omitempty"`
}

type CampaignFilter struct {
	Name                       *string            `json:"name,omitempty"`
	CompanyID                  *string            `json:"companyId,omitempty"`
	Objective                  []ObjectiveType    `json:"objective,omitempty"`
	Categories                 []string           `json:"categories,omitempty"`
	Languages                  []string           `json:"languages,omitempty"`
	InitialBudget              *MinMaxFilterInput `json:"initialBudget,omitempty"`
	UsedAmount                 *MinMaxFilterInput `json:"usedAmount,omitempty"`
	ContentType                []ContentType      `json:"contentType,omitempty"`
	AdvertisementStatus        []AdStatus         `json:"advertisementStatus,omitempty"`
	AdvertisementRate          *MinMaxFilterInput `json:"advertisementRate,omitempty"`
	AdvertisementRequiredViews *MinMaxFilterInput `json:"advertisementRequiredViews,omitempty"`
	AdvertisementViews         *MinMaxFilterInput `json:"advertisementViews,omitempty"`
	AdvertisementHours         *MinMaxFilterInput `json:"advertisementHours,omitempty"`
	Filter                     *FilterInput       `json:"filter,omitempty"`
}

type CategoryFilter struct {
	Filter *FilterInput `json:"filter,omitempty"`
}

type ChannelCategoryFilter struct {
	ChannelID *string      `json:"channelId,omitempty"`
	Category  *string      `json:"category,omitempty"`
	Filter    *FilterInput `json:"filter,omitempty"`
}

type ChannelCategoryInput struct {
	ChannelID string `json:"channelId"`
	Category  string `json:"category"`
}

type ChannelCollectedAdLinkFilter struct {
	ChannelBalanceID *string      `json:"channelBalanceId,omitempty"`
	Filter           *FilterInput `json:"filter,omitempty"`
}

type ChannelCollectedAdLinkInput struct {
	ChannelBalanceID string `json:"channelBalanceId"`
	AdPaymentID      string `json:"adPaymentId"`
}

type ChannelContentLanguageFilter struct {
	ChannelID *string      `json:"channelId,omitempty"`
	Language  *string      `json:"language,omitempty"`
	Filter    *FilterInput `json:"filter,omitempty"`
}

type ChannelContentLanguageInput struct {
	ChannelID string `json:"channelId"`
	Language  string `json:"language"`
}

type ChannelDetailFilter struct {
	Filter *FilterInput `json:"filter,omitempty"`
}

type ChannelFilter struct {
	Name           *string            `json:"name,omitempty"`
	Country        *string            `json:"country,omitempty"`
	Categories     []string           `json:"categories,omitempty"`
	Languages      []string           `json:"languages,omitempty"`
	SubCount       *MinMaxFilterInput `json:"subCount,omitempty"`
	CpmFilter      *MinMaxFilterInput `json:"cpmFilter,omitempty"`
	PostViewFilter *MinMaxFilterInput `json:"postViewFilter,omitempty"`
	Filter         *FilterInput       `json:"filter,omitempty"`
}

type CompanyBankingFilter struct {
	Filter    *FilterInput `json:"filter,omitempty"`
	CompanyID *string      `json:"companyId,omitempty"`
	BankID    *string      `json:"bankId,omitempty"`
}

type CompanyMemberFilter struct {
	CompanyID *string       `json:"companyId,omitempty"`
	AccountID *string       `json:"accountId,omitempty"`
	Role      []CompanyRole `json:"role,omitempty"`
	Filter    *FilterInput  `json:"filter,omitempty"`
}

type CpmRates struct {
	ID           string   `json:"id"`
	ChannelID    string   `json:"channelId"`
	Active       *bool    `json:"active,omitempty"`
	Cpm          *float64 `json:"CPM,omitempty"`
	MinCPMVolume *float64 `json:"minCPMVolume,omitempty"`
	CreatedAt    *string  `json:"createdAt,omitempty"`
	UpdatedAt    *string  `json:"updatedAt,omitempty"`
}

type CreateAccountBankingInput struct {
	AccountID      string `json:"accountId"`
	BankID         string `json:"bankId"`
	FullNameOnBank string `json:"fullNameOnBank"`
	BankAccount    string `json:"bankAccount"`
	Currency       string `json:"currency"`
}

type CreateAccountInput struct {
	UserID      string       `json:"userId"`
	UserName    string       `json:"userName"`
	Email       *string      `json:"email,omitempty"`
	PhoneNumber *string      `json:"phoneNumber,omitempty"`
	FullName    *string      `json:"fullName,omitempty"`
	BirthDate   *string      `json:"birthDate,omitempty"`
	AccountType *AccountType `json:"accountType,omitempty"`
}

type CreateAdPaymentInput struct {
	AdvertisementID string   `json:"advertisementId"`
	AccountID       string   `json:"accountId"`
	CampaignID      string   `json:"campaignId"`
	ChannelID       string   `json:"channelId"`
	Amount          *float64 `json:"amount,omitempty"`
	Currency        *string  `json:"currency,omitempty"`
	CompletionTime  *string  `json:"completionTime,omitempty"`
}

type CreateAdvertisementCPMInput struct {
	AdvertisementID string  `json:"advertisementId"`
	Rate            float64 `json:"Rate"`
	ChannelShare    float64 `json:"channelShare"`
	ProviderShare   float64 `json:"providerShare"`
	TotalBudget     float64 `json:"totalBudget"`
	MaxLifeCycle    int     `json:"maxLifeCycle"`
	RequiredViews   int     `json:"requiredViews"`
}

type CreateAdvertisementInput struct {
	CampaignID string    `json:"campaignId"`
	ContentID  string    `json:"contentId"`
	ChannelID  string    `json:"channelId"`
	MessageID  *int      `json:"messageId,omitempty"`
	Status     *AdStatus `json:"status,omitempty"`
}

type CreateAdvertisementResultInput struct {
	AdvertisementID     string   `json:"advertisementId"`
	StartedAt           string   `json:"startedAt"`
	Budget              *float64 `json:"budget,omitempty"`
	ProviderBudgetShare *float64 `json:"providerBudgetShare,omitempty"`
	ChannelBudgetShare  *float64 `json:"channelBudgetShare,omitempty"`
	TotalHour           *int     `json:"totalHour,omitempty"`
	TotalClick          *int     `json:"totalClick,omitempty"`
	TotalViews          *int     `json:"totalViews,omitempty"`
	TotalForward        *int     `json:"totalForward,omitempty"`
	TotalReaction       *int     `json:"totalReaction,omitempty"`
}

type CreateAudienceInput struct {
	CampaignID string  `json:"campaignId"`
	Category   *string `json:"category,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type CreateBankInput struct {
	BankName string `json:"bankName"`
	BankCode string `json:"bankCode"`
}

type CreateBudgetInput struct {
	CampaignID     string   `json:"campaignId"`
	InitialAmount  float64  `json:"initialAmount"`
	UsedAmount     *float64 `json:"usedAmount,omitempty"`
	RefundedAmount *float64 `json:"refundedAmount,omitempty"`
	Currency       *string  `json:"currency,omitempty"`
}

type CreateCPMRateInput struct {
	ChannelID    string   `json:"channelId"`
	Active       *bool    `json:"active,omitempty"`
	Cpm          *float64 `json:"CPM,omitempty"`
	MinCPMVolume *float64 `json:"minCPMVolume,omitempty"`
}

type CreateCampaignInput struct {
	CompanyID string         `json:"companyId"`
	Name      string         `json:"name"`
	Objective *ObjectiveType `json:"objective,omitempty"`
	StartDate *string        `json:"startDate,omitempty"`
}

type CreateCategoryInput struct {
	Category string `json:"category"`
}

type CreateChannelBalanceInput struct {
	AccountID string   `json:"accountId"`
	ChannelID string   `json:"channelId"`
	Amount    *float64 `json:"amount,omitempty"`
	Currency  *string  `json:"currency,omitempty"`
}

type CreateChannelDetailInput struct {
	ChannelID       string   `json:"channelId"`
	SubCount        *int     `json:"subCount,omitempty"`
	AveragePostView *int     `json:"averagePostView,omitempty"`
	PostToSubRatio  *float64 `json:"postToSubRatio,omitempty"`
	PostFrequency   *float64 `json:"PostFrequency,omitempty"`
	LastPostID      *string  `json:"lastPostId,omitempty"`
	LastPost        *string  `json:"lastPost,omitempty"`
	CollectedDate   *string  `json:"collectedDate,omitempty"`
}

type CreateChannelInput struct {
	OwnerID          string              `json:"ownerId"`
	UserName         string              `json:"userName"`
	Name             *string             `json:"name,omitempty"`
	Description      *string             `json:"description,omitempty"`
	BotAddAsAdmin    *bool               `json:"botAddAsAdmin,omitempty"`
	ChannelCreatedAt *string             `json:"channelCreatedAt,omitempty"`
	Country          *string             `json:"country,omitempty"`
	Currency         *string             `json:"currency,omitempty"`
	CpmRate          *CreateCPMRateInput `json:"cpmRate,omitempty"`
	Categories       []string            `json:"categories,omitempty"`
	Languages        []string            `json:"languages,omitempty"`
}

type CreateChannelLifeTimeBalanceInput struct {
	AccountID   string  `json:"accountId"`
	ChannelID   string  `json:"channelId"`
	TotalAmount float64 `json:"totalAmount"`
	Currency    *string `json:"currency,omitempty"`
	TotalHour   float64 `json:"totalHour"`
	TotalAd     float64 `json:"totalAd"`
}

type CreateCompanyBankingInput struct {
	CompanyID      string `json:"companyId"`
	BankID         string `json:"bankId"`
	FullNameOnBank string `json:"fullNameOnBank"`
	BankAccount    string `json:"bankAccount"`
	Currency       string `json:"currency"`
}

type CreateCompanyInput struct {
	CreatorID  string  `json:"creatorId"`
	Name       string  `json:"name"`
	UniqueName string  `json:"uniqueName"`
	TinNumber  *string `json:"tinNumber,omitempty"`
	VatNumber  *string `json:"vatNumber,omitempty"`
}

type CreateCompanyLocationInput struct {
	CompanyID  string `json:"companyId"`
	LocationID string `json:"locationId"`
}

type CreateCompanyMemberInput struct {
	AccountID string       `json:"accountId"`
	CompanyID string       `json:"companyId"`
	Role      *CompanyRole `json:"role,omitempty"`
}

type CreateContentInput struct {
	CampaignID  string       `json:"campaignId"`
	ContentType *ContentType `json:"contentType,omitempty"`
	Description *string      `json:"description,omitempty"`
}

type CreateContentLinkInput struct {
	ContentID string  `json:"contentId"`
	Link      *string `json:"link,omitempty"`
	Title     *string `json:"title,omitempty"`
}

type CreateFundingInput struct {
	CompanyID    string         `json:"companyId"`
	Amount       float64        `json:"amount"`
	Currency     *string        `json:"currency,omitempty"`
	Key          string         `json:"key"`
	Method       *string        `json:"method,omitempty"`
	FundingTxRef *string        `json:"fundingTxRef,omitempty"`
	Reference    *string        `json:"reference,omitempty"`
	PaymentDate  *string        `json:"paymentDate,omitempty"`
	RedirectURL  *string        `json:"redirectUrl,omitempty"`
	Status       *FundingStatus `json:"status,omitempty"`
	Extra        interface{}    `json:"extra,omitempty"`
	Log          interface{}    `json:"log,omitempty"`
	Tax          string         `json:"tax"`
}

type CreateHourlyRateInput struct {
	ChannelID       string   `json:"channelId"`
	Active          *bool    `json:"active,omitempty"`
	HourlyRate      *float64 `json:"hourlyRate,omitempty"`
	MinHourlyVolume *float64 `json:"minHourlyVolume,omitempty"`
	MaxHourlyVolume *float64 `json:"maxHourlyVolume,omitempty"`
}

type CreateLanguageInput struct {
	Language string `json:"language"`
}

type CreateLocationInput struct {
	Country    string  `json:"country"`
	State      string  `json:"state"`
	City       string  `json:"city"`
	Address    *string `json:"address,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
}

type CreateWithdrawalInput struct {
	AccountID     string      `json:"accountId"`
	AccountBankID string      `json:"accountBankId"`
	TotalAmount   float64     `json:"totalAmount"`
	Currency      *string     `json:"currency,omitempty"`
	FundingKey    *string     `json:"fundingKey,omitempty"`
	Method        *string     `json:"method,omitempty"`
	Reference     *string     `json:"reference,omitempty"`
	PaymentDate   *string     `json:"paymentDate,omitempty"`
	Status        *Status     `json:"status,omitempty"`
	Extra         interface{} `json:"extra,omitempty"`
	Log           interface{} `json:"log,omitempty"`
}

type FundingFilter struct {
	CompanyID *string            `json:"companyId,omitempty"`
	Status    []FundingStatus    `json:"status,omitempty"`
	Amount    *MinMaxFilterInput `json:"amount,omitempty"`
	Currency  *string            `json:"currency,omitempty"`
	Filter    *FilterInput       `json:"filter,omitempty"`
}

type LanguageFilter struct {
	Filter *FilterInput `json:"filter,omitempty"`
}

type MinMaxFilterInput struct {
	Min float64  `json:"min"`
	Max *float64 `json:"max,omitempty"`
}

type UpdateAccountInput struct {
	ID          string       `json:"id"`
	UserName    *string      `json:"userName,omitempty"`
	Email       *string      `json:"email,omitempty"`
	PhoneNumber *string      `json:"phoneNumber,omitempty"`
	FullName    *string      `json:"fullName,omitempty"`
	BirthDate   *string      `json:"birthDate,omitempty"`
	AccountType *AccountType `json:"accountType,omitempty"`
}

type UpdateAdPaymentInput struct {
	ID             string   `json:"id"`
	Amount         *float64 `json:"amount,omitempty"`
	Currency       *string  `json:"currency,omitempty"`
	CompletionTime *string  `json:"completionTime,omitempty"`
}

type UpdateAdvertisementCPMInput struct {
	AdvertisementID string   `json:"advertisementId"`
	Rate            *float64 `json:"Rate,omitempty"`
	ChannelShare    *float64 `json:"channelShare,omitempty"`
	ProviderShare   *float64 `json:"providerShare,omitempty"`
	TotalBudget     *float64 `json:"totalBudget,omitempty"`
	MaxLifeCycle    *int     `json:"maxLifeCycle,omitempty"`
	RequiredViews   *int     `json:"requiredViews,omitempty"`
}

type UpdateAdvertisementInput struct {
	ID     string    `json:"id"`
	Status *AdStatus `json:"status,omitempty"`
}

type UpdateAdvertisementResultInput struct {
	AdvertisementID     string   `json:"advertisementId"`
	StartedAt           *string  `json:"startedAt,omitempty"`
	Budget              *float64 `json:"budget,omitempty"`
	ProviderBudgetShare *float64 `json:"providerBudgetShare,omitempty"`
	ChannelBudgetShare  *float64 `json:"channelBudgetShare,omitempty"`
	TotalHour           *int     `json:"totalHour,omitempty"`
	TotalClick          *int     `json:"totalClick,omitempty"`
	TotalViews          *int     `json:"totalViews,omitempty"`
	TotalForward        *int     `json:"totalForward,omitempty"`
	TotalReaction       *int     `json:"totalReaction,omitempty"`
}

type UpdateAudienceInput struct {
	CampaignID string  `json:"campaignId"`
	Category   *string `json:"category,omitempty"`
	Language   *string `json:"language,omitempty"`
}

type UpdateBankInput struct {
	ID       string  `json:"id"`
	BankName *string `json:"bankName,omitempty"`
	BankCode *string `json:"bankCode,omitempty"`
}

type UpdateBudgetInput struct {
	CampaignID     string   `json:"campaignId"`
	InitialAmount  *float64 `json:"initialAmount,omitempty"`
	UsedAmount     *float64 `json:"usedAmount,omitempty"`
	RefundedAmount *float64 `json:"refundedAmount,omitempty"`
	Currency       *string  `json:"currency,omitempty"`
}

type UpdateCPMRateInput struct {
	ChannelID    string   `json:"channelId"`
	Active       *bool    `json:"active,omitempty"`
	Cpm          *float64 `json:"CPM,omitempty"`
	MinCPMVolume *float64 `json:"minCPMVolume,omitempty"`
}

type UpdateCampaignInput struct {
	ID        string         `json:"id"`
	Name      *string        `json:"name,omitempty"`
	Objective *ObjectiveType `json:"objective,omitempty"`
	StartDate *string        `json:"startDate,omitempty"`
}

type UpdateChannelBalanceInput struct {
	ID       string   `json:"id"`
	Amount   *float64 `json:"amount,omitempty"`
	Currency *string  `json:"currency,omitempty"`
}

type UpdateChannelDetailInput struct {
	ChannelID       string   `json:"channelId"`
	SubCount        *int     `json:"subCount,omitempty"`
	AveragePostView *int     `json:"averagePostView,omitempty"`
	PostToSubRatio  *float64 `json:"postToSubRatio,omitempty"`
	PostFrequency   *float64 `json:"PostFrequency,omitempty"`
	LastPostID      *string  `json:"lastPostId,omitempty"`
	LastPost        *string  `json:"lastPost,omitempty"`
	CollectedDate   *string  `json:"collectedDate,omitempty"`
}

type UpdateChannelInput struct {
	ID            string  `json:"id"`
	OwnerID       *string `json:"ownerId,omitempty"`
	UserName      *string `json:"userName,omitempty"`
	Name          *string `json:"name,omitempty"`
	Description   *string `json:"description,omitempty"`
	BotAddAsAdmin *bool   `json:"botAddAsAdmin,omitempty"`
	Country       *string `json:"country,omitempty"`
	Currency      *string `json:"currency,omitempty"`
}

type UpdateChannelLifeTimeBalanceInput struct {
	ID          string   `json:"id"`
	TotalAmount *float64 `json:"totalAmount,omitempty"`
	Currency    *string  `json:"currency,omitempty"`
	TotalHour   *float64 `json:"totalHour,omitempty"`
	TotalAd     *float64 `json:"totalAd,omitempty"`
}

type UpdateCompanyInput struct {
	ID         string  `json:"id"`
	Name       *string `json:"name,omitempty"`
	UniqueName *string `json:"uniqueName,omitempty"`
	TinNumber  *string `json:"tinNumber,omitempty"`
	VatNumber  *string `json:"vatNumber,omitempty"`
}

type UpdateCompanyMemberInput struct {
	ID   string       `json:"id"`
	Role *CompanyRole `json:"role,omitempty"`
}

type UpdateContentInput struct {
	ID          string       `json:"id"`
	ContentType *ContentType `json:"contentType,omitempty"`
	Description *string      `json:"description,omitempty"`
}

type UpdateContentLinkInput struct {
	ContentID string  `json:"contentId"`
	Link      *string `json:"link,omitempty"`
	Title     *string `json:"title,omitempty"`
}

type UpdateFundingInput struct {
	ID           string         `json:"id"`
	Amount       *float64       `json:"amount,omitempty"`
	Currency     *string        `json:"currency,omitempty"`
	Key          *string        `json:"key,omitempty"`
	Method       *string        `json:"method,omitempty"`
	FundingTxRef *string        `json:"fundingTxRef,omitempty"`
	Reference    *string        `json:"reference,omitempty"`
	PaymentDate  *string        `json:"paymentDate,omitempty"`
	RedirectURL  *string        `json:"redirectUrl,omitempty"`
	Status       *FundingStatus `json:"status,omitempty"`
	Extra        interface{}    `json:"extra,omitempty"`
	Log          interface{}    `json:"log,omitempty"`
	Tax          *string        `json:"tax,omitempty"`
}

type UpdateHourlyRateInput struct {
	ID              string   `json:"id"`
	Active          *bool    `json:"active,omitempty"`
	HourlyRate      *float64 `json:"hourlyRate,omitempty"`
	MinHourlyVolume *float64 `json:"minHourlyVolume,omitempty"`
	MaxHourlyVolume *float64 `json:"maxHourlyVolume,omitempty"`
}

type UpdateLocationInput struct {
	ID         string  `json:"id"`
	Country    *string `json:"country,omitempty"`
	State      *string `json:"state,omitempty"`
	City       *string `json:"city,omitempty"`
	Address    *string `json:"address,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
}

type UpdateWithdrawalInput struct {
	ID          string      `json:"id"`
	TotalAmount *float64    `json:"totalAmount,omitempty"`
	Currency    *string     `json:"currency,omitempty"`
	FundingKey  *string     `json:"fundingKey,omitempty"`
	Method      *string     `json:"method,omitempty"`
	Reference   *string     `json:"reference,omitempty"`
	PaymentDate *string     `json:"paymentDate,omitempty"`
	Status      *Status     `json:"status,omitempty"`
	Extra       interface{} `json:"extra,omitempty"`
	Log         interface{} `json:"log,omitempty"`
}

type WithdrawalFilter struct {
	AccountID     *string            `json:"accountId,omitempty"`
	AccountBankID *string            `json:"accountBankId,omitempty"`
	Status        []Status           `json:"status,omitempty"`
	TotalAmount   *MinMaxFilterInput `json:"totalAmount,omitempty"`
	Currency      *string            `json:"currency,omitempty"`
	Filter        *FilterInput       `json:"filter,omitempty"`
}

type AccountType string

const (
	AccountTypePublisher  AccountType = "Publisher"
	AccountTypeAdvertiser AccountType = "Advertiser"
)

var AllAccountType = []AccountType{
	AccountTypePublisher,
	AccountTypeAdvertiser,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypePublisher, AccountTypeAdvertiser:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AdStatus string

const (
	AdStatusPending  AdStatus = "Pending"
	AdStatusRunning  AdStatus = "Running"
	AdStatusClosed   AdStatus = "Closed"
	AdStatusRejected AdStatus = "Rejected"
)

var AllAdStatus = []AdStatus{
	AdStatusPending,
	AdStatusRunning,
	AdStatusClosed,
	AdStatusRejected,
}

func (e AdStatus) IsValid() bool {
	switch e {
	case AdStatusPending, AdStatusRunning, AdStatusClosed, AdStatusRejected:
		return true
	}
	return false
}

func (e AdStatus) String() string {
	return string(e)
}

func (e *AdStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdStatus", str)
	}
	return nil
}

func (e AdStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CompanyRole string

const (
	CompanyRoleAdmin  CompanyRole = "Admin"
	CompanyRoleMember CompanyRole = "Member"
)

var AllCompanyRole = []CompanyRole{
	CompanyRoleAdmin,
	CompanyRoleMember,
}

func (e CompanyRole) IsValid() bool {
	switch e {
	case CompanyRoleAdmin, CompanyRoleMember:
		return true
	}
	return false
}

func (e CompanyRole) String() string {
	return string(e)
}

func (e *CompanyRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyRole", str)
	}
	return nil
}

func (e CompanyRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContentType string

const (
	ContentTypeImageMediaGroup ContentType = "ImageMediaGroup"
	ContentTypeJustText        ContentType = "JustText"
)

var AllContentType = []ContentType{
	ContentTypeImageMediaGroup,
	ContentTypeJustText,
}

func (e ContentType) IsValid() bool {
	switch e {
	case ContentTypeImageMediaGroup, ContentTypeJustText:
		return true
	}
	return false
}

func (e ContentType) String() string {
	return string(e)
}

func (e *ContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContentType", str)
	}
	return nil
}

func (e ContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FundingStatus string

const (
	FundingStatusProcessing FundingStatus = "Processing"
	FundingStatusSuccessful FundingStatus = "Successful"
	FundingStatusFailed     FundingStatus = "Failed"
)

var AllFundingStatus = []FundingStatus{
	FundingStatusProcessing,
	FundingStatusSuccessful,
	FundingStatusFailed,
}

func (e FundingStatus) IsValid() bool {
	switch e {
	case FundingStatusProcessing, FundingStatusSuccessful, FundingStatusFailed:
		return true
	}
	return false
}

func (e FundingStatus) String() string {
	return string(e)
}

func (e *FundingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FundingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FundingStatus", str)
	}
	return nil
}

func (e FundingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ObjectiveType string

const (
	ObjectiveTypeReach      ObjectiveType = "REACH"
	ObjectiveTypeImpression ObjectiveType = "IMPRESSION"
	ObjectiveTypeClicks     ObjectiveType = "CLICKS"
)

var AllObjectiveType = []ObjectiveType{
	ObjectiveTypeReach,
	ObjectiveTypeImpression,
	ObjectiveTypeClicks,
}

func (e ObjectiveType) IsValid() bool {
	switch e {
	case ObjectiveTypeReach, ObjectiveTypeImpression, ObjectiveTypeClicks:
		return true
	}
	return false
}

func (e ObjectiveType) String() string {
	return string(e)
}

func (e *ObjectiveType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObjectiveType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObjectiveType", str)
	}
	return nil
}

func (e ObjectiveType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusProcessing Status = "Processing"
	StatusSuccessful Status = "Successful"
	StatusFailed     Status = "Failed"
)

var AllStatus = []Status{
	StatusProcessing,
	StatusSuccessful,
	StatusFailed,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusProcessing, StatusSuccessful, StatusFailed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
