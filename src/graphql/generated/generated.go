// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"adtec/backend/src/graphql/model"
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Channels() ChannelsResolver
	Funding() FundingResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Withdrawals() WithdrawalsResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Account struct {
		AccountType func(childComplexity int) int
		BirthDate   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		FullName    func(childComplexity int) int
		ID          func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		UserName    func(childComplexity int) int
	}

	AccountBanking struct {
		AccountID      func(childComplexity int) int
		BankAccount    func(childComplexity int) int
		BankID         func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Currency       func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		FullNameOnBank func(childComplexity int) int
		ID             func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	AdPayments struct {
		AccountID       func(childComplexity int) int
		AdvertisementID func(childComplexity int) int
		Amount          func(childComplexity int) int
		CampaignID      func(childComplexity int) int
		ChannelID       func(childComplexity int) int
		CompletionTime  func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Currency        func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	AdvertisementCPMs struct {
		AdvertisementID func(childComplexity int) int
		ChannelShare    func(childComplexity int) int
		MaxLifeCycle    func(childComplexity int) int
		ProviderShare   func(childComplexity int) int
		Rate            func(childComplexity int) int
		RequiredViews   func(childComplexity int) int
		TotalBudget     func(childComplexity int) int
	}

	AdvertisementResults struct {
		AdvertisementID     func(childComplexity int) int
		Budget              func(childComplexity int) int
		ChannelBudgetShare  func(childComplexity int) int
		ProviderBudgetShare func(childComplexity int) int
		StartedAt           func(childComplexity int) int
		TotalClick          func(childComplexity int) int
		TotalForward        func(childComplexity int) int
		TotalHour           func(childComplexity int) int
		TotalReaction       func(childComplexity int) int
		TotalViews          func(childComplexity int) int
	}

	Advertisements struct {
		CampaignID func(childComplexity int) int
		ChannelID  func(childComplexity int) int
		ContentID  func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		MessageID  func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	Audiences struct {
		CampaignID func(childComplexity int) int
		Category   func(childComplexity int) int
		Language   func(childComplexity int) int
	}

	Banks struct {
		BankCode  func(childComplexity int) int
		BankName  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Budgets struct {
		CampaignID     func(childComplexity int) int
		Currency       func(childComplexity int) int
		InitialAmount  func(childComplexity int) int
		RefundedAmount func(childComplexity int) int
		UsedAmount     func(childComplexity int) int
	}

	Campaigns struct {
		CompanyID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Objective func(childComplexity int) int
		StartDate func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Categories struct {
		Category func(childComplexity int) int
	}

	ChannelBalances struct {
		AccountID func(childComplexity int) int
		Amount    func(childComplexity int) int
		ChannelID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Currency  func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ChannelCategories struct {
		Category  func(childComplexity int) int
		ChannelID func(childComplexity int) int
		ID        func(childComplexity int) int
	}

	ChannelCollectedAdLinks struct {
		AdPaymentID      func(childComplexity int) int
		ChannelBalanceID func(childComplexity int) int
	}

	ChannelContentLanguages struct {
		ChannelID func(childComplexity int) int
		ID        func(childComplexity int) int
		Language  func(childComplexity int) int
	}

	ChannelDetails struct {
		AveragePostView func(childComplexity int) int
		ChannelID       func(childComplexity int) int
		CollectedDate   func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		LastPost        func(childComplexity int) int
		LastPostID      func(childComplexity int) int
		PostFrequency   func(childComplexity int) int
		PostToSubRatio  func(childComplexity int) int
		SubCount        func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	ChannelLifeTimeBalances struct {
		AccountID   func(childComplexity int) int
		ChannelID   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Currency    func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		TotalAd     func(childComplexity int) int
		TotalAmount func(childComplexity int) int
		TotalHour   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Channels struct {
		BotAddAsAdmin    func(childComplexity int) int
		Categories       func(childComplexity int, filter *model.FilterInput) int
		ChannelCreatedAt func(childComplexity int) int
		ChannelDetails   func(childComplexity int) int
		Country          func(childComplexity int) int
		CpmRating        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Currency         func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		ID               func(childComplexity int) int
		Languages        func(childComplexity int, filter *model.FilterInput) int
		Name             func(childComplexity int) int
		OwnerID          func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UserName         func(childComplexity int) int
	}

	Companies struct {
		CreatedAt  func(childComplexity int) int
		CreatorID  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		TinNumber  func(childComplexity int) int
		UniqueName func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		VatNumber  func(childComplexity int) int
	}

	CompanyBankings struct {
		BankAccount    func(childComplexity int) int
		BankID         func(childComplexity int) int
		CompanyID      func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Currency       func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		FullNameOnBank func(childComplexity int) int
		ID             func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	CompanyLocations struct {
		CompanyID  func(childComplexity int) int
		LocationID func(childComplexity int) int
	}

	CompanyMembers struct {
		AccountID func(childComplexity int) int
		CompanyID func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Role      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	ContentLinks struct {
		ContentID func(childComplexity int) int
		Link      func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	Contents struct {
		CampaignID  func(childComplexity int) int
		ContentType func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	DeletionResult struct {
		Message func(childComplexity int) int
		Success func(childComplexity int) int
	}

	Funding struct {
		Amount       func(childComplexity int) int
		CompanyID    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Currency     func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		Extra        func(childComplexity int) int
		FundingTxRef func(childComplexity int) int
		ID           func(childComplexity int) int
		Key          func(childComplexity int) int
		Log          func(childComplexity int) int
		Method       func(childComplexity int) int
		PaymentDate  func(childComplexity int) int
		RedirectURL  func(childComplexity int) int
		Reference    func(childComplexity int) int
		Status       func(childComplexity int) int
		Tax          func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	HourlyRates struct {
		Active          func(childComplexity int) int
		ChannelID       func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		HourlyRate      func(childComplexity int) int
		ID              func(childComplexity int) int
		MaxHourlyVolume func(childComplexity int) int
		MinHourlyVolume func(childComplexity int) int
		RemoveAt        func(childComplexity int) int
	}

	Languages struct {
		Language func(childComplexity int) int
	}

	Locations struct {
		Address    func(childComplexity int) int
		City       func(childComplexity int) int
		Country    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		PostalCode func(childComplexity int) int
		State      func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	Mutation struct {
		CreateAccount                func(childComplexity int, input model.CreateAccountInput) int
		CreateAccountBanking         func(childComplexity int, input model.CreateAccountBankingInput) int
		CreateAdPayment              func(childComplexity int, input model.CreateAdPaymentInput) int
		CreateAdvertisement          func(childComplexity int, input model.CreateAdvertisementInput) int
		CreateAdvertisementCpm       func(childComplexity int, input model.CreateAdvertisementCPMInput) int
		CreateAdvertisementResult    func(childComplexity int, input model.CreateAdvertisementResultInput) int
		CreateAudience               func(childComplexity int, input model.CreateAudienceInput) int
		CreateBank                   func(childComplexity int, input model.CreateBankInput) int
		CreateBudget                 func(childComplexity int, input model.CreateBudgetInput) int
		CreateCPMRate                func(childComplexity int, input model.CreateCPMRateInput) int
		CreateCampaign               func(childComplexity int, input model.CreateCampaignInput) int
		CreateCategory               func(childComplexity int, input model.CreateCategoryInput) int
		CreateChannel                func(childComplexity int, input model.CreateChannelInput) int
		CreateChannelBalance         func(childComplexity int, input model.CreateChannelBalanceInput) int
		CreateChannelCategory        func(childComplexity int, input model.ChannelCategoryInput) int
		CreateChannelCollectedAdLink func(childComplexity int, input model.ChannelCollectedAdLinkInput) int
		CreateChannelContentLanguage func(childComplexity int, input model.ChannelContentLanguageInput) int
		CreateChannelDetail          func(childComplexity int, input model.CreateChannelDetailInput) int
		CreateChannelLifeTimeBalance func(childComplexity int, input model.CreateChannelLifeTimeBalanceInput) int
		CreateCompany                func(childComplexity int, input model.CreateCompanyInput) int
		CreateCompanyBanking         func(childComplexity int, input model.CreateCompanyBankingInput) int
		CreateCompanyLocation        func(childComplexity int, input model.CreateCompanyLocationInput) int
		CreateCompanyMember          func(childComplexity int, input model.CreateCompanyMemberInput) int
		CreateContent                func(childComplexity int, input model.CreateContentInput) int
		CreateContentLink            func(childComplexity int, input model.CreateContentLinkInput) int
		CreateFunding                func(childComplexity int, input model.CreateFundingInput) int
		CreateHourlyRate             func(childComplexity int, input model.CreateHourlyRateInput) int
		CreateLanguage               func(childComplexity int, input model.CreateLanguageInput) int
		CreateLocation               func(childComplexity int, input model.CreateLocationInput) int
		CreateWithdrawal             func(childComplexity int, input model.CreateWithdrawalInput) int
		CreateWithdrawalChannelLink  func(childComplexity int, input model.WithdrawalChannelLinkInput) int
		DeleteAccountBanking         func(childComplexity int, id string) int
		DeleteBank                   func(childComplexity int, id string) int
		DeleteCampaign               func(childComplexity int, id string) int
		DeleteChannel                func(childComplexity int, id string) int
		DeleteChannelCategory        func(childComplexity int, channelCategoryInput *model.ChannelCategoryInput) int
		DeleteChannelCollectedAdLink func(childComplexity int, channelCollectedAdLinkInput *model.ChannelCollectedAdLinkInput) int
		DeleteChannelContentLanguage func(childComplexity int, channelContentLanguageInput *model.ChannelContentLanguageInput) int
		DeleteCompanyBanking         func(childComplexity int, id string) int
		DeleteCompanyLocation        func(childComplexity int, companyID string, locationID string) int
		DeleteWithdrawalChannelLink  func(childComplexity int, withdrawalChannelLinkInput *model.WithdrawalChannelLinkInput) int
		UpdateAccount                func(childComplexity int, input model.UpdateAccountInput) int
		UpdateAdPayment              func(childComplexity int, input model.UpdateAdPaymentInput) int
		UpdateAdvertisement          func(childComplexity int, input model.UpdateAdvertisementInput) int
		UpdateAdvertisementCpm       func(childComplexity int, input model.UpdateAdvertisementCPMInput) int
		UpdateAdvertisementResult    func(childComplexity int, input model.UpdateAdvertisementResultInput) int
		UpdateAudience               func(childComplexity int, input model.UpdateAudienceInput) int
		UpdateBank                   func(childComplexity int, input model.UpdateBankInput) int
		UpdateBudget                 func(childComplexity int, input model.UpdateBudgetInput) int
		UpdateCPMRate                func(childComplexity int, input model.UpdateCPMRateInput) int
		UpdateCampaign               func(childComplexity int, input model.UpdateCampaignInput) int
		UpdateChannel                func(childComplexity int, input model.UpdateChannelInput) int
		UpdateChannelBalance         func(childComplexity int, input model.UpdateChannelBalanceInput) int
		UpdateChannelDetail          func(childComplexity int, input model.UpdateChannelDetailInput) int
		UpdateChannelLifeTimeBalance func(childComplexity int, input model.UpdateChannelLifeTimeBalanceInput) int
		UpdateCompany                func(childComplexity int, input model.UpdateCompanyInput) int
		UpdateCompanyMember          func(childComplexity int, input model.UpdateCompanyMemberInput) int
		UpdateContent                func(childComplexity int, input model.UpdateContentInput) int
		UpdateContentLink            func(childComplexity int, input model.UpdateContentLinkInput) int
		UpdateFunding                func(childComplexity int, input model.UpdateFundingInput) int
		UpdateHourlyRate             func(childComplexity int, input model.UpdateHourlyRateInput) int
		UpdateLocation               func(childComplexity int, input model.UpdateLocationInput) int
		UpdateWithdrawal             func(childComplexity int, input model.UpdateWithdrawalInput) int
	}

	Query struct {
		Account                       func(childComplexity int) int
		AccountBankingByID            func(childComplexity int, id string) int
		AccountByID                   func(childComplexity int, id string) int
		AdPaymentByID                 func(childComplexity int, advertisementID string) int
		AdvertisementByID             func(childComplexity int, id string) int
		AdvertisementCPMByID          func(childComplexity int, id string) int
		AdvertisementResultByID       func(childComplexity int, id string) int
		AudienceByID                  func(childComplexity int, id string) int
		BankByID                      func(childComplexity int, id string) int
		BudgetByID                    func(childComplexity int, id string) int
		CampaignByID                  func(childComplexity int, id string) int
		CategoryByID                  func(childComplexity int, id string) int
		ChannelBalanceByID            func(childComplexity int, channelID string) int
		ChannelByID                   func(childComplexity int, id string) int
		ChannelCollectedAdLink        func(childComplexity int, channelCollectedAdLinkInput *model.ChannelCollectedAdLinkInput) int
		ChannelCollectedAdLinkByID    func(childComplexity int, adPaymentID string) int
		ChannelDetailByID             func(childComplexity int, channelID string) int
		ChannelLifeTimeBalanceByID    func(childComplexity int, channelID string) int
		CompanyBankingByID            func(childComplexity int, id string) int
		CompanyByID                   func(childComplexity int, id string) int
		CompanyLocationByID           func(childComplexity int, companyID string, locationID string) int
		CompanyMemberByID             func(childComplexity int, id string) int
		ContentByID                   func(childComplexity int, id string) int
		ContentLinkByID               func(childComplexity int, id string) int
		CpmRateByChannelID            func(childComplexity int, channelID string) int
		FundingByID                   func(childComplexity int, id string) int
		GetAllAccountBankings         func(childComplexity int, accountBankingsFilter model.AccountBankingsFilter) int
		GetAllAdPayments              func(childComplexity int, adPaymentFilter *model.AdPaymentFilter) int
		GetAllAdvertisements          func(childComplexity int, advertisementFilter *model.AdvertisementFilter) int
		GetAllBanks                   func(childComplexity int, bankFilter model.BankFilter) int
		GetAllCampaigns               func(childComplexity int, campaignFilter *model.CampaignFilter) int
		GetAllCategories              func(childComplexity int, categoryFilter *model.CategoryFilter) int
		GetAllChannelCategories       func(childComplexity int, channelCategoryFilter *model.ChannelCategoryFilter) int
		GetAllChannelCollectedAdLinks func(childComplexity int, channelCollectedAdLinkFilter *model.ChannelCollectedAdLinkFilter) int
		GetAllChannelContentLanguages func(childComplexity int, channelContentLanguageFilter *model.ChannelContentLanguageFilter) int
		GetAllChannelDetails          func(childComplexity int, channelDetailFilter *model.ChannelDetailFilter) int
		GetAllChannels                func(childComplexity int, channelFilter *model.ChannelFilter) int
		GetAllCompanyBankings         func(childComplexity int, companyBankingsFilter model.CompanyBankingFilter) int
		GetAllCompanyMembers          func(childComplexity int, companyMemberFilter *model.CompanyMemberFilter) int
		GetAllFunding                 func(childComplexity int, fundingFilter *model.FundingFilter) int
		GetAllLanguages               func(childComplexity int, languageFilter *model.LanguageFilter) int
		GetAllWithdrawalChannelLinks  func(childComplexity int, withdrawalChannelLinkFilter *model.WithdrawalChannelLinkFilter) int
		GetAllWithdrawals             func(childComplexity int, withdrawalFilter *model.WithdrawalFilter) int
		HourlyRateByID                func(childComplexity int, id string) int
		LanguageByID                  func(childComplexity int, id string) int
		LocationByID                  func(childComplexity int, id string) int
		WithdrawalByID                func(childComplexity int, id string) int
		WithdrawalChannelLink         func(childComplexity int, withdrawalChannelLinkInput *model.WithdrawalChannelLinkInput) int
		WithdrawalChannelLinkByID     func(childComplexity int, withdrawalID string) int
	}

	User struct {
		Done func(childComplexity int) int
		ID   func(childComplexity int) int
		Text func(childComplexity int) int
	}

	WithdrawalChannelLinks struct {
		ChannelBalanceID func(childComplexity int) int
		WithdrawalID     func(childComplexity int) int
	}

	Withdrawals struct {
		AccountBankID func(childComplexity int) int
		AccountID     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Currency      func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		Extra         func(childComplexity int) int
		FundingKey    func(childComplexity int) int
		ID            func(childComplexity int) int
		Log           func(childComplexity int) int
		Method        func(childComplexity int) int
		PaymentDate   func(childComplexity int) int
		Reference     func(childComplexity int) int
		Status        func(childComplexity int) int
		TotalAmount   func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	CpmRates struct {
		Active       func(childComplexity int) int
		ChannelID    func(childComplexity int) int
		Cpm          func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		MinCPMVolume func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}
}

type ChannelsResolver interface {
	CpmRating(ctx context.Context, obj *model.Channels) (*model.CpmRates, error)
	Categories(ctx context.Context, obj *model.Channels, filter *model.FilterInput) ([]*model.ChannelCategories, error)
	Languages(ctx context.Context, obj *model.Channels, filter *model.FilterInput) ([]*model.ChannelContentLanguages, error)
	ChannelDetails(ctx context.Context, obj *model.Channels) (*model.ChannelDetails, error)
}
type FundingResolver interface {
	Extra(ctx context.Context, obj *model.Funding) (interface{}, error)
	Log(ctx context.Context, obj *model.Funding) (interface{}, error)
}
type MutationResolver interface {
	CreateAccount(ctx context.Context, input model.CreateAccountInput) (*model.Account, error)
	UpdateAccount(ctx context.Context, input model.UpdateAccountInput) (*model.Account, error)
	CreateCPMRate(ctx context.Context, input model.CreateCPMRateInput) (*model.CpmRates, error)
	UpdateCPMRate(ctx context.Context, input model.UpdateCPMRateInput) (*model.CpmRates, error)
	CreateAccountBanking(ctx context.Context, input model.CreateAccountBankingInput) (*model.AccountBanking, error)
	DeleteAccountBanking(ctx context.Context, id string) (*model.DeletionResult, error)
	CreateAdPayment(ctx context.Context, input model.CreateAdPaymentInput) (*model.AdPayments, error)
	UpdateAdPayment(ctx context.Context, input model.UpdateAdPaymentInput) (*model.AdPayments, error)
	CreateAdvertisementCpm(ctx context.Context, input model.CreateAdvertisementCPMInput) (*model.AdvertisementCPMs, error)
	UpdateAdvertisementCpm(ctx context.Context, input model.UpdateAdvertisementCPMInput) (*model.AdvertisementCPMs, error)
	CreateAdvertisementResult(ctx context.Context, input model.CreateAdvertisementResultInput) (*model.AdvertisementResults, error)
	UpdateAdvertisementResult(ctx context.Context, input model.UpdateAdvertisementResultInput) (*model.AdvertisementResults, error)
	CreateAdvertisement(ctx context.Context, input model.CreateAdvertisementInput) (*model.Advertisements, error)
	UpdateAdvertisement(ctx context.Context, input model.UpdateAdvertisementInput) (*model.Advertisements, error)
	CreateAudience(ctx context.Context, input model.CreateAudienceInput) (*model.Audiences, error)
	UpdateAudience(ctx context.Context, input model.UpdateAudienceInput) (*model.Audiences, error)
	CreateBank(ctx context.Context, input model.CreateBankInput) (*model.Banks, error)
	UpdateBank(ctx context.Context, input model.UpdateBankInput) (*model.Banks, error)
	DeleteBank(ctx context.Context, id string) (*model.DeletionResult, error)
	CreateBudget(ctx context.Context, input model.CreateBudgetInput) (*model.Budgets, error)
	UpdateBudget(ctx context.Context, input model.UpdateBudgetInput) (*model.Budgets, error)
	CreateCampaign(ctx context.Context, input model.CreateCampaignInput) (*model.Campaigns, error)
	UpdateCampaign(ctx context.Context, input model.UpdateCampaignInput) (*model.Campaigns, error)
	DeleteCampaign(ctx context.Context, id string) (*model.DeletionResult, error)
	CreateCategory(ctx context.Context, input model.CreateCategoryInput) (*model.Categories, error)
	CreateChannel(ctx context.Context, input model.CreateChannelInput) (*model.Channels, error)
	UpdateChannel(ctx context.Context, input model.UpdateChannelInput) (*model.Channels, error)
	DeleteChannel(ctx context.Context, id string) (*model.DeletionResult, error)
	CreateChannelBalance(ctx context.Context, input model.CreateChannelBalanceInput) (*model.ChannelBalances, error)
	UpdateChannelBalance(ctx context.Context, input model.UpdateChannelBalanceInput) (*model.ChannelBalances, error)
	CreateChannelCategory(ctx context.Context, input model.ChannelCategoryInput) (*model.ChannelCategories, error)
	DeleteChannelCategory(ctx context.Context, channelCategoryInput *model.ChannelCategoryInput) (*model.DeletionResult, error)
	CreateChannelCollectedAdLink(ctx context.Context, input model.ChannelCollectedAdLinkInput) (*model.ChannelCollectedAdLinks, error)
	DeleteChannelCollectedAdLink(ctx context.Context, channelCollectedAdLinkInput *model.ChannelCollectedAdLinkInput) (*model.DeletionResult, error)
	CreateChannelContentLanguage(ctx context.Context, input model.ChannelContentLanguageInput) (*model.ChannelContentLanguages, error)
	DeleteChannelContentLanguage(ctx context.Context, channelContentLanguageInput *model.ChannelContentLanguageInput) (*model.DeletionResult, error)
	CreateChannelDetail(ctx context.Context, input model.CreateChannelDetailInput) (*model.ChannelDetails, error)
	UpdateChannelDetail(ctx context.Context, input model.UpdateChannelDetailInput) (*model.ChannelDetails, error)
	CreateChannelLifeTimeBalance(ctx context.Context, input model.CreateChannelLifeTimeBalanceInput) (*model.ChannelLifeTimeBalances, error)
	UpdateChannelLifeTimeBalance(ctx context.Context, input model.UpdateChannelLifeTimeBalanceInput) (*model.ChannelLifeTimeBalances, error)
	CreateCompany(ctx context.Context, input model.CreateCompanyInput) (*model.Companies, error)
	UpdateCompany(ctx context.Context, input model.UpdateCompanyInput) (*model.Companies, error)
	CreateCompanyBanking(ctx context.Context, input model.CreateCompanyBankingInput) (*model.CompanyBankings, error)
	DeleteCompanyBanking(ctx context.Context, id string) (*model.DeletionResult, error)
	CreateCompanyLocation(ctx context.Context, input model.CreateCompanyLocationInput) (*model.CompanyLocations, error)
	DeleteCompanyLocation(ctx context.Context, companyID string, locationID string) (*model.DeletionResult, error)
	CreateCompanyMember(ctx context.Context, input model.CreateCompanyMemberInput) (*model.CompanyMembers, error)
	UpdateCompanyMember(ctx context.Context, input model.UpdateCompanyMemberInput) (*model.CompanyMembers, error)
	CreateContent(ctx context.Context, input model.CreateContentInput) (*model.Contents, error)
	UpdateContent(ctx context.Context, input model.UpdateContentInput) (*model.Contents, error)
	CreateContentLink(ctx context.Context, input model.CreateContentLinkInput) (*model.ContentLinks, error)
	UpdateContentLink(ctx context.Context, input model.UpdateContentLinkInput) (*model.ContentLinks, error)
	CreateFunding(ctx context.Context, input model.CreateFundingInput) (*model.Funding, error)
	UpdateFunding(ctx context.Context, input model.UpdateFundingInput) (*model.Funding, error)
	CreateHourlyRate(ctx context.Context, input model.CreateHourlyRateInput) (*model.HourlyRates, error)
	UpdateHourlyRate(ctx context.Context, input model.UpdateHourlyRateInput) (*model.HourlyRates, error)
	CreateLanguage(ctx context.Context, input model.CreateLanguageInput) (*model.Languages, error)
	CreateLocation(ctx context.Context, input model.CreateLocationInput) (*model.Locations, error)
	UpdateLocation(ctx context.Context, input model.UpdateLocationInput) (*model.Locations, error)
	CreateWithdrawal(ctx context.Context, input model.CreateWithdrawalInput) (*model.Withdrawals, error)
	UpdateWithdrawal(ctx context.Context, input model.UpdateWithdrawalInput) (*model.Withdrawals, error)
	CreateWithdrawalChannelLink(ctx context.Context, input model.WithdrawalChannelLinkInput) (*model.WithdrawalChannelLinks, error)
	DeleteWithdrawalChannelLink(ctx context.Context, withdrawalChannelLinkInput *model.WithdrawalChannelLinkInput) (*model.DeletionResult, error)
}
type QueryResolver interface {
	Account(ctx context.Context) (*model.Account, error)
	AccountByID(ctx context.Context, id string) (*model.Account, error)
	CpmRateByChannelID(ctx context.Context, channelID string) (*model.CpmRates, error)
	AccountBankingByID(ctx context.Context, id string) (*model.AccountBanking, error)
	GetAllAccountBankings(ctx context.Context, accountBankingsFilter model.AccountBankingsFilter) ([]*model.AccountBanking, error)
	AdPaymentByID(ctx context.Context, advertisementID string) (*model.AdPayments, error)
	GetAllAdPayments(ctx context.Context, adPaymentFilter *model.AdPaymentFilter) ([]*model.AdPayments, error)
	AdvertisementCPMByID(ctx context.Context, id string) (*model.AdvertisementCPMs, error)
	AdvertisementResultByID(ctx context.Context, id string) (*model.AdvertisementResults, error)
	AdvertisementByID(ctx context.Context, id string) (*model.Advertisements, error)
	GetAllAdvertisements(ctx context.Context, advertisementFilter *model.AdvertisementFilter) ([]*model.Advertisements, error)
	AudienceByID(ctx context.Context, id string) (*model.Audiences, error)
	BankByID(ctx context.Context, id string) (*model.Banks, error)
	GetAllBanks(ctx context.Context, bankFilter model.BankFilter) ([]*model.Banks, error)
	BudgetByID(ctx context.Context, id string) (*model.Budgets, error)
	CampaignByID(ctx context.Context, id string) (*model.Campaigns, error)
	GetAllCampaigns(ctx context.Context, campaignFilter *model.CampaignFilter) ([]*model.Campaigns, error)
	CategoryByID(ctx context.Context, id string) (*model.Categories, error)
	GetAllCategories(ctx context.Context, categoryFilter *model.CategoryFilter) ([]*model.Categories, error)
	ChannelByID(ctx context.Context, id string) (*model.Channels, error)
	GetAllChannels(ctx context.Context, channelFilter *model.ChannelFilter) ([]*model.Channels, error)
	ChannelBalanceByID(ctx context.Context, channelID string) (*model.ChannelBalances, error)
	GetAllChannelCategories(ctx context.Context, channelCategoryFilter *model.ChannelCategoryFilter) ([]*model.ChannelCategories, error)
	ChannelCollectedAdLinkByID(ctx context.Context, adPaymentID string) (*model.ChannelCollectedAdLinks, error)
	ChannelCollectedAdLink(ctx context.Context, channelCollectedAdLinkInput *model.ChannelCollectedAdLinkInput) (*model.ChannelCollectedAdLinks, error)
	GetAllChannelCollectedAdLinks(ctx context.Context, channelCollectedAdLinkFilter *model.ChannelCollectedAdLinkFilter) ([]*model.ChannelCollectedAdLinks, error)
	GetAllChannelContentLanguages(ctx context.Context, channelContentLanguageFilter *model.ChannelContentLanguageFilter) ([]*model.ChannelContentLanguages, error)
	GetAllChannelDetails(ctx context.Context, channelDetailFilter *model.ChannelDetailFilter) ([]*model.ChannelDetails, error)
	ChannelDetailByID(ctx context.Context, channelID string) (*model.ChannelDetails, error)
	ChannelLifeTimeBalanceByID(ctx context.Context, channelID string) (*model.ChannelLifeTimeBalances, error)
	CompanyByID(ctx context.Context, id string) (*model.Companies, error)
	CompanyBankingByID(ctx context.Context, id string) (*model.CompanyBankings, error)
	GetAllCompanyBankings(ctx context.Context, companyBankingsFilter model.CompanyBankingFilter) ([]*model.CompanyBankings, error)
	CompanyLocationByID(ctx context.Context, companyID string, locationID string) (*model.CompanyLocations, error)
	CompanyMemberByID(ctx context.Context, id string) (*model.CompanyMembers, error)
	GetAllCompanyMembers(ctx context.Context, companyMemberFilter *model.CompanyMemberFilter) ([]*model.CompanyMembers, error)
	ContentByID(ctx context.Context, id string) (*model.Contents, error)
	ContentLinkByID(ctx context.Context, id string) (*model.ContentLinks, error)
	FundingByID(ctx context.Context, id string) (*model.Funding, error)
	GetAllFunding(ctx context.Context, fundingFilter *model.FundingFilter) ([]*model.Funding, error)
	HourlyRateByID(ctx context.Context, id string) (*model.HourlyRates, error)
	LanguageByID(ctx context.Context, id string) (*model.Languages, error)
	GetAllLanguages(ctx context.Context, languageFilter *model.LanguageFilter) ([]*model.Languages, error)
	LocationByID(ctx context.Context, id string) (*model.Locations, error)
	WithdrawalByID(ctx context.Context, id string) (*model.Withdrawals, error)
	GetAllWithdrawals(ctx context.Context, withdrawalFilter *model.WithdrawalFilter) ([]*model.Withdrawals, error)
	WithdrawalChannelLinkByID(ctx context.Context, withdrawalID string) (*model.WithdrawalChannelLinks, error)
	WithdrawalChannelLink(ctx context.Context, withdrawalChannelLinkInput *model.WithdrawalChannelLinkInput) (*model.WithdrawalChannelLinks, error)
	GetAllWithdrawalChannelLinks(ctx context.Context, withdrawalChannelLinkFilter *model.WithdrawalChannelLinkFilter) ([]*model.WithdrawalChannelLinks, error)
}
type WithdrawalsResolver interface {
	Extra(ctx context.Context, obj *model.Withdrawals) (interface{}, error)
	Log(ctx context.Context, obj *model.Withdrawals) (interface{}, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Account.accountType":
		if e.complexity.Account.AccountType == nil {
			break
		}

		return e.complexity.Account.AccountType(childComplexity), true

	case "Account.birthDate":
		if e.complexity.Account.BirthDate == nil {
			break
		}

		return e.complexity.Account.BirthDate(childComplexity), true

	case "Account.createdAt":
		if e.complexity.Account.CreatedAt == nil {
			break
		}

		return e.complexity.Account.CreatedAt(childComplexity), true

	case "Account.email":
		if e.complexity.Account.Email == nil {
			break
		}

		return e.complexity.Account.Email(childComplexity), true

	case "Account.fullName":
		if e.complexity.Account.FullName == nil {
			break
		}

		return e.complexity.Account.FullName(childComplexity), true

	case "Account.id":
		if e.complexity.Account.ID == nil {
			break
		}

		return e.complexity.Account.ID(childComplexity), true

	case "Account.phoneNumber":
		if e.complexity.Account.PhoneNumber == nil {
			break
		}

		return e.complexity.Account.PhoneNumber(childComplexity), true

	case "Account.updatedAt":
		if e.complexity.Account.UpdatedAt == nil {
			break
		}

		return e.complexity.Account.UpdatedAt(childComplexity), true

	case "Account.userId":
		if e.complexity.Account.UserID == nil {
			break
		}

		return e.complexity.Account.UserID(childComplexity), true

	case "Account.userName":
		if e.complexity.Account.UserName == nil {
			break
		}

		return e.complexity.Account.UserName(childComplexity), true

	case "AccountBanking.accountId":
		if e.complexity.AccountBanking.AccountID == nil {
			break
		}

		return e.complexity.AccountBanking.AccountID(childComplexity), true

	case "AccountBanking.bankAccount":
		if e.complexity.AccountBanking.BankAccount == nil {
			break
		}

		return e.complexity.AccountBanking.BankAccount(childComplexity), true

	case "AccountBanking.bankId":
		if e.complexity.AccountBanking.BankID == nil {
			break
		}

		return e.complexity.AccountBanking.BankID(childComplexity), true

	case "AccountBanking.createdAt":
		if e.complexity.AccountBanking.CreatedAt == nil {
			break
		}

		return e.complexity.AccountBanking.CreatedAt(childComplexity), true

	case "AccountBanking.currency":
		if e.complexity.AccountBanking.Currency == nil {
			break
		}

		return e.complexity.AccountBanking.Currency(childComplexity), true

	case "AccountBanking.deletedAt":
		if e.complexity.AccountBanking.DeletedAt == nil {
			break
		}

		return e.complexity.AccountBanking.DeletedAt(childComplexity), true

	case "AccountBanking.fullNameOnBank":
		if e.complexity.AccountBanking.FullNameOnBank == nil {
			break
		}

		return e.complexity.AccountBanking.FullNameOnBank(childComplexity), true

	case "AccountBanking.id":
		if e.complexity.AccountBanking.ID == nil {
			break
		}

		return e.complexity.AccountBanking.ID(childComplexity), true

	case "AccountBanking.updatedAt":
		if e.complexity.AccountBanking.UpdatedAt == nil {
			break
		}

		return e.complexity.AccountBanking.UpdatedAt(childComplexity), true

	case "AdPayments.accountId":
		if e.complexity.AdPayments.AccountID == nil {
			break
		}

		return e.complexity.AdPayments.AccountID(childComplexity), true

	case "AdPayments.advertisementId":
		if e.complexity.AdPayments.AdvertisementID == nil {
			break
		}

		return e.complexity.AdPayments.AdvertisementID(childComplexity), true

	case "AdPayments.amount":
		if e.complexity.AdPayments.Amount == nil {
			break
		}

		return e.complexity.AdPayments.Amount(childComplexity), true

	case "AdPayments.campaignId":
		if e.complexity.AdPayments.CampaignID == nil {
			break
		}

		return e.complexity.AdPayments.CampaignID(childComplexity), true

	case "AdPayments.channelId":
		if e.complexity.AdPayments.ChannelID == nil {
			break
		}

		return e.complexity.AdPayments.ChannelID(childComplexity), true

	case "AdPayments.completionTime":
		if e.complexity.AdPayments.CompletionTime == nil {
			break
		}

		return e.complexity.AdPayments.CompletionTime(childComplexity), true

	case "AdPayments.createdAt":
		if e.complexity.AdPayments.CreatedAt == nil {
			break
		}

		return e.complexity.AdPayments.CreatedAt(childComplexity), true

	case "AdPayments.currency":
		if e.complexity.AdPayments.Currency == nil {
			break
		}

		return e.complexity.AdPayments.Currency(childComplexity), true

	case "AdPayments.deletedAt":
		if e.complexity.AdPayments.DeletedAt == nil {
			break
		}

		return e.complexity.AdPayments.DeletedAt(childComplexity), true

	case "AdPayments.id":
		if e.complexity.AdPayments.ID == nil {
			break
		}

		return e.complexity.AdPayments.ID(childComplexity), true

	case "AdPayments.updatedAt":
		if e.complexity.AdPayments.UpdatedAt == nil {
			break
		}

		return e.complexity.AdPayments.UpdatedAt(childComplexity), true

	case "AdvertisementCPMs.advertisementId":
		if e.complexity.AdvertisementCPMs.AdvertisementID == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.AdvertisementID(childComplexity), true

	case "AdvertisementCPMs.channelShare":
		if e.complexity.AdvertisementCPMs.ChannelShare == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.ChannelShare(childComplexity), true

	case "AdvertisementCPMs.maxLifeCycle":
		if e.complexity.AdvertisementCPMs.MaxLifeCycle == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.MaxLifeCycle(childComplexity), true

	case "AdvertisementCPMs.providerShare":
		if e.complexity.AdvertisementCPMs.ProviderShare == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.ProviderShare(childComplexity), true

	case "AdvertisementCPMs.Rate":
		if e.complexity.AdvertisementCPMs.Rate == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.Rate(childComplexity), true

	case "AdvertisementCPMs.requiredViews":
		if e.complexity.AdvertisementCPMs.RequiredViews == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.RequiredViews(childComplexity), true

	case "AdvertisementCPMs.totalBudget":
		if e.complexity.AdvertisementCPMs.TotalBudget == nil {
			break
		}

		return e.complexity.AdvertisementCPMs.TotalBudget(childComplexity), true

	case "AdvertisementResults.advertisementId":
		if e.complexity.AdvertisementResults.AdvertisementID == nil {
			break
		}

		return e.complexity.AdvertisementResults.AdvertisementID(childComplexity), true

	case "AdvertisementResults.budget":
		if e.complexity.AdvertisementResults.Budget == nil {
			break
		}

		return e.complexity.AdvertisementResults.Budget(childComplexity), true

	case "AdvertisementResults.channelBudgetShare":
		if e.complexity.AdvertisementResults.ChannelBudgetShare == nil {
			break
		}

		return e.complexity.AdvertisementResults.ChannelBudgetShare(childComplexity), true

	case "AdvertisementResults.providerBudgetShare":
		if e.complexity.AdvertisementResults.ProviderBudgetShare == nil {
			break
		}

		return e.complexity.AdvertisementResults.ProviderBudgetShare(childComplexity), true

	case "AdvertisementResults.startedAt":
		if e.complexity.AdvertisementResults.StartedAt == nil {
			break
		}

		return e.complexity.AdvertisementResults.StartedAt(childComplexity), true

	case "AdvertisementResults.totalClick":
		if e.complexity.AdvertisementResults.TotalClick == nil {
			break
		}

		return e.complexity.AdvertisementResults.TotalClick(childComplexity), true

	case "AdvertisementResults.totalForward":
		if e.complexity.AdvertisementResults.TotalForward == nil {
			break
		}

		return e.complexity.AdvertisementResults.TotalForward(childComplexity), true

	case "AdvertisementResults.totalHour":
		if e.complexity.AdvertisementResults.TotalHour == nil {
			break
		}

		return e.complexity.AdvertisementResults.TotalHour(childComplexity), true

	case "AdvertisementResults.totalReaction":
		if e.complexity.AdvertisementResults.TotalReaction == nil {
			break
		}

		return e.complexity.AdvertisementResults.TotalReaction(childComplexity), true

	case "AdvertisementResults.totalViews":
		if e.complexity.AdvertisementResults.TotalViews == nil {
			break
		}

		return e.complexity.AdvertisementResults.TotalViews(childComplexity), true

	case "Advertisements.campaignId":
		if e.complexity.Advertisements.CampaignID == nil {
			break
		}

		return e.complexity.Advertisements.CampaignID(childComplexity), true

	case "Advertisements.channelId":
		if e.complexity.Advertisements.ChannelID == nil {
			break
		}

		return e.complexity.Advertisements.ChannelID(childComplexity), true

	case "Advertisements.contentId":
		if e.complexity.Advertisements.ContentID == nil {
			break
		}

		return e.complexity.Advertisements.ContentID(childComplexity), true

	case "Advertisements.createdAt":
		if e.complexity.Advertisements.CreatedAt == nil {
			break
		}

		return e.complexity.Advertisements.CreatedAt(childComplexity), true

	case "Advertisements.deletedAt":
		if e.complexity.Advertisements.DeletedAt == nil {
			break
		}

		return e.complexity.Advertisements.DeletedAt(childComplexity), true

	case "Advertisements.id":
		if e.complexity.Advertisements.ID == nil {
			break
		}

		return e.complexity.Advertisements.ID(childComplexity), true

	case "Advertisements.messageId":
		if e.complexity.Advertisements.MessageID == nil {
			break
		}

		return e.complexity.Advertisements.MessageID(childComplexity), true

	case "Advertisements.status":
		if e.complexity.Advertisements.Status == nil {
			break
		}

		return e.complexity.Advertisements.Status(childComplexity), true

	case "Advertisements.updatedAt":
		if e.complexity.Advertisements.UpdatedAt == nil {
			break
		}

		return e.complexity.Advertisements.UpdatedAt(childComplexity), true

	case "Audiences.campaignId":
		if e.complexity.Audiences.CampaignID == nil {
			break
		}

		return e.complexity.Audiences.CampaignID(childComplexity), true

	case "Audiences.category":
		if e.complexity.Audiences.Category == nil {
			break
		}

		return e.complexity.Audiences.Category(childComplexity), true

	case "Audiences.language":
		if e.complexity.Audiences.Language == nil {
			break
		}

		return e.complexity.Audiences.Language(childComplexity), true

	case "Banks.bankCode":
		if e.complexity.Banks.BankCode == nil {
			break
		}

		return e.complexity.Banks.BankCode(childComplexity), true

	case "Banks.bankName":
		if e.complexity.Banks.BankName == nil {
			break
		}

		return e.complexity.Banks.BankName(childComplexity), true

	case "Banks.createdAt":
		if e.complexity.Banks.CreatedAt == nil {
			break
		}

		return e.complexity.Banks.CreatedAt(childComplexity), true

	case "Banks.deletedAt":
		if e.complexity.Banks.DeletedAt == nil {
			break
		}

		return e.complexity.Banks.DeletedAt(childComplexity), true

	case "Banks.id":
		if e.complexity.Banks.ID == nil {
			break
		}

		return e.complexity.Banks.ID(childComplexity), true

	case "Banks.updatedAt":
		if e.complexity.Banks.UpdatedAt == nil {
			break
		}

		return e.complexity.Banks.UpdatedAt(childComplexity), true

	case "Budgets.campaignId":
		if e.complexity.Budgets.CampaignID == nil {
			break
		}

		return e.complexity.Budgets.CampaignID(childComplexity), true

	case "Budgets.currency":
		if e.complexity.Budgets.Currency == nil {
			break
		}

		return e.complexity.Budgets.Currency(childComplexity), true

	case "Budgets.initialAmount":
		if e.complexity.Budgets.InitialAmount == nil {
			break
		}

		return e.complexity.Budgets.InitialAmount(childComplexity), true

	case "Budgets.refundedAmount":
		if e.complexity.Budgets.RefundedAmount == nil {
			break
		}

		return e.complexity.Budgets.RefundedAmount(childComplexity), true

	case "Budgets.usedAmount":
		if e.complexity.Budgets.UsedAmount == nil {
			break
		}

		return e.complexity.Budgets.UsedAmount(childComplexity), true

	case "Campaigns.companyId":
		if e.complexity.Campaigns.CompanyID == nil {
			break
		}

		return e.complexity.Campaigns.CompanyID(childComplexity), true

	case "Campaigns.createdAt":
		if e.complexity.Campaigns.CreatedAt == nil {
			break
		}

		return e.complexity.Campaigns.CreatedAt(childComplexity), true

	case "Campaigns.deletedAt":
		if e.complexity.Campaigns.DeletedAt == nil {
			break
		}

		return e.complexity.Campaigns.DeletedAt(childComplexity), true

	case "Campaigns.id":
		if e.complexity.Campaigns.ID == nil {
			break
		}

		return e.complexity.Campaigns.ID(childComplexity), true

	case "Campaigns.name":
		if e.complexity.Campaigns.Name == nil {
			break
		}

		return e.complexity.Campaigns.Name(childComplexity), true

	case "Campaigns.objective":
		if e.complexity.Campaigns.Objective == nil {
			break
		}

		return e.complexity.Campaigns.Objective(childComplexity), true

	case "Campaigns.startDate":
		if e.complexity.Campaigns.StartDate == nil {
			break
		}

		return e.complexity.Campaigns.StartDate(childComplexity), true

	case "Campaigns.updatedAt":
		if e.complexity.Campaigns.UpdatedAt == nil {
			break
		}

		return e.complexity.Campaigns.UpdatedAt(childComplexity), true

	case "Categories.category":
		if e.complexity.Categories.Category == nil {
			break
		}

		return e.complexity.Categories.Category(childComplexity), true

	case "ChannelBalances.accountId":
		if e.complexity.ChannelBalances.AccountID == nil {
			break
		}

		return e.complexity.ChannelBalances.AccountID(childComplexity), true

	case "ChannelBalances.amount":
		if e.complexity.ChannelBalances.Amount == nil {
			break
		}

		return e.complexity.ChannelBalances.Amount(childComplexity), true

	case "ChannelBalances.channelId":
		if e.complexity.ChannelBalances.ChannelID == nil {
			break
		}

		return e.complexity.ChannelBalances.ChannelID(childComplexity), true

	case "ChannelBalances.createdAt":
		if e.complexity.ChannelBalances.CreatedAt == nil {
			break
		}

		return e.complexity.ChannelBalances.CreatedAt(childComplexity), true

	case "ChannelBalances.currency":
		if e.complexity.ChannelBalances.Currency == nil {
			break
		}

		return e.complexity.ChannelBalances.Currency(childComplexity), true

	case "ChannelBalances.deletedAt":
		if e.complexity.ChannelBalances.DeletedAt == nil {
			break
		}

		return e.complexity.ChannelBalances.DeletedAt(childComplexity), true

	case "ChannelBalances.id":
		if e.complexity.ChannelBalances.ID == nil {
			break
		}

		return e.complexity.ChannelBalances.ID(childComplexity), true

	case "ChannelBalances.updatedAt":
		if e.complexity.ChannelBalances.UpdatedAt == nil {
			break
		}

		return e.complexity.ChannelBalances.UpdatedAt(childComplexity), true

	case "ChannelCategories.category":
		if e.complexity.ChannelCategories.Category == nil {
			break
		}

		return e.complexity.ChannelCategories.Category(childComplexity), true

	case "ChannelCategories.channelId":
		if e.complexity.ChannelCategories.ChannelID == nil {
			break
		}

		return e.complexity.ChannelCategories.ChannelID(childComplexity), true

	case "ChannelCategories.id":
		if e.complexity.ChannelCategories.ID == nil {
			break
		}

		return e.complexity.ChannelCategories.ID(childComplexity), true

	case "ChannelCollectedAdLinks.adPaymentId":
		if e.complexity.ChannelCollectedAdLinks.AdPaymentID == nil {
			break
		}

		return e.complexity.ChannelCollectedAdLinks.AdPaymentID(childComplexity), true

	case "ChannelCollectedAdLinks.channelBalanceId":
		if e.complexity.ChannelCollectedAdLinks.ChannelBalanceID == nil {
			break
		}

		return e.complexity.ChannelCollectedAdLinks.ChannelBalanceID(childComplexity), true

	case "ChannelContentLanguages.channelId":
		if e.complexity.ChannelContentLanguages.ChannelID == nil {
			break
		}

		return e.complexity.ChannelContentLanguages.ChannelID(childComplexity), true

	case "ChannelContentLanguages.id":
		if e.complexity.ChannelContentLanguages.ID == nil {
			break
		}

		return e.complexity.ChannelContentLanguages.ID(childComplexity), true

	case "ChannelContentLanguages.language":
		if e.complexity.ChannelContentLanguages.Language == nil {
			break
		}

		return e.complexity.ChannelContentLanguages.Language(childComplexity), true

	case "ChannelDetails.averagePostView":
		if e.complexity.ChannelDetails.AveragePostView == nil {
			break
		}

		return e.complexity.ChannelDetails.AveragePostView(childComplexity), true

	case "ChannelDetails.channelId":
		if e.complexity.ChannelDetails.ChannelID == nil {
			break
		}

		return e.complexity.ChannelDetails.ChannelID(childComplexity), true

	case "ChannelDetails.collectedDate":
		if e.complexity.ChannelDetails.CollectedDate == nil {
			break
		}

		return e.complexity.ChannelDetails.CollectedDate(childComplexity), true

	case "ChannelDetails.createdAt":
		if e.complexity.ChannelDetails.CreatedAt == nil {
			break
		}

		return e.complexity.ChannelDetails.CreatedAt(childComplexity), true

	case "ChannelDetails.deletedAt":
		if e.complexity.ChannelDetails.DeletedAt == nil {
			break
		}

		return e.complexity.ChannelDetails.DeletedAt(childComplexity), true

	case "ChannelDetails.lastPost":
		if e.complexity.ChannelDetails.LastPost == nil {
			break
		}

		return e.complexity.ChannelDetails.LastPost(childComplexity), true

	case "ChannelDetails.lastPostId":
		if e.complexity.ChannelDetails.LastPostID == nil {
			break
		}

		return e.complexity.ChannelDetails.LastPostID(childComplexity), true

	case "ChannelDetails.PostFrequency":
		if e.complexity.ChannelDetails.PostFrequency == nil {
			break
		}

		return e.complexity.ChannelDetails.PostFrequency(childComplexity), true

	case "ChannelDetails.postToSubRatio":
		if e.complexity.ChannelDetails.PostToSubRatio == nil {
			break
		}

		return e.complexity.ChannelDetails.PostToSubRatio(childComplexity), true

	case "ChannelDetails.subCount":
		if e.complexity.ChannelDetails.SubCount == nil {
			break
		}

		return e.complexity.ChannelDetails.SubCount(childComplexity), true

	case "ChannelDetails.updatedAt":
		if e.complexity.ChannelDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.ChannelDetails.UpdatedAt(childComplexity), true

	case "ChannelLifeTimeBalances.accountId":
		if e.complexity.ChannelLifeTimeBalances.AccountID == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.AccountID(childComplexity), true

	case "ChannelLifeTimeBalances.channelId":
		if e.complexity.ChannelLifeTimeBalances.ChannelID == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.ChannelID(childComplexity), true

	case "ChannelLifeTimeBalances.createdAt":
		if e.complexity.ChannelLifeTimeBalances.CreatedAt == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.CreatedAt(childComplexity), true

	case "ChannelLifeTimeBalances.currency":
		if e.complexity.ChannelLifeTimeBalances.Currency == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.Currency(childComplexity), true

	case "ChannelLifeTimeBalances.deletedAt":
		if e.complexity.ChannelLifeTimeBalances.DeletedAt == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.DeletedAt(childComplexity), true

	case "ChannelLifeTimeBalances.id":
		if e.complexity.ChannelLifeTimeBalances.ID == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.ID(childComplexity), true

	case "ChannelLifeTimeBalances.totalAd":
		if e.complexity.ChannelLifeTimeBalances.TotalAd == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.TotalAd(childComplexity), true

	case "ChannelLifeTimeBalances.totalAmount":
		if e.complexity.ChannelLifeTimeBalances.TotalAmount == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.TotalAmount(childComplexity), true

	case "ChannelLifeTimeBalances.totalHour":
		if e.complexity.ChannelLifeTimeBalances.TotalHour == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.TotalHour(childComplexity), true

	case "ChannelLifeTimeBalances.updatedAt":
		if e.complexity.ChannelLifeTimeBalances.UpdatedAt == nil {
			break
		}

		return e.complexity.ChannelLifeTimeBalances.UpdatedAt(childComplexity), true

	case "Channels.botAddAsAdmin":
		if e.complexity.Channels.BotAddAsAdmin == nil {
			break
		}

		return e.complexity.Channels.BotAddAsAdmin(childComplexity), true

	case "Channels.categories":
		if e.complexity.Channels.Categories == nil {
			break
		}

		args, err := ec.field_Channels_categories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Channels.Categories(childComplexity, args["filter"].(*model.FilterInput)), true

	case "Channels.channelCreatedAt":
		if e.complexity.Channels.ChannelCreatedAt == nil {
			break
		}

		return e.complexity.Channels.ChannelCreatedAt(childComplexity), true

	case "Channels.channelDetails":
		if e.complexity.Channels.ChannelDetails == nil {
			break
		}

		return e.complexity.Channels.ChannelDetails(childComplexity), true

	case "Channels.country":
		if e.complexity.Channels.Country == nil {
			break
		}

		return e.complexity.Channels.Country(childComplexity), true

	case "Channels.cpmRating":
		if e.complexity.Channels.CpmRating == nil {
			break
		}

		return e.complexity.Channels.CpmRating(childComplexity), true

	case "Channels.createdAt":
		if e.complexity.Channels.CreatedAt == nil {
			break
		}

		return e.complexity.Channels.CreatedAt(childComplexity), true

	case "Channels.currency":
		if e.complexity.Channels.Currency == nil {
			break
		}

		return e.complexity.Channels.Currency(childComplexity), true

	case "Channels.deletedAt":
		if e.complexity.Channels.DeletedAt == nil {
			break
		}

		return e.complexity.Channels.DeletedAt(childComplexity), true

	case "Channels.description":
		if e.complexity.Channels.Description == nil {
			break
		}

		return e.complexity.Channels.Description(childComplexity), true

	case "Channels.id":
		if e.complexity.Channels.ID == nil {
			break
		}

		return e.complexity.Channels.ID(childComplexity), true

	case "Channels.languages":
		if e.complexity.Channels.Languages == nil {
			break
		}

		args, err := ec.field_Channels_languages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Channels.Languages(childComplexity, args["filter"].(*model.FilterInput)), true

	case "Channels.name":
		if e.complexity.Channels.Name == nil {
			break
		}

		return e.complexity.Channels.Name(childComplexity), true

	case "Channels.ownerId":
		if e.complexity.Channels.OwnerID == nil {
			break
		}

		return e.complexity.Channels.OwnerID(childComplexity), true

	case "Channels.updatedAt":
		if e.complexity.Channels.UpdatedAt == nil {
			break
		}

		return e.complexity.Channels.UpdatedAt(childComplexity), true

	case "Channels.userName":
		if e.complexity.Channels.UserName == nil {
			break
		}

		return e.complexity.Channels.UserName(childComplexity), true

	case "Companies.createdAt":
		if e.complexity.Companies.CreatedAt == nil {
			break
		}

		return e.complexity.Companies.CreatedAt(childComplexity), true

	case "Companies.creatorId":
		if e.complexity.Companies.CreatorID == nil {
			break
		}

		return e.complexity.Companies.CreatorID(childComplexity), true

	case "Companies.id":
		if e.complexity.Companies.ID == nil {
			break
		}

		return e.complexity.Companies.ID(childComplexity), true

	case "Companies.name":
		if e.complexity.Companies.Name == nil {
			break
		}

		return e.complexity.Companies.Name(childComplexity), true

	case "Companies.tinNumber":
		if e.complexity.Companies.TinNumber == nil {
			break
		}

		return e.complexity.Companies.TinNumber(childComplexity), true

	case "Companies.uniqueName":
		if e.complexity.Companies.UniqueName == nil {
			break
		}

		return e.complexity.Companies.UniqueName(childComplexity), true

	case "Companies.updatedAt":
		if e.complexity.Companies.UpdatedAt == nil {
			break
		}

		return e.complexity.Companies.UpdatedAt(childComplexity), true

	case "Companies.vatNumber":
		if e.complexity.Companies.VatNumber == nil {
			break
		}

		return e.complexity.Companies.VatNumber(childComplexity), true

	case "CompanyBankings.bankAccount":
		if e.complexity.CompanyBankings.BankAccount == nil {
			break
		}

		return e.complexity.CompanyBankings.BankAccount(childComplexity), true

	case "CompanyBankings.bankId":
		if e.complexity.CompanyBankings.BankID == nil {
			break
		}

		return e.complexity.CompanyBankings.BankID(childComplexity), true

	case "CompanyBankings.companyId":
		if e.complexity.CompanyBankings.CompanyID == nil {
			break
		}

		return e.complexity.CompanyBankings.CompanyID(childComplexity), true

	case "CompanyBankings.createdAt":
		if e.complexity.CompanyBankings.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyBankings.CreatedAt(childComplexity), true

	case "CompanyBankings.currency":
		if e.complexity.CompanyBankings.Currency == nil {
			break
		}

		return e.complexity.CompanyBankings.Currency(childComplexity), true

	case "CompanyBankings.deletedAt":
		if e.complexity.CompanyBankings.DeletedAt == nil {
			break
		}

		return e.complexity.CompanyBankings.DeletedAt(childComplexity), true

	case "CompanyBankings.fullNameOnBank":
		if e.complexity.CompanyBankings.FullNameOnBank == nil {
			break
		}

		return e.complexity.CompanyBankings.FullNameOnBank(childComplexity), true

	case "CompanyBankings.id":
		if e.complexity.CompanyBankings.ID == nil {
			break
		}

		return e.complexity.CompanyBankings.ID(childComplexity), true

	case "CompanyBankings.updatedAt":
		if e.complexity.CompanyBankings.UpdatedAt == nil {
			break
		}

		return e.complexity.CompanyBankings.UpdatedAt(childComplexity), true

	case "CompanyLocations.companyId":
		if e.complexity.CompanyLocations.CompanyID == nil {
			break
		}

		return e.complexity.CompanyLocations.CompanyID(childComplexity), true

	case "CompanyLocations.locationId":
		if e.complexity.CompanyLocations.LocationID == nil {
			break
		}

		return e.complexity.CompanyLocations.LocationID(childComplexity), true

	case "CompanyMembers.accountId":
		if e.complexity.CompanyMembers.AccountID == nil {
			break
		}

		return e.complexity.CompanyMembers.AccountID(childComplexity), true

	case "CompanyMembers.companyId":
		if e.complexity.CompanyMembers.CompanyID == nil {
			break
		}

		return e.complexity.CompanyMembers.CompanyID(childComplexity), true

	case "CompanyMembers.createdAt":
		if e.complexity.CompanyMembers.CreatedAt == nil {
			break
		}

		return e.complexity.CompanyMembers.CreatedAt(childComplexity), true

	case "CompanyMembers.id":
		if e.complexity.CompanyMembers.ID == nil {
			break
		}

		return e.complexity.CompanyMembers.ID(childComplexity), true

	case "CompanyMembers.role":
		if e.complexity.CompanyMembers.Role == nil {
			break
		}

		return e.complexity.CompanyMembers.Role(childComplexity), true

	case "CompanyMembers.updatedAt":
		if e.complexity.CompanyMembers.UpdatedAt == nil {
			break
		}

		return e.complexity.CompanyMembers.UpdatedAt(childComplexity), true

	case "ContentLinks.contentId":
		if e.complexity.ContentLinks.ContentID == nil {
			break
		}

		return e.complexity.ContentLinks.ContentID(childComplexity), true

	case "ContentLinks.link":
		if e.complexity.ContentLinks.Link == nil {
			break
		}

		return e.complexity.ContentLinks.Link(childComplexity), true

	case "ContentLinks.title":
		if e.complexity.ContentLinks.Title == nil {
			break
		}

		return e.complexity.ContentLinks.Title(childComplexity), true

	case "Contents.campaignId":
		if e.complexity.Contents.CampaignID == nil {
			break
		}

		return e.complexity.Contents.CampaignID(childComplexity), true

	case "Contents.contentType":
		if e.complexity.Contents.ContentType == nil {
			break
		}

		return e.complexity.Contents.ContentType(childComplexity), true

	case "Contents.createdAt":
		if e.complexity.Contents.CreatedAt == nil {
			break
		}

		return e.complexity.Contents.CreatedAt(childComplexity), true

	case "Contents.deletedAt":
		if e.complexity.Contents.DeletedAt == nil {
			break
		}

		return e.complexity.Contents.DeletedAt(childComplexity), true

	case "Contents.description":
		if e.complexity.Contents.Description == nil {
			break
		}

		return e.complexity.Contents.Description(childComplexity), true

	case "Contents.id":
		if e.complexity.Contents.ID == nil {
			break
		}

		return e.complexity.Contents.ID(childComplexity), true

	case "Contents.updatedAt":
		if e.complexity.Contents.UpdatedAt == nil {
			break
		}

		return e.complexity.Contents.UpdatedAt(childComplexity), true

	case "DeletionResult.message":
		if e.complexity.DeletionResult.Message == nil {
			break
		}

		return e.complexity.DeletionResult.Message(childComplexity), true

	case "DeletionResult.success":
		if e.complexity.DeletionResult.Success == nil {
			break
		}

		return e.complexity.DeletionResult.Success(childComplexity), true

	case "Funding.amount":
		if e.complexity.Funding.Amount == nil {
			break
		}

		return e.complexity.Funding.Amount(childComplexity), true

	case "Funding.companyId":
		if e.complexity.Funding.CompanyID == nil {
			break
		}

		return e.complexity.Funding.CompanyID(childComplexity), true

	case "Funding.createdAt":
		if e.complexity.Funding.CreatedAt == nil {
			break
		}

		return e.complexity.Funding.CreatedAt(childComplexity), true

	case "Funding.currency":
		if e.complexity.Funding.Currency == nil {
			break
		}

		return e.complexity.Funding.Currency(childComplexity), true

	case "Funding.deletedAt":
		if e.complexity.Funding.DeletedAt == nil {
			break
		}

		return e.complexity.Funding.DeletedAt(childComplexity), true

	case "Funding.extra":
		if e.complexity.Funding.Extra == nil {
			break
		}

		return e.complexity.Funding.Extra(childComplexity), true

	case "Funding.fundingTxRef":
		if e.complexity.Funding.FundingTxRef == nil {
			break
		}

		return e.complexity.Funding.FundingTxRef(childComplexity), true

	case "Funding.id":
		if e.complexity.Funding.ID == nil {
			break
		}

		return e.complexity.Funding.ID(childComplexity), true

	case "Funding.key":
		if e.complexity.Funding.Key == nil {
			break
		}

		return e.complexity.Funding.Key(childComplexity), true

	case "Funding.log":
		if e.complexity.Funding.Log == nil {
			break
		}

		return e.complexity.Funding.Log(childComplexity), true

	case "Funding.method":
		if e.complexity.Funding.Method == nil {
			break
		}

		return e.complexity.Funding.Method(childComplexity), true

	case "Funding.paymentDate":
		if e.complexity.Funding.PaymentDate == nil {
			break
		}

		return e.complexity.Funding.PaymentDate(childComplexity), true

	case "Funding.redirectUrl":
		if e.complexity.Funding.RedirectURL == nil {
			break
		}

		return e.complexity.Funding.RedirectURL(childComplexity), true

	case "Funding.reference":
		if e.complexity.Funding.Reference == nil {
			break
		}

		return e.complexity.Funding.Reference(childComplexity), true

	case "Funding.status":
		if e.complexity.Funding.Status == nil {
			break
		}

		return e.complexity.Funding.Status(childComplexity), true

	case "Funding.tax":
		if e.complexity.Funding.Tax == nil {
			break
		}

		return e.complexity.Funding.Tax(childComplexity), true

	case "Funding.updatedAt":
		if e.complexity.Funding.UpdatedAt == nil {
			break
		}

		return e.complexity.Funding.UpdatedAt(childComplexity), true

	case "HourlyRates.active":
		if e.complexity.HourlyRates.Active == nil {
			break
		}

		return e.complexity.HourlyRates.Active(childComplexity), true

	case "HourlyRates.channelId":
		if e.complexity.HourlyRates.ChannelID == nil {
			break
		}

		return e.complexity.HourlyRates.ChannelID(childComplexity), true

	case "HourlyRates.createdAt":
		if e.complexity.HourlyRates.CreatedAt == nil {
			break
		}

		return e.complexity.HourlyRates.CreatedAt(childComplexity), true

	case "HourlyRates.hourlyRate":
		if e.complexity.HourlyRates.HourlyRate == nil {
			break
		}

		return e.complexity.HourlyRates.HourlyRate(childComplexity), true

	case "HourlyRates.id":
		if e.complexity.HourlyRates.ID == nil {
			break
		}

		return e.complexity.HourlyRates.ID(childComplexity), true

	case "HourlyRates.maxHourlyVolume":
		if e.complexity.HourlyRates.MaxHourlyVolume == nil {
			break
		}

		return e.complexity.HourlyRates.MaxHourlyVolume(childComplexity), true

	case "HourlyRates.minHourlyVolume":
		if e.complexity.HourlyRates.MinHourlyVolume == nil {
			break
		}

		return e.complexity.HourlyRates.MinHourlyVolume(childComplexity), true

	case "HourlyRates.removeAt":
		if e.complexity.HourlyRates.RemoveAt == nil {
			break
		}

		return e.complexity.HourlyRates.RemoveAt(childComplexity), true

	case "Languages.language":
		if e.complexity.Languages.Language == nil {
			break
		}

		return e.complexity.Languages.Language(childComplexity), true

	case "Locations.address":
		if e.complexity.Locations.Address == nil {
			break
		}

		return e.complexity.Locations.Address(childComplexity), true

	case "Locations.city":
		if e.complexity.Locations.City == nil {
			break
		}

		return e.complexity.Locations.City(childComplexity), true

	case "Locations.country":
		if e.complexity.Locations.Country == nil {
			break
		}

		return e.complexity.Locations.Country(childComplexity), true

	case "Locations.createdAt":
		if e.complexity.Locations.CreatedAt == nil {
			break
		}

		return e.complexity.Locations.CreatedAt(childComplexity), true

	case "Locations.deletedAt":
		if e.complexity.Locations.DeletedAt == nil {
			break
		}

		return e.complexity.Locations.DeletedAt(childComplexity), true

	case "Locations.id":
		if e.complexity.Locations.ID == nil {
			break
		}

		return e.complexity.Locations.ID(childComplexity), true

	case "Locations.postalCode":
		if e.complexity.Locations.PostalCode == nil {
			break
		}

		return e.complexity.Locations.PostalCode(childComplexity), true

	case "Locations.state":
		if e.complexity.Locations.State == nil {
			break
		}

		return e.complexity.Locations.State(childComplexity), true

	case "Locations.updatedAt":
		if e.complexity.Locations.UpdatedAt == nil {
			break
		}

		return e.complexity.Locations.UpdatedAt(childComplexity), true

	case "Mutation.createAccount":
		if e.complexity.Mutation.CreateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_createAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccount(childComplexity, args["input"].(model.CreateAccountInput)), true

	case "Mutation.createAccountBanking":
		if e.complexity.Mutation.CreateAccountBanking == nil {
			break
		}

		args, err := ec.field_Mutation_createAccountBanking_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAccountBanking(childComplexity, args["input"].(model.CreateAccountBankingInput)), true

	case "Mutation.createAdPayment":
		if e.complexity.Mutation.CreateAdPayment == nil {
			break
		}

		args, err := ec.field_Mutation_createAdPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdPayment(childComplexity, args["input"].(model.CreateAdPaymentInput)), true

	case "Mutation.createAdvertisement":
		if e.complexity.Mutation.CreateAdvertisement == nil {
			break
		}

		args, err := ec.field_Mutation_createAdvertisement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdvertisement(childComplexity, args["input"].(model.CreateAdvertisementInput)), true

	case "Mutation.createAdvertisementCPM":
		if e.complexity.Mutation.CreateAdvertisementCpm == nil {
			break
		}

		args, err := ec.field_Mutation_createAdvertisementCPM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdvertisementCpm(childComplexity, args["input"].(model.CreateAdvertisementCPMInput)), true

	case "Mutation.createAdvertisementResult":
		if e.complexity.Mutation.CreateAdvertisementResult == nil {
			break
		}

		args, err := ec.field_Mutation_createAdvertisementResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdvertisementResult(childComplexity, args["input"].(model.CreateAdvertisementResultInput)), true

	case "Mutation.createAudience":
		if e.complexity.Mutation.CreateAudience == nil {
			break
		}

		args, err := ec.field_Mutation_createAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAudience(childComplexity, args["input"].(model.CreateAudienceInput)), true

	case "Mutation.createBank":
		if e.complexity.Mutation.CreateBank == nil {
			break
		}

		args, err := ec.field_Mutation_createBank_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBank(childComplexity, args["input"].(model.CreateBankInput)), true

	case "Mutation.createBudget":
		if e.complexity.Mutation.CreateBudget == nil {
			break
		}

		args, err := ec.field_Mutation_createBudget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBudget(childComplexity, args["input"].(model.CreateBudgetInput)), true

	case "Mutation.createCPMRate":
		if e.complexity.Mutation.CreateCPMRate == nil {
			break
		}

		args, err := ec.field_Mutation_createCPMRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCPMRate(childComplexity, args["input"].(model.CreateCPMRateInput)), true

	case "Mutation.createCampaign":
		if e.complexity.Mutation.CreateCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_createCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCampaign(childComplexity, args["input"].(model.CreateCampaignInput)), true

	case "Mutation.createCategory":
		if e.complexity.Mutation.CreateCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCategory(childComplexity, args["input"].(model.CreateCategoryInput)), true

	case "Mutation.createChannel":
		if e.complexity.Mutation.CreateChannel == nil {
			break
		}

		args, err := ec.field_Mutation_createChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannel(childComplexity, args["input"].(model.CreateChannelInput)), true

	case "Mutation.createChannelBalance":
		if e.complexity.Mutation.CreateChannelBalance == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelBalance(childComplexity, args["input"].(model.CreateChannelBalanceInput)), true

	case "Mutation.createChannelCategory":
		if e.complexity.Mutation.CreateChannelCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelCategory(childComplexity, args["input"].(model.ChannelCategoryInput)), true

	case "Mutation.createChannelCollectedAdLink":
		if e.complexity.Mutation.CreateChannelCollectedAdLink == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelCollectedAdLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelCollectedAdLink(childComplexity, args["input"].(model.ChannelCollectedAdLinkInput)), true

	case "Mutation.createChannelContentLanguage":
		if e.complexity.Mutation.CreateChannelContentLanguage == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelContentLanguage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelContentLanguage(childComplexity, args["input"].(model.ChannelContentLanguageInput)), true

	case "Mutation.createChannelDetail":
		if e.complexity.Mutation.CreateChannelDetail == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelDetail(childComplexity, args["input"].(model.CreateChannelDetailInput)), true

	case "Mutation.createChannelLifeTimeBalance":
		if e.complexity.Mutation.CreateChannelLifeTimeBalance == nil {
			break
		}

		args, err := ec.field_Mutation_createChannelLifeTimeBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChannelLifeTimeBalance(childComplexity, args["input"].(model.CreateChannelLifeTimeBalanceInput)), true

	case "Mutation.createCompany":
		if e.complexity.Mutation.CreateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_createCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompany(childComplexity, args["input"].(model.CreateCompanyInput)), true

	case "Mutation.createCompanyBanking":
		if e.complexity.Mutation.CreateCompanyBanking == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanyBanking_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanyBanking(childComplexity, args["input"].(model.CreateCompanyBankingInput)), true

	case "Mutation.createCompanyLocation":
		if e.complexity.Mutation.CreateCompanyLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanyLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanyLocation(childComplexity, args["input"].(model.CreateCompanyLocationInput)), true

	case "Mutation.createCompanyMember":
		if e.complexity.Mutation.CreateCompanyMember == nil {
			break
		}

		args, err := ec.field_Mutation_createCompanyMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCompanyMember(childComplexity, args["input"].(model.CreateCompanyMemberInput)), true

	case "Mutation.createContent":
		if e.complexity.Mutation.CreateContent == nil {
			break
		}

		args, err := ec.field_Mutation_createContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContent(childComplexity, args["input"].(model.CreateContentInput)), true

	case "Mutation.createContentLink":
		if e.complexity.Mutation.CreateContentLink == nil {
			break
		}

		args, err := ec.field_Mutation_createContentLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateContentLink(childComplexity, args["input"].(model.CreateContentLinkInput)), true

	case "Mutation.createFunding":
		if e.complexity.Mutation.CreateFunding == nil {
			break
		}

		args, err := ec.field_Mutation_createFunding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFunding(childComplexity, args["input"].(model.CreateFundingInput)), true

	case "Mutation.createHourlyRate":
		if e.complexity.Mutation.CreateHourlyRate == nil {
			break
		}

		args, err := ec.field_Mutation_createHourlyRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHourlyRate(childComplexity, args["input"].(model.CreateHourlyRateInput)), true

	case "Mutation.createLanguage":
		if e.complexity.Mutation.CreateLanguage == nil {
			break
		}

		args, err := ec.field_Mutation_createLanguage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLanguage(childComplexity, args["input"].(model.CreateLanguageInput)), true

	case "Mutation.createLocation":
		if e.complexity.Mutation.CreateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLocation(childComplexity, args["input"].(model.CreateLocationInput)), true

	case "Mutation.createWithdrawal":
		if e.complexity.Mutation.CreateWithdrawal == nil {
			break
		}

		args, err := ec.field_Mutation_createWithdrawal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWithdrawal(childComplexity, args["input"].(model.CreateWithdrawalInput)), true

	case "Mutation.createWithdrawalChannelLink":
		if e.complexity.Mutation.CreateWithdrawalChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_createWithdrawalChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWithdrawalChannelLink(childComplexity, args["input"].(model.WithdrawalChannelLinkInput)), true

	case "Mutation.deleteAccountBanking":
		if e.complexity.Mutation.DeleteAccountBanking == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAccountBanking_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAccountBanking(childComplexity, args["id"].(string)), true

	case "Mutation.deleteBank":
		if e.complexity.Mutation.DeleteBank == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBank_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBank(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCampaign":
		if e.complexity.Mutation.DeleteCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCampaign(childComplexity, args["id"].(string)), true

	case "Mutation.deleteChannel":
		if e.complexity.Mutation.DeleteChannel == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannel(childComplexity, args["id"].(string)), true

	case "Mutation.deleteChannelCategory":
		if e.complexity.Mutation.DeleteChannelCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelCategory(childComplexity, args["channelCategoryInput"].(*model.ChannelCategoryInput)), true

	case "Mutation.deleteChannelCollectedAdLink":
		if e.complexity.Mutation.DeleteChannelCollectedAdLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelCollectedAdLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelCollectedAdLink(childComplexity, args["channelCollectedAdLinkInput"].(*model.ChannelCollectedAdLinkInput)), true

	case "Mutation.deleteChannelContentLanguage":
		if e.complexity.Mutation.DeleteChannelContentLanguage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChannelContentLanguage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChannelContentLanguage(childComplexity, args["channelContentLanguageInput"].(*model.ChannelContentLanguageInput)), true

	case "Mutation.deleteCompanyBanking":
		if e.complexity.Mutation.DeleteCompanyBanking == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompanyBanking_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompanyBanking(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCompanyLocation":
		if e.complexity.Mutation.DeleteCompanyLocation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCompanyLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCompanyLocation(childComplexity, args["companyId"].(string), args["locationId"].(string)), true

	case "Mutation.deleteWithdrawalChannelLink":
		if e.complexity.Mutation.DeleteWithdrawalChannelLink == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWithdrawalChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWithdrawalChannelLink(childComplexity, args["withdrawalChannelLinkInput"].(*model.WithdrawalChannelLinkInput)), true

	case "Mutation.updateAccount":
		if e.complexity.Mutation.UpdateAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updateAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAccount(childComplexity, args["input"].(model.UpdateAccountInput)), true

	case "Mutation.updateAdPayment":
		if e.complexity.Mutation.UpdateAdPayment == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdPayment(childComplexity, args["input"].(model.UpdateAdPaymentInput)), true

	case "Mutation.updateAdvertisement":
		if e.complexity.Mutation.UpdateAdvertisement == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdvertisement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdvertisement(childComplexity, args["input"].(model.UpdateAdvertisementInput)), true

	case "Mutation.updateAdvertisementCPM":
		if e.complexity.Mutation.UpdateAdvertisementCpm == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdvertisementCPM_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdvertisementCpm(childComplexity, args["input"].(model.UpdateAdvertisementCPMInput)), true

	case "Mutation.updateAdvertisementResult":
		if e.complexity.Mutation.UpdateAdvertisementResult == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdvertisementResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdvertisementResult(childComplexity, args["input"].(model.UpdateAdvertisementResultInput)), true

	case "Mutation.updateAudience":
		if e.complexity.Mutation.UpdateAudience == nil {
			break
		}

		args, err := ec.field_Mutation_updateAudience_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAudience(childComplexity, args["input"].(model.UpdateAudienceInput)), true

	case "Mutation.updateBank":
		if e.complexity.Mutation.UpdateBank == nil {
			break
		}

		args, err := ec.field_Mutation_updateBank_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBank(childComplexity, args["input"].(model.UpdateBankInput)), true

	case "Mutation.updateBudget":
		if e.complexity.Mutation.UpdateBudget == nil {
			break
		}

		args, err := ec.field_Mutation_updateBudget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBudget(childComplexity, args["input"].(model.UpdateBudgetInput)), true

	case "Mutation.updateCPMRate":
		if e.complexity.Mutation.UpdateCPMRate == nil {
			break
		}

		args, err := ec.field_Mutation_updateCPMRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCPMRate(childComplexity, args["input"].(model.UpdateCPMRateInput)), true

	case "Mutation.updateCampaign":
		if e.complexity.Mutation.UpdateCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_updateCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCampaign(childComplexity, args["input"].(model.UpdateCampaignInput)), true

	case "Mutation.updateChannel":
		if e.complexity.Mutation.UpdateChannel == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannel(childComplexity, args["input"].(model.UpdateChannelInput)), true

	case "Mutation.updateChannelBalance":
		if e.complexity.Mutation.UpdateChannelBalance == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelBalance(childComplexity, args["input"].(model.UpdateChannelBalanceInput)), true

	case "Mutation.updateChannelDetail":
		if e.complexity.Mutation.UpdateChannelDetail == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelDetail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelDetail(childComplexity, args["input"].(model.UpdateChannelDetailInput)), true

	case "Mutation.updateChannelLifeTimeBalance":
		if e.complexity.Mutation.UpdateChannelLifeTimeBalance == nil {
			break
		}

		args, err := ec.field_Mutation_updateChannelLifeTimeBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChannelLifeTimeBalance(childComplexity, args["input"].(model.UpdateChannelLifeTimeBalanceInput)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["input"].(model.UpdateCompanyInput)), true

	case "Mutation.updateCompanyMember":
		if e.complexity.Mutation.UpdateCompanyMember == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompanyMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompanyMember(childComplexity, args["input"].(model.UpdateCompanyMemberInput)), true

	case "Mutation.updateContent":
		if e.complexity.Mutation.UpdateContent == nil {
			break
		}

		args, err := ec.field_Mutation_updateContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateContent(childComplexity, args["input"].(model.UpdateContentInput)), true

	case "Mutation.updateContentLink":
		if e.complexity.Mutation.UpdateContentLink == nil {
			break
		}

		args, err := ec.field_Mutation_updateContentLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateContentLink(childComplexity, args["input"].(model.UpdateContentLinkInput)), true

	case "Mutation.updateFunding":
		if e.complexity.Mutation.UpdateFunding == nil {
			break
		}

		args, err := ec.field_Mutation_updateFunding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFunding(childComplexity, args["input"].(model.UpdateFundingInput)), true

	case "Mutation.updateHourlyRate":
		if e.complexity.Mutation.UpdateHourlyRate == nil {
			break
		}

		args, err := ec.field_Mutation_updateHourlyRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHourlyRate(childComplexity, args["input"].(model.UpdateHourlyRateInput)), true

	case "Mutation.updateLocation":
		if e.complexity.Mutation.UpdateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocation(childComplexity, args["input"].(model.UpdateLocationInput)), true

	case "Mutation.updateWithdrawal":
		if e.complexity.Mutation.UpdateWithdrawal == nil {
			break
		}

		args, err := ec.field_Mutation_updateWithdrawal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWithdrawal(childComplexity, args["input"].(model.UpdateWithdrawalInput)), true

	case "Query.account":
		if e.complexity.Query.Account == nil {
			break
		}

		return e.complexity.Query.Account(childComplexity), true

	case "Query.accountBankingById":
		if e.complexity.Query.AccountBankingByID == nil {
			break
		}

		args, err := ec.field_Query_accountBankingById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountBankingByID(childComplexity, args["id"].(string)), true

	case "Query.accountById":
		if e.complexity.Query.AccountByID == nil {
			break
		}

		args, err := ec.field_Query_accountById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccountByID(childComplexity, args["id"].(string)), true

	case "Query.adPaymentById":
		if e.complexity.Query.AdPaymentByID == nil {
			break
		}

		args, err := ec.field_Query_adPaymentById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdPaymentByID(childComplexity, args["advertisementId"].(string)), true

	case "Query.advertisementById":
		if e.complexity.Query.AdvertisementByID == nil {
			break
		}

		args, err := ec.field_Query_advertisementById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdvertisementByID(childComplexity, args["id"].(string)), true

	case "Query.advertisementCPMById":
		if e.complexity.Query.AdvertisementCPMByID == nil {
			break
		}

		args, err := ec.field_Query_advertisementCPMById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdvertisementCPMByID(childComplexity, args["id"].(string)), true

	case "Query.advertisementResultById":
		if e.complexity.Query.AdvertisementResultByID == nil {
			break
		}

		args, err := ec.field_Query_advertisementResultById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdvertisementResultByID(childComplexity, args["id"].(string)), true

	case "Query.audienceById":
		if e.complexity.Query.AudienceByID == nil {
			break
		}

		args, err := ec.field_Query_audienceById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AudienceByID(childComplexity, args["id"].(string)), true

	case "Query.bankById":
		if e.complexity.Query.BankByID == nil {
			break
		}

		args, err := ec.field_Query_bankById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BankByID(childComplexity, args["id"].(string)), true

	case "Query.budgetById":
		if e.complexity.Query.BudgetByID == nil {
			break
		}

		args, err := ec.field_Query_budgetById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BudgetByID(childComplexity, args["id"].(string)), true

	case "Query.campaignById":
		if e.complexity.Query.CampaignByID == nil {
			break
		}

		args, err := ec.field_Query_campaignById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CampaignByID(childComplexity, args["id"].(string)), true

	case "Query.categoryById":
		if e.complexity.Query.CategoryByID == nil {
			break
		}

		args, err := ec.field_Query_categoryById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CategoryByID(childComplexity, args["id"].(string)), true

	case "Query.channelBalanceById":
		if e.complexity.Query.ChannelBalanceByID == nil {
			break
		}

		args, err := ec.field_Query_channelBalanceById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelBalanceByID(childComplexity, args["channelId"].(string)), true

	case "Query.channelById":
		if e.complexity.Query.ChannelByID == nil {
			break
		}

		args, err := ec.field_Query_channelById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelByID(childComplexity, args["id"].(string)), true

	case "Query.channelCollectedAdLink":
		if e.complexity.Query.ChannelCollectedAdLink == nil {
			break
		}

		args, err := ec.field_Query_channelCollectedAdLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelCollectedAdLink(childComplexity, args["channelCollectedAdLinkInput"].(*model.ChannelCollectedAdLinkInput)), true

	case "Query.channelCollectedAdLinkById":
		if e.complexity.Query.ChannelCollectedAdLinkByID == nil {
			break
		}

		args, err := ec.field_Query_channelCollectedAdLinkById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelCollectedAdLinkByID(childComplexity, args["adPaymentId"].(string)), true

	case "Query.channelDetailById":
		if e.complexity.Query.ChannelDetailByID == nil {
			break
		}

		args, err := ec.field_Query_channelDetailById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelDetailByID(childComplexity, args["channelId"].(string)), true

	case "Query.channelLifeTimeBalanceById":
		if e.complexity.Query.ChannelLifeTimeBalanceByID == nil {
			break
		}

		args, err := ec.field_Query_channelLifeTimeBalanceById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChannelLifeTimeBalanceByID(childComplexity, args["channelId"].(string)), true

	case "Query.companyBankingById":
		if e.complexity.Query.CompanyBankingByID == nil {
			break
		}

		args, err := ec.field_Query_companyBankingById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompanyBankingByID(childComplexity, args["id"].(string)), true

	case "Query.companyById":
		if e.complexity.Query.CompanyByID == nil {
			break
		}

		args, err := ec.field_Query_companyById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompanyByID(childComplexity, args["id"].(string)), true

	case "Query.companyLocationById":
		if e.complexity.Query.CompanyLocationByID == nil {
			break
		}

		args, err := ec.field_Query_companyLocationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompanyLocationByID(childComplexity, args["companyId"].(string), args["locationId"].(string)), true

	case "Query.companyMemberById":
		if e.complexity.Query.CompanyMemberByID == nil {
			break
		}

		args, err := ec.field_Query_companyMemberById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompanyMemberByID(childComplexity, args["id"].(string)), true

	case "Query.contentById":
		if e.complexity.Query.ContentByID == nil {
			break
		}

		args, err := ec.field_Query_contentById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContentByID(childComplexity, args["id"].(string)), true

	case "Query.contentLinkById":
		if e.complexity.Query.ContentLinkByID == nil {
			break
		}

		args, err := ec.field_Query_contentLinkById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContentLinkByID(childComplexity, args["id"].(string)), true

	case "Query.cpmRateByChannelId":
		if e.complexity.Query.CpmRateByChannelID == nil {
			break
		}

		args, err := ec.field_Query_cpmRateByChannelId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CpmRateByChannelID(childComplexity, args["channelId"].(string)), true

	case "Query.fundingById":
		if e.complexity.Query.FundingByID == nil {
			break
		}

		args, err := ec.field_Query_fundingById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FundingByID(childComplexity, args["id"].(string)), true

	case "Query.getAllAccountBankings":
		if e.complexity.Query.GetAllAccountBankings == nil {
			break
		}

		args, err := ec.field_Query_getAllAccountBankings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAccountBankings(childComplexity, args["accountBankingsFilter"].(model.AccountBankingsFilter)), true

	case "Query.getAllAdPayments":
		if e.complexity.Query.GetAllAdPayments == nil {
			break
		}

		args, err := ec.field_Query_getAllAdPayments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAdPayments(childComplexity, args["adPaymentFilter"].(*model.AdPaymentFilter)), true

	case "Query.getAllAdvertisements":
		if e.complexity.Query.GetAllAdvertisements == nil {
			break
		}

		args, err := ec.field_Query_getAllAdvertisements_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAdvertisements(childComplexity, args["advertisementFilter"].(*model.AdvertisementFilter)), true

	case "Query.getAllBanks":
		if e.complexity.Query.GetAllBanks == nil {
			break
		}

		args, err := ec.field_Query_getAllBanks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllBanks(childComplexity, args["bankFilter"].(model.BankFilter)), true

	case "Query.getAllCampaigns":
		if e.complexity.Query.GetAllCampaigns == nil {
			break
		}

		args, err := ec.field_Query_getAllCampaigns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCampaigns(childComplexity, args["campaignFilter"].(*model.CampaignFilter)), true

	case "Query.getAllCategories":
		if e.complexity.Query.GetAllCategories == nil {
			break
		}

		args, err := ec.field_Query_getAllCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCategories(childComplexity, args["categoryFilter"].(*model.CategoryFilter)), true

	case "Query.getAllChannelCategories":
		if e.complexity.Query.GetAllChannelCategories == nil {
			break
		}

		args, err := ec.field_Query_getAllChannelCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllChannelCategories(childComplexity, args["channelCategoryFilter"].(*model.ChannelCategoryFilter)), true

	case "Query.getAllChannelCollectedAdLinks":
		if e.complexity.Query.GetAllChannelCollectedAdLinks == nil {
			break
		}

		args, err := ec.field_Query_getAllChannelCollectedAdLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllChannelCollectedAdLinks(childComplexity, args["channelCollectedAdLinkFilter"].(*model.ChannelCollectedAdLinkFilter)), true

	case "Query.getAllChannelContentLanguages":
		if e.complexity.Query.GetAllChannelContentLanguages == nil {
			break
		}

		args, err := ec.field_Query_getAllChannelContentLanguages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllChannelContentLanguages(childComplexity, args["channelContentLanguageFilter"].(*model.ChannelContentLanguageFilter)), true

	case "Query.getAllChannelDetails":
		if e.complexity.Query.GetAllChannelDetails == nil {
			break
		}

		args, err := ec.field_Query_getAllChannelDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllChannelDetails(childComplexity, args["channelDetailFilter"].(*model.ChannelDetailFilter)), true

	case "Query.getAllChannels":
		if e.complexity.Query.GetAllChannels == nil {
			break
		}

		args, err := ec.field_Query_getAllChannels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllChannels(childComplexity, args["channelFilter"].(*model.ChannelFilter)), true

	case "Query.getAllCompanyBankings":
		if e.complexity.Query.GetAllCompanyBankings == nil {
			break
		}

		args, err := ec.field_Query_getAllCompanyBankings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCompanyBankings(childComplexity, args["companyBankingsFilter"].(model.CompanyBankingFilter)), true

	case "Query.getAllCompanyMembers":
		if e.complexity.Query.GetAllCompanyMembers == nil {
			break
		}

		args, err := ec.field_Query_getAllCompanyMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllCompanyMembers(childComplexity, args["companyMemberFilter"].(*model.CompanyMemberFilter)), true

	case "Query.getAllFunding":
		if e.complexity.Query.GetAllFunding == nil {
			break
		}

		args, err := ec.field_Query_getAllFunding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllFunding(childComplexity, args["fundingFilter"].(*model.FundingFilter)), true

	case "Query.getAllLanguages":
		if e.complexity.Query.GetAllLanguages == nil {
			break
		}

		args, err := ec.field_Query_getAllLanguages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllLanguages(childComplexity, args["languageFilter"].(*model.LanguageFilter)), true

	case "Query.getAllWithdrawalChannelLinks":
		if e.complexity.Query.GetAllWithdrawalChannelLinks == nil {
			break
		}

		args, err := ec.field_Query_getAllWithdrawalChannelLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllWithdrawalChannelLinks(childComplexity, args["withdrawalChannelLinkFilter"].(*model.WithdrawalChannelLinkFilter)), true

	case "Query.getAllWithdrawals":
		if e.complexity.Query.GetAllWithdrawals == nil {
			break
		}

		args, err := ec.field_Query_getAllWithdrawals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllWithdrawals(childComplexity, args["withdrawalFilter"].(*model.WithdrawalFilter)), true

	case "Query.HourlyRateById":
		if e.complexity.Query.HourlyRateByID == nil {
			break
		}

		args, err := ec.field_Query_HourlyRateById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HourlyRateByID(childComplexity, args["id"].(string)), true

	case "Query.languageById":
		if e.complexity.Query.LanguageByID == nil {
			break
		}

		args, err := ec.field_Query_languageById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LanguageByID(childComplexity, args["id"].(string)), true

	case "Query.locationById":
		if e.complexity.Query.LocationByID == nil {
			break
		}

		args, err := ec.field_Query_locationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LocationByID(childComplexity, args["id"].(string)), true

	case "Query.withdrawalById":
		if e.complexity.Query.WithdrawalByID == nil {
			break
		}

		args, err := ec.field_Query_withdrawalById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WithdrawalByID(childComplexity, args["id"].(string)), true

	case "Query.withdrawalChannelLink":
		if e.complexity.Query.WithdrawalChannelLink == nil {
			break
		}

		args, err := ec.field_Query_withdrawalChannelLink_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WithdrawalChannelLink(childComplexity, args["withdrawalChannelLinkInput"].(*model.WithdrawalChannelLinkInput)), true

	case "Query.withdrawalChannelLinkById":
		if e.complexity.Query.WithdrawalChannelLinkByID == nil {
			break
		}

		args, err := ec.field_Query_withdrawalChannelLinkById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WithdrawalChannelLinkByID(childComplexity, args["withdrawalId"].(string)), true

	case "User.done":
		if e.complexity.User.Done == nil {
			break
		}

		return e.complexity.User.Done(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.text":
		if e.complexity.User.Text == nil {
			break
		}

		return e.complexity.User.Text(childComplexity), true

	case "WithdrawalChannelLinks.channelBalanceId":
		if e.complexity.WithdrawalChannelLinks.ChannelBalanceID == nil {
			break
		}

		return e.complexity.WithdrawalChannelLinks.ChannelBalanceID(childComplexity), true

	case "WithdrawalChannelLinks.withdrawalId":
		if e.complexity.WithdrawalChannelLinks.WithdrawalID == nil {
			break
		}

		return e.complexity.WithdrawalChannelLinks.WithdrawalID(childComplexity), true

	case "Withdrawals.accountBankId":
		if e.complexity.Withdrawals.AccountBankID == nil {
			break
		}

		return e.complexity.Withdrawals.AccountBankID(childComplexity), true

	case "Withdrawals.accountId":
		if e.complexity.Withdrawals.AccountID == nil {
			break
		}

		return e.complexity.Withdrawals.AccountID(childComplexity), true

	case "Withdrawals.createdAt":
		if e.complexity.Withdrawals.CreatedAt == nil {
			break
		}

		return e.complexity.Withdrawals.CreatedAt(childComplexity), true

	case "Withdrawals.currency":
		if e.complexity.Withdrawals.Currency == nil {
			break
		}

		return e.complexity.Withdrawals.Currency(childComplexity), true

	case "Withdrawals.deletedAt":
		if e.complexity.Withdrawals.DeletedAt == nil {
			break
		}

		return e.complexity.Withdrawals.DeletedAt(childComplexity), true

	case "Withdrawals.extra":
		if e.complexity.Withdrawals.Extra == nil {
			break
		}

		return e.complexity.Withdrawals.Extra(childComplexity), true

	case "Withdrawals.fundingKey":
		if e.complexity.Withdrawals.FundingKey == nil {
			break
		}

		return e.complexity.Withdrawals.FundingKey(childComplexity), true

	case "Withdrawals.id":
		if e.complexity.Withdrawals.ID == nil {
			break
		}

		return e.complexity.Withdrawals.ID(childComplexity), true

	case "Withdrawals.log":
		if e.complexity.Withdrawals.Log == nil {
			break
		}

		return e.complexity.Withdrawals.Log(childComplexity), true

	case "Withdrawals.method":
		if e.complexity.Withdrawals.Method == nil {
			break
		}

		return e.complexity.Withdrawals.Method(childComplexity), true

	case "Withdrawals.paymentDate":
		if e.complexity.Withdrawals.PaymentDate == nil {
			break
		}

		return e.complexity.Withdrawals.PaymentDate(childComplexity), true

	case "Withdrawals.reference":
		if e.complexity.Withdrawals.Reference == nil {
			break
		}

		return e.complexity.Withdrawals.Reference(childComplexity), true

	case "Withdrawals.status":
		if e.complexity.Withdrawals.Status == nil {
			break
		}

		return e.complexity.Withdrawals.Status(childComplexity), true

	case "Withdrawals.totalAmount":
		if e.complexity.Withdrawals.TotalAmount == nil {
			break
		}

		return e.complexity.Withdrawals.TotalAmount(childComplexity), true

	case "Withdrawals.updatedAt":
		if e.complexity.Withdrawals.UpdatedAt == nil {
			break
		}

		return e.complexity.Withdrawals.UpdatedAt(childComplexity), true

	case "cpmRates.active":
		if e.complexity.CpmRates.Active == nil {
			break
		}

		return e.complexity.CpmRates.Active(childComplexity), true

	case "cpmRates.channelId":
		if e.complexity.CpmRates.ChannelID == nil {
			break
		}

		return e.complexity.CpmRates.ChannelID(childComplexity), true

	case "cpmRates.CPM":
		if e.complexity.CpmRates.Cpm == nil {
			break
		}

		return e.complexity.CpmRates.Cpm(childComplexity), true

	case "cpmRates.createdAt":
		if e.complexity.CpmRates.CreatedAt == nil {
			break
		}

		return e.complexity.CpmRates.CreatedAt(childComplexity), true

	case "cpmRates.id":
		if e.complexity.CpmRates.ID == nil {
			break
		}

		return e.complexity.CpmRates.ID(childComplexity), true

	case "cpmRates.minCPMVolume":
		if e.complexity.CpmRates.MinCPMVolume == nil {
			break
		}

		return e.complexity.CpmRates.MinCPMVolume(childComplexity), true

	case "cpmRates.updatedAt":
		if e.complexity.CpmRates.UpdatedAt == nil {
			break
		}

		return e.complexity.CpmRates.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputFilterInput,
		ec.unmarshalInputWithdrawalChannelLinkFilter,
		ec.unmarshalInputWithdrawalChannelLinkInput,
		ec.unmarshalInputaccountBankingsFilter,
		ec.unmarshalInputadPaymentFilter,
		ec.unmarshalInputadvertisementFilter,
		ec.unmarshalInputbankFilter,
		ec.unmarshalInputcampaignFilter,
		ec.unmarshalInputcategoryFilter,
		ec.unmarshalInputchannelCategoryFilter,
		ec.unmarshalInputchannelCategoryInput,
		ec.unmarshalInputchannelCollectedAdLinkFilter,
		ec.unmarshalInputchannelCollectedAdLinkInput,
		ec.unmarshalInputchannelContentLanguageFilter,
		ec.unmarshalInputchannelContentLanguageInput,
		ec.unmarshalInputchannelDetailFilter,
		ec.unmarshalInputchannelFilter,
		ec.unmarshalInputcompanyBankingFilter,
		ec.unmarshalInputcompanyMemberFilter,
		ec.unmarshalInputcreateAccountBankingInput,
		ec.unmarshalInputcreateAccountInput,
		ec.unmarshalInputcreateAdPaymentInput,
		ec.unmarshalInputcreateAdvertisementCPMInput,
		ec.unmarshalInputcreateAdvertisementInput,
		ec.unmarshalInputcreateAdvertisementResultInput,
		ec.unmarshalInputcreateAudienceInput,
		ec.unmarshalInputcreateBankInput,
		ec.unmarshalInputcreateBudgetInput,
		ec.unmarshalInputcreateCPMRateInput,
		ec.unmarshalInputcreateCampaignInput,
		ec.unmarshalInputcreateCategoryInput,
		ec.unmarshalInputcreateChannelBalanceInput,
		ec.unmarshalInputcreateChannelDetailInput,
		ec.unmarshalInputcreateChannelInput,
		ec.unmarshalInputcreateChannelLifeTimeBalanceInput,
		ec.unmarshalInputcreateCompanyBankingInput,
		ec.unmarshalInputcreateCompanyInput,
		ec.unmarshalInputcreateCompanyLocationInput,
		ec.unmarshalInputcreateCompanyMemberInput,
		ec.unmarshalInputcreateContentInput,
		ec.unmarshalInputcreateContentLinkInput,
		ec.unmarshalInputcreateFundingInput,
		ec.unmarshalInputcreateHourlyRateInput,
		ec.unmarshalInputcreateLanguageInput,
		ec.unmarshalInputcreateLocationInput,
		ec.unmarshalInputcreateWithdrawalInput,
		ec.unmarshalInputfundingFilter,
		ec.unmarshalInputlanguageFilter,
		ec.unmarshalInputminMaxFilterInput,
		ec.unmarshalInputupdateAccountInput,
		ec.unmarshalInputupdateAdPaymentInput,
		ec.unmarshalInputupdateAdvertisementCPMInput,
		ec.unmarshalInputupdateAdvertisementInput,
		ec.unmarshalInputupdateAdvertisementResultInput,
		ec.unmarshalInputupdateAudienceInput,
		ec.unmarshalInputupdateBankInput,
		ec.unmarshalInputupdateBudgetInput,
		ec.unmarshalInputupdateCPMRateInput,
		ec.unmarshalInputupdateCampaignInput,
		ec.unmarshalInputupdateChannelBalanceInput,
		ec.unmarshalInputupdateChannelDetailInput,
		ec.unmarshalInputupdateChannelInput,
		ec.unmarshalInputupdateChannelLifeTimeBalanceInput,
		ec.unmarshalInputupdateCompanyInput,
		ec.unmarshalInputupdateCompanyMemberInput,
		ec.unmarshalInputupdateContentInput,
		ec.unmarshalInputupdateContentLinkInput,
		ec.unmarshalInputupdateFundingInput,
		ec.unmarshalInputupdateHourlyRateInput,
		ec.unmarshalInputupdateLocationInput,
		ec.unmarshalInputupdateWithdrawalInput,
		ec.unmarshalInputwithdrawalFilter,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/CPMRate/CPMRate.graphqls", Input: `type cpmRates {
  id: ID!
  channelId: ID!
  active: Boolean
  CPM: Float
  minCPMVolume: Float
  createdAt: Timestamp
  updatedAt: Timestamp
}

input createCPMRateInput {
  channelId: ID!
  active: Boolean
  CPM: Float
  minCPMVolume: Float
}
input updateCPMRateInput {
  channelId: ID!
  active: Boolean
  CPM: Float
  minCPMVolume: Float
}

extend type Query {
  cpmRateByChannelId(channelId: ID!): cpmRates!
}
extend type Mutation {
  createCPMRate(input: createCPMRateInput!): cpmRates!
  updateCPMRate(input: updateCPMRateInput!): cpmRates!
}
`, BuiltIn: false},
	{Name: "../schema/account/account.graphqls", Input: `scalar Timestamp
scalar Time
scalar Upload
scalar Json
scalar Any
scalar Map

type Account {
  id: ID!
  userId: ID!
  userName: String!
  email: String
  phoneNumber: String
  fullName: String
  birthDate: Timestamp
  accountType: AccountType
  createdAt: Timestamp
  updatedAt: Timestamp
}
enum AccountType {
  Publisher
  Advertiser
}
input createAccountInput {
  userId: ID!
  userName: String!
  email: String
  phoneNumber: String
  fullName: String
  birthDate: Timestamp
  accountType: AccountType
}
input updateAccountInput {
  id: ID!
  userName: String
  email: String
  phoneNumber: String
  fullName: String
  birthDate: Timestamp
  accountType: AccountType
}

input FilterInput {
  after: String
  before: String
  limit: Int
}

type DeletionResult {
  success: Boolean!
  message: String!
}

type Query {
  account: Account!
  accountById(id: ID!): Account!
}
type Mutation {
  createAccount(input: createAccountInput!): Account!
  updateAccount(input: updateAccountInput!): Account!
}
`, BuiltIn: false},
	{Name: "../schema/accountBanking/accountBanking.graphqls", Input: `type AccountBanking {
  id: ID!
  accountId: ID!
  bankId: ID!
  fullNameOnBank: String!
  bankAccount: String!
  currency: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

input createAccountBankingInput {
  accountId: ID!
  bankId: ID!
  fullNameOnBank: String!
  bankAccount: String!
  currency: String!
}

input accountBankingsFilter {
  filter: FilterInput
  accountId: String
  bankId: String
}
extend type Query {
  accountBankingById(id: ID!): AccountBanking!
  getAllAccountBankings(
    accountBankingsFilter: accountBankingsFilter!
  ): [AccountBanking!]!
}
extend type Mutation {
  createAccountBanking(input: createAccountBankingInput!): AccountBanking!
  deleteAccountBanking(id: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/adPayment/adPayments.graphqls", Input: `type AdPayments {
  id: ID!
  advertisementId: ID!
  accountId: ID!
  campaignId: ID!
  channelId: ID!
  amount: Float
  currency: String
  completionTime: Timestamp
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createAdPaymentInput {
  advertisementId: ID!
  accountId: ID!
  campaignId: ID!
  channelId: ID!
  amount: Float
  currency: String
  completionTime: Timestamp
}
input updateAdPaymentInput {
  id: ID!
  amount: Float
  currency: String
  completionTime: Timestamp
}
input adPaymentFilter {
  advertisementId: ID
  campaignId: ID
  channelId: ID
  amount: minMaxFilterInput
  currency: String
  filter: FilterInput
}

extend type Query {
  adPaymentById(advertisementId: ID!): AdPayments!
  getAllAdPayments(adPaymentFilter: adPaymentFilter): [AdPayments!]!
}
extend type Mutation {
  createAdPayment(input: createAdPaymentInput!): AdPayments!
  updateAdPayment(input: updateAdPaymentInput!): AdPayments!
}
`, BuiltIn: false},
	{Name: "../schema/advertisementCPM/advertisementCPM.graphqls", Input: `type AdvertisementCPMs {
  advertisementId: ID!
  Rate: Float!
  channelShare: Float!
  providerShare: Float!
  totalBudget: Float!
  maxLifeCycle: Int!
  requiredViews: Int!
}

input createAdvertisementCPMInput {
  advertisementId: ID!
  Rate: Float!
  channelShare: Float!
  providerShare: Float!
  totalBudget: Float!
  maxLifeCycle: Int!
  requiredViews: Int!
}
input updateAdvertisementCPMInput {
  advertisementId: ID!
  Rate: Float
  channelShare: Float
  providerShare: Float
  totalBudget: Float
  maxLifeCycle: Int
  requiredViews: Int
}

extend type Query {
  advertisementCPMById(id: ID!): AdvertisementCPMs!
}
extend type Mutation {
  createAdvertisementCPM(
    input: createAdvertisementCPMInput!
  ): AdvertisementCPMs!
  updateAdvertisementCPM(
    input: updateAdvertisementCPMInput!
  ): AdvertisementCPMs!
}
`, BuiltIn: false},
	{Name: "../schema/advertisementResult/advertisementResult.graphqls", Input: `type AdvertisementResults {
  advertisementId: ID!
  startedAt: Timestamp!
  budget: Float!
  providerBudgetShare: Float!
  channelBudgetShare: Float!
  totalHour: Int!
  totalClick: Int!
  totalViews: Int!
  totalForward: Int!
  totalReaction: Int!
}

input createAdvertisementResultInput {
  advertisementId: ID!
  startedAt: Timestamp!
  budget: Float
  providerBudgetShare: Float
  channelBudgetShare: Float
  totalHour: Int
  totalClick: Int
  totalViews: Int
  totalForward: Int
  totalReaction: Int
}
input updateAdvertisementResultInput {
  advertisementId: ID!
  startedAt: Timestamp
  budget: Float
  providerBudgetShare: Float
  channelBudgetShare: Float
  totalHour: Int
  totalClick: Int
  totalViews: Int
  totalForward: Int
  totalReaction: Int
}
extend type Query {
  advertisementResultById(id: ID!): AdvertisementResults!
}
extend type Mutation {
  createAdvertisementResult(
    input: createAdvertisementResultInput!
  ): AdvertisementResults!
  updateAdvertisementResult(
    input: updateAdvertisementResultInput!
  ): AdvertisementResults!
}
`, BuiltIn: false},
	{Name: "../schema/advertisements/advertisements.graphqls", Input: `type Advertisements {
  id: ID!
  campaignId: ID!
  contentId: ID!
  channelId: ID!
  messageId: Int
  status: AdStatus
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createAdvertisementInput {
  campaignId: ID!
  contentId: ID!
  channelId: ID!
  messageId: Int
  status: AdStatus
}
input updateAdvertisementInput {
  id: ID!
  status: AdStatus
}
enum AdStatus {
  Pending
  Running
  Closed
  Rejected
}
input advertisementFilter {
  channelId: ID
  companyId: ID
  status: [AdStatus!]
  rate: minMaxFilterInput
  channelBudgetShare: minMaxFilterInput
  requiredViews: minMaxFilterInput
  Views: minMaxFilterInput
  Hours: minMaxFilterInput
  filter: FilterInput
}
extend type Query {
  advertisementById(id: ID!): Advertisements!
  getAllAdvertisements(advertisementFilter: advertisementFilter): [Advertisements!]!
}
extend type Mutation {
  createAdvertisement(input: createAdvertisementInput!): Advertisements!
  updateAdvertisement(input: updateAdvertisementInput!): Advertisements!
}
`, BuiltIn: false},
	{Name: "../schema/audience/audience.graphqls", Input: `type Audiences {
  campaignId: ID!
  category: String
  language: String
}

input createAudienceInput {
  campaignId: ID!
  category: String
  language: String
}
input updateAudienceInput {
  campaignId: ID!
  category: String
  language: String
}
extend type Query {
  audienceById(id: ID!): Audiences!
}
extend type Mutation {
  createAudience(input: createAudienceInput!): Audiences!
  updateAudience(input: updateAudienceInput!): Audiences!
}
`, BuiltIn: false},
	{Name: "../schema/bank/bank.graphqls", Input: `type Banks {
  id: ID!
  bankName: String!
  bankCode: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

input createBankInput {
  bankName: String!
  bankCode: String!
}
input updateBankInput {
  id: ID!
  bankName: String
  bankCode: String
}
input bankFilter {
  filter: FilterInput
}
extend type Query {
  bankById(id: ID!): Banks!
  getAllBanks(bankFilter: bankFilter!): [Banks!]!
}
extend type Mutation {
  createBank(input: createBankInput!): Banks!
  updateBank(input: updateBankInput!): Banks!
  deleteBank(id: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/budget/budget.graphqls", Input: `type Budgets {
  campaignId: ID!
  initialAmount: Float!
  usedAmount: Float
  refundedAmount: Float
  currency: String
}
input createBudgetInput {
  campaignId: ID!
  initialAmount: Float!
  usedAmount: Float
  refundedAmount: Float
  currency: String
}
input updateBudgetInput {
  campaignId: ID!
  initialAmount: Float
  usedAmount: Float
  refundedAmount: Float
  currency: String
}
extend type Query {
  budgetById(id: ID!): Budgets!
}
extend type Mutation {
  createBudget(input: createBudgetInput!): Budgets!
  updateBudget(input: updateBudgetInput!): Budgets!
}
`, BuiltIn: false},
	{Name: "../schema/campaign/campaign.graphqls", Input: `type Campaigns {
  id: ID!
  companyId: ID!
  name: String!
  objective: ObjectiveType
  startDate: Timestamp
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
enum ObjectiveType {
  REACH
  IMPRESSION
  CLICKS
}
input createCampaignInput {
  companyId: ID!
  name: String!
  objective: ObjectiveType
  startDate: Timestamp
}
input updateCampaignInput {
  id: ID!
  name: String
  objective: ObjectiveType
  startDate: Timestamp
}
input campaignFilter {
  name: String
  companyId: ID
  objective: [ObjectiveType!]
  categories: [String!]
  languages: [String!]
  initialBudget: minMaxFilterInput
  usedAmount: minMaxFilterInput
  contentType: [ContentType!]
  advertisementStatus: [AdStatus!]
  advertisementRate: minMaxFilterInput
  advertisementRequiredViews: minMaxFilterInput
  advertisementViews: minMaxFilterInput
  advertisementHours: minMaxFilterInput
  filter: FilterInput
}

extend type Query {
  campaignById(id: ID!): Campaigns!
  getAllCampaigns(campaignFilter: campaignFilter): [Campaigns!]!
}
extend type Mutation {
  createCampaign(input: createCampaignInput!): Campaigns!
  updateCampaign(input: updateCampaignInput!): Campaigns!
  deleteCampaign(id: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/category/category.graphqls", Input: `type Categories {
  category: String!
}

input createCategoryInput {
  category: String!
}

input categoryFilter {
  filter: FilterInput
}

extend type Query {
  categoryById(id: ID!): Categories!
  getAllCategories(categoryFilter: categoryFilter): [Categories!]!
}

extend type Mutation {
  createCategory(input: createCategoryInput!): Categories!
}
`, BuiltIn: false},
	{Name: "../schema/channel/channel.graphqls", Input: `type Channels {
  id: ID!
  ownerId: ID!
  userName: String!
  name: String
  description: String
  botAddAsAdmin: Boolean
  channelCreatedAt: Timestamp
  country: String
  currency: String
  cpmRating: cpmRates
  categories(filter: FilterInput): [ChannelCategories]
  languages(filter: FilterInput): [ChannelContentLanguages]
  channelDetails: ChannelDetails
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createChannelInput {
  ownerId: ID!
  userName: String!
  name: String
  description: String
  botAddAsAdmin: Boolean
  channelCreatedAt: Timestamp
  country: String
  currency: String
  cpmRate: createCPMRateInput
  categories: [String!]
  languages: [String!]
}
input updateChannelInput {
  id: ID!
  ownerId: ID
  userName: String
  name: String
  description: String
  botAddAsAdmin: Boolean
  country: String
  currency: String
}
input channelFilter {
  name: String
  country: String
  categories: [String!]
  languages: [String!]
  subCount: minMaxFilterInput
  cpmFilter: minMaxFilterInput
  postViewFilter: minMaxFilterInput
  filter: FilterInput
}

input minMaxFilterInput {
  min: Float!
  max: Float
}

extend type Query {
  channelById(id: ID!): Channels!
  getAllChannels(channelFilter: channelFilter): [Channels!]!
}
extend type Mutation {
  createChannel(input: createChannelInput!): Channels!
  updateChannel(input: updateChannelInput!): Channels!
  deleteChannel(id: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/channelBalance/channelBalance.graphqls", Input: `type ChannelBalances {
  id: ID!
  accountId: ID!
  channelId: ID!
  amount: Float
  currency: String
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createChannelBalanceInput {
  accountId: ID!
  channelId: ID!
  amount: Float
  currency: String
}
input updateChannelBalanceInput {
  id: ID!
  amount: Float
  currency: String
}
extend type Query {
  channelBalanceById(channelId: ID!): ChannelBalances!
}
extend type Mutation {
  createChannelBalance(input: createChannelBalanceInput!): ChannelBalances!
  updateChannelBalance(input: updateChannelBalanceInput!): ChannelBalances!
}
`, BuiltIn: false},
	{Name: "../schema/channelCategory/channelCategory.graphqls", Input: `type ChannelCategories {
  id: ID!
  channelId: String
  category: String
}
input channelCategoryInput {
  channelId: String!
  category: String!
}
input channelCategoryFilter {
  channelId: String
  category: String
  filter: FilterInput
}
extend type Query {
  getAllChannelCategories(
    channelCategoryFilter: channelCategoryFilter
  ): [ChannelCategories!]!
}
extend type Mutation {
  createChannelCategory(input: channelCategoryInput!): ChannelCategories!
  deleteChannelCategory(
    channelCategoryInput: channelCategoryInput
  ): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/channelCollectedAdLink/channelCollectedAdLink.graphqls", Input: `type ChannelCollectedAdLinks {
  channelBalanceId: ID!
  adPaymentId: ID!
}

input channelCollectedAdLinkInput {
  channelBalanceId: ID!
  adPaymentId: ID!
}
input channelCollectedAdLinkFilter {
  channelBalanceId: ID
  filter: FilterInput
}

extend type Query {
  channelCollectedAdLinkById(adPaymentId: ID!): ChannelCollectedAdLinks!
  channelCollectedAdLink(
    channelCollectedAdLinkInput: channelCollectedAdLinkInput
  ): ChannelCollectedAdLinks!
  getAllChannelCollectedAdLinks(
    channelCollectedAdLinkFilter: channelCollectedAdLinkFilter
  ): [ChannelCollectedAdLinks!]!
}
extend type Mutation {
  createChannelCollectedAdLink(
    input: channelCollectedAdLinkInput!
  ): ChannelCollectedAdLinks!
  deleteChannelCollectedAdLink(
    channelCollectedAdLinkInput: channelCollectedAdLinkInput
  ): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/channelContentLanguage/channelContentLanguage.graphqls", Input: `type ChannelContentLanguages {
  id: ID!
  channelId: String
  language: String
}
input channelContentLanguageInput {
  channelId: String!
  language: String!
}
input channelContentLanguageFilter {
  channelId: String
  language: String
  filter: FilterInput
}
extend type Query {
  getAllChannelContentLanguages(
    channelContentLanguageFilter: channelContentLanguageFilter
  ): [ChannelContentLanguages!]!
}
extend type Mutation {
  createChannelContentLanguage(
    input: channelContentLanguageInput!
  ): ChannelContentLanguages!
  deleteChannelContentLanguage(
    channelContentLanguageInput: channelContentLanguageInput
  ): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/channelDetail/channelDetail.graphqls", Input: `type ChannelDetails {
  channelId: ID!
  subCount: Int
  averagePostView: Int
  postToSubRatio: Float
  PostFrequency: Float
  lastPostId: String
  lastPost: Timestamp
  collectedDate: Timestamp
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createChannelDetailInput {
  channelId: ID!
  subCount: Int
  averagePostView: Int
  postToSubRatio: Float
  PostFrequency: Float
  lastPostId: String
  lastPost: Timestamp
  collectedDate: Timestamp
}
input updateChannelDetailInput {
  channelId: ID!
  subCount: Int
  averagePostView: Int
  postToSubRatio: Float
  PostFrequency: Float
  lastPostId: String
  lastPost: Timestamp
  collectedDate: Timestamp
}
input channelDetailFilter {
  filter: FilterInput
}
extend type Query {
  getAllChannelDetails(channelDetailFilter: channelDetailFilter): [ChannelDetails!]!
  channelDetailById(channelId: ID!): ChannelDetails!
}
extend type Mutation {
  createChannelDetail(input: createChannelDetailInput!): ChannelDetails!
  updateChannelDetail(input: updateChannelDetailInput!): ChannelDetails!
}
`, BuiltIn: false},
	{Name: "../schema/channelLifeTimeBalance/channelLifeTimeBalance.graphqls", Input: `type ChannelLifeTimeBalances {
  id: ID!
  accountId: ID!
  channelId: ID!
  totalAmount: Float!
  currency: String
  totalHour: Float!
  totalAd: Float!
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createChannelLifeTimeBalanceInput {
  accountId: ID!
  channelId: ID!
  totalAmount: Float!
  currency: String
  totalHour: Float!
  totalAd: Float!
}
input updateChannelLifeTimeBalanceInput {
  id: ID!
  totalAmount: Float
  currency: String
  totalHour: Float
  totalAd: Float
}
extend type Query {
  channelLifeTimeBalanceById(channelId: ID!): ChannelLifeTimeBalances!
}
extend type Mutation {
  createChannelLifeTimeBalance(
    input: createChannelLifeTimeBalanceInput!
  ): ChannelLifeTimeBalances!
  updateChannelLifeTimeBalance(
    input: updateChannelLifeTimeBalanceInput!
  ): ChannelLifeTimeBalances!
}
`, BuiltIn: false},
	{Name: "../schema/company/company.graphqls", Input: `type Companies {
  id: ID!
  creatorId: ID!
  name: String!
  uniqueName: String!
  tinNumber: String
  vatNumber: String
  createdAt: Timestamp
  updatedAt: Timestamp
}
input createCompanyInput {
  creatorId: ID!
  name: String!
  uniqueName: String!
  tinNumber: String
  vatNumber: String
}
input updateCompanyInput {
  id: ID!
  name: String
  uniqueName: String
  tinNumber: String
  vatNumber: String
}
extend type Query {
  companyById(id: ID!): Companies!
}
extend type Mutation {
  createCompany(input: createCompanyInput!): Companies!
  updateCompany(input: updateCompanyInput!): Companies!
}
`, BuiltIn: false},
	{Name: "../schema/companyBanking/companyBanking.graphqls", Input: `type CompanyBankings {
  id: ID!
  companyId: ID!
  bankId: ID!
  fullNameOnBank: String!
  bankAccount: String!
  currency: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

input createCompanyBankingInput {
  companyId: ID!
  bankId: ID!
  fullNameOnBank: String!
  bankAccount: String!
  currency: String!
}

input companyBankingFilter {
  filter: FilterInput
  companyId: String
  bankId: String
}
extend type Query {
  companyBankingById(id: ID!): CompanyBankings!
  getAllCompanyBankings(
    companyBankingsFilter: companyBankingFilter!
  ): [CompanyBankings!]!
}
extend type Mutation {
  createCompanyBanking(input: createCompanyBankingInput!): CompanyBankings!
  deleteCompanyBanking(id: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/companyLocation/companyLocation.graphqls", Input: `type CompanyLocations {
  companyId: ID!
  locationId: ID!
}
input createCompanyLocationInput {
  companyId: ID!
  locationId: ID!
}
extend type Query {
  companyLocationById(companyId: ID!, locationId: ID!): CompanyLocations!
}
extend type Mutation {
  createCompanyLocation(input: createCompanyLocationInput!): CompanyLocations!
  deleteCompanyLocation(companyId: ID!, locationId: ID!): DeletionResult!
}
`, BuiltIn: false},
	{Name: "../schema/companyMember/companyMember.graphqls", Input: `type CompanyMembers {
  id: ID!
  accountId: ID!
  companyId: ID!
  role: CompanyRole
  createdAt: Timestamp
  updatedAt: Timestamp
}
input createCompanyMemberInput {
  accountId: ID!
  companyId: ID!
  role: CompanyRole
}
input updateCompanyMemberInput {
  id: ID!
  role: CompanyRole
}
input companyMemberFilter {
  companyId: ID
  accountId: ID
  role: [CompanyRole!]
  filter: FilterInput
}
enum CompanyRole {
  Admin
  Member
}
extend type Query {
  companyMemberById(id: ID!): CompanyMembers!
  getAllCompanyMembers(companyMemberFilter: companyMemberFilter): [CompanyMembers!]!
}
extend type Mutation {
  createCompanyMember(input: createCompanyMemberInput!): CompanyMembers!
  updateCompanyMember(input: updateCompanyMemberInput!): CompanyMembers!
}
`, BuiltIn: false},
	{Name: "../schema/content/content.graphqls", Input: `type Contents {
  id: ID!
  campaignId: ID!
  contentType: ContentType
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

enum ContentType {
  ImageMediaGroup
  JustText
}
input createContentInput {
  campaignId: ID!
  contentType: ContentType
  description: String
}

input updateContentInput {
  id: ID!
  contentType: ContentType
  description: String
}
extend type Query {
  contentById(id: ID!): Contents!
}
extend type Mutation {
  createContent(input: createContentInput!): Contents!
  updateContent(input: updateContentInput!): Contents!
}
`, BuiltIn: false},
	{Name: "../schema/contentLink/contentLink.graphqls", Input: `type ContentLinks {
  contentId: ID!
  link: String
  title: String
}
input createContentLinkInput {
  contentId: ID!
  link: String
  title: String
}
input updateContentLinkInput {
  contentId: ID!
  link: String
  title: String
}

extend type Query {
  contentLinkById(id: ID!): ContentLinks!
}
extend type Mutation {
  createContentLink(input: createContentLinkInput!): ContentLinks!
  updateContentLink(input: updateContentLinkInput!): ContentLinks!
}
`, BuiltIn: false},
	{Name: "../schema/funding/funding.graphqls", Input: `type Funding {
  id: ID!
  companyId: ID!
  amount: Float!
  currency: String
  key: String!
  method: String
  fundingTxRef: String
  reference: String
  paymentDate: Timestamp
  redirectUrl: String
  status: FundingStatus
  extra: Any
  log: Any
  tax: String!
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

input createFundingInput {
  companyId: ID!
  amount: Float!
  currency: String
  key: String!
  method: String
  fundingTxRef: String
  reference: String
  paymentDate: Timestamp
  redirectUrl: String
  status: FundingStatus
  extra: Any
  log: Any
  tax: String!
}

input updateFundingInput {
  id: ID!
  amount: Float
  currency: String
  key: String
  method: String
  fundingTxRef: String
  reference: String
  paymentDate: Timestamp
  redirectUrl: String
  status: FundingStatus
  extra: Any
  log: Any
  tax: String
}
input fundingFilter {
  companyId: ID
  status: [FundingStatus!]
  amount: minMaxFilterInput
  currency: String
  filter: FilterInput
}
enum FundingStatus {
  Processing
  Successful
  Failed
}

extend type Query {
  fundingById(id: ID!): Funding!
  getAllFunding(fundingFilter: fundingFilter): [Funding!]!
}
extend type Mutation {
  createFunding(input: createFundingInput!): Funding!
  updateFunding(input: updateFundingInput!): Funding!
}
`, BuiltIn: false},
	{Name: "../schema/hourlyRate/hourlyRate.graphqls", Input: `type HourlyRates {
  id: String!
  channelId: String!
  active: Boolean
  hourlyRate: Float
  minHourlyVolume: Float
  maxHourlyVolume: Float
  createdAt: Timestamp
  removeAt: Timestamp
}

input createHourlyRateInput {
  channelId: String!
  active: Boolean
  hourlyRate: Float
  minHourlyVolume: Float
  maxHourlyVolume: Float
}
input updateHourlyRateInput {
  id: ID!
  active: Boolean
  hourlyRate: Float
  minHourlyVolume: Float
  maxHourlyVolume: Float
}
extend type Query {
  HourlyRateById(id: ID!): HourlyRates!
}
extend type Mutation {
  createHourlyRate(input: createHourlyRateInput!): HourlyRates!
  updateHourlyRate(input: updateHourlyRateInput!): HourlyRates!
}
`, BuiltIn: false},
	{Name: "../schema/language/language.graphqls", Input: `type Languages {
  language: ID!
}
input createLanguageInput {
  language: String!
}

input languageFilter {
  filter: FilterInput
}
extend type Query {
  languageById(id: ID!): Languages!
  getAllLanguages(languageFilter: languageFilter): [Languages!]!
}

extend type Mutation {
  createLanguage(input: createLanguageInput!): Languages!
}
`, BuiltIn: false},
	{Name: "../schema/location/location.graphqls", Input: `type Locations {
  id: ID!
  country: String!
  state: String!
  city: String!
  address: String
  postalCode: String
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createLocationInput {
  country: String!
  state: String!
  city: String!
  address: String
  postalCode: String
}
input updateLocationInput {
  id: ID!
  country: String
  state: String
  city: String
  address: String
  postalCode: String
}
extend type Query {
  locationById(id: ID!): Locations!
}
extend type Mutation {
  createLocation(input: createLocationInput!): Locations!
  updateLocation(input: updateLocationInput!): Locations!
}
`, BuiltIn: false},
	{Name: "../schema/user/user.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  text: String!
  done: Boolean!
}
`, BuiltIn: false},
	{Name: "../schema/withdrawal/withdrawal.graphqls", Input: `type Withdrawals {
  id: ID!
  accountId: ID!
  accountBankId: ID!
  totalAmount: Float!
  currency: String
  fundingKey: String
  method: String
  reference: String
  paymentDate: Timestamp
  status: Status
  extra: Any
  log: Any
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}
input createWithdrawalInput {
  accountId: ID!
  accountBankId: ID!
  totalAmount: Float!
  currency: String
  fundingKey: String
  method: String
  reference: String
  paymentDate: Timestamp
  status: Status
  extra: Any
  log: Any
}

input updateWithdrawalInput {
  id: ID!
  totalAmount: Float
  currency: String
  fundingKey: String
  method: String
  reference: String
  paymentDate: Timestamp
  status: Status
  extra: Any
  log: Any
}
input withdrawalFilter {
  accountId: ID
  accountBankId: ID
  status: [Status!]
  totalAmount: minMaxFilterInput
  currency: String
  filter: FilterInput
}
enum Status {
  Processing
  Successful
  Failed
}
extend type Query {
  withdrawalById(id: ID!): Withdrawals!
  getAllWithdrawals(withdrawalFilter: withdrawalFilter): [Withdrawals!]!
}

extend type Mutation {
  createWithdrawal(input: createWithdrawalInput!): Withdrawals!
  updateWithdrawal(input: updateWithdrawalInput!): Withdrawals!
}
`, BuiltIn: false},
	{Name: "../schema/withdrawalChannelLink/withdrawalChannelLink.graphqls", Input: `type WithdrawalChannelLinks {
  withdrawalId: ID!
  channelBalanceId: ID!
}

input WithdrawalChannelLinkInput {
  withdrawalId: ID!
  channelBalanceId: ID!
}

input WithdrawalChannelLinkFilter {
  channelBalanceId: ID
  filter: FilterInput
}

extend type Query {
  withdrawalChannelLinkById(withdrawalId: ID!): WithdrawalChannelLinks!
  withdrawalChannelLink(
    withdrawalChannelLinkInput: WithdrawalChannelLinkInput
  ): WithdrawalChannelLinks!
  getAllWithdrawalChannelLinks(
    withdrawalChannelLinkFilter: WithdrawalChannelLinkFilter
  ): [WithdrawalChannelLinks!]!
}

extend type Mutation {
  createWithdrawalChannelLink(
    input: WithdrawalChannelLinkInput!
  ): WithdrawalChannelLinks!
  deleteWithdrawalChannelLink(
    withdrawalChannelLinkInput: WithdrawalChannelLinkInput
  ): DeletionResult!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Channels_categories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Channels_languages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccountBanking_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAccountBankingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAccountBankingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAccountBankingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAccountInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAdPaymentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAdPaymentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdPaymentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdvertisementCPM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAdvertisementCPMInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAdvertisementCPMInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementCPMInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdvertisementResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAdvertisementResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAdvertisementResultInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdvertisement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAdvertisementInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAdvertisementInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAudienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateAudienceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAudienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBank_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBankInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateBankInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateBankInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBudget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateBudgetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateBudgetInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateBudgetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCPMRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCPMRateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCPMRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCPMRateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCampaignInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCampaignInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCampaignInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCategoryInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateChannelBalanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateChannelBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChannelCategoryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNchannelCategoryInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelCollectedAdLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChannelCollectedAdLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNchannelCollectedAdLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelContentLanguage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChannelContentLanguageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNchannelContentLanguageInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateChannelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateChannelDetailInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannelLifeTimeBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateChannelLifeTimeBalanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateChannelLifeTimeBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelLifeTimeBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateChannelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateChannelInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanyBanking_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyBankingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCompanyBankingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyBankingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanyLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCompanyLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompanyMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCompanyMemberInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateCompanyInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createContentLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateContentLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateContentLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateContentLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateContentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateContentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateContentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFunding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateFundingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateFundingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateFundingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHourlyRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateHourlyRateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateHourlyRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateHourlyRateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLanguage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateLanguageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateLanguageInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateLanguageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWithdrawalChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.WithdrawalChannelLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNWithdrawalChannelLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWithdrawal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateWithdrawalInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNcreateWithdrawalInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateWithdrawalInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAccountBanking_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBank_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelCategoryInput
	if tmp, ok := rawArgs["channelCategoryInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCategoryInput"))
		arg0, err = ec.unmarshalOchannelCategoryInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelCategoryInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelCollectedAdLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelCollectedAdLinkInput
	if tmp, ok := rawArgs["channelCollectedAdLinkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCollectedAdLinkInput"))
		arg0, err = ec.unmarshalOchannelCollectedAdLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelCollectedAdLinkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannelContentLanguage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelContentLanguageInput
	if tmp, ok := rawArgs["channelContentLanguageInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelContentLanguageInput"))
		arg0, err = ec.unmarshalOchannelContentLanguageInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelContentLanguageInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompanyBanking_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCompanyLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["companyId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["companyId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["locationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWithdrawalChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.WithdrawalChannelLinkInput
	if tmp, ok := rawArgs["withdrawalChannelLinkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalChannelLinkInput"))
		arg0, err = ec.unmarshalOWithdrawalChannelLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdrawalChannelLinkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAccountInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAccountInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAccountInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAdPaymentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAdPaymentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdPaymentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdvertisementCPM_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAdvertisementCPMInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAdvertisementCPMInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementCPMInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdvertisementResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAdvertisementResultInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAdvertisementResultInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementResultInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdvertisement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAdvertisementInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAdvertisementInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAudience_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAudienceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateAudienceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAudienceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBank_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBankInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateBankInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateBankInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBudget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateBudgetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateBudgetInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateBudgetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCPMRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCPMRateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateCPMRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCPMRateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCampaignInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateCampaignInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCampaignInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateChannelBalanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateChannelBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelDetail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateChannelDetailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateChannelDetailInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelDetailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannelLifeTimeBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateChannelLifeTimeBalanceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateChannelLifeTimeBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelLifeTimeBalanceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateChannel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateChannelInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateChannelInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompanyMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCompanyMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateCompanyMemberInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCompanyMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateCompanyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateCompanyInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCompanyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateContentLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateContentLinkInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateContentLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateContentLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateContentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateContentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateContentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFunding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateFundingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateFundingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateFundingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHourlyRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateHourlyRateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateHourlyRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateHourlyRateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWithdrawal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateWithdrawalInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateWithdrawalInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateWithdrawalInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_HourlyRateById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accountBankingById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_accountById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_adPaymentById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["advertisementId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["advertisementId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_advertisementById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_advertisementCPMById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_advertisementResultById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_audienceById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_bankById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_budgetById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_campaignById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_categoryById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelBalanceById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelCollectedAdLinkById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["adPaymentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adPaymentId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["adPaymentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelCollectedAdLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelCollectedAdLinkInput
	if tmp, ok := rawArgs["channelCollectedAdLinkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCollectedAdLinkInput"))
		arg0, err = ec.unmarshalOchannelCollectedAdLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelCollectedAdLinkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelDetailById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_channelLifeTimeBalanceById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_companyBankingById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_companyById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_companyLocationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["companyId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["companyId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["locationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_companyMemberById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contentById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contentLinkById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_cpmRateByChannelId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["channelId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fundingById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllAccountBankings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AccountBankingsFilter
	if tmp, ok := rawArgs["accountBankingsFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountBankingsFilter"))
		arg0, err = ec.unmarshalNaccountBankingsFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBankingsFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountBankingsFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllAdPayments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AdPaymentFilter
	if tmp, ok := rawArgs["adPaymentFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adPaymentFilter"))
		arg0, err = ec.unmarshalOadPaymentFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPaymentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["adPaymentFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllAdvertisements_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AdvertisementFilter
	if tmp, ok := rawArgs["advertisementFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementFilter"))
		arg0, err = ec.unmarshalOadvertisementFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["advertisementFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllBanks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BankFilter
	if tmp, ok := rawArgs["bankFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankFilter"))
		arg0, err = ec.unmarshalNbankFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBankFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bankFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllCampaigns_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CampaignFilter
	if tmp, ok := rawArgs["campaignFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignFilter"))
		arg0, err = ec.unmarshalOcampaignFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaignFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["campaignFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllCategories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CategoryFilter
	if tmp, ok := rawArgs["categoryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryFilter"))
		arg0, err = ec.unmarshalOcategoryFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllChannelCategories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelCategoryFilter
	if tmp, ok := rawArgs["channelCategoryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCategoryFilter"))
		arg0, err = ec.unmarshalOchannelCategoryFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelCategoryFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllChannelCollectedAdLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelCollectedAdLinkFilter
	if tmp, ok := rawArgs["channelCollectedAdLinkFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCollectedAdLinkFilter"))
		arg0, err = ec.unmarshalOchannelCollectedAdLinkFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelCollectedAdLinkFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllChannelContentLanguages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelContentLanguageFilter
	if tmp, ok := rawArgs["channelContentLanguageFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelContentLanguageFilter"))
		arg0, err = ec.unmarshalOchannelContentLanguageFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelContentLanguageFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllChannelDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelDetailFilter
	if tmp, ok := rawArgs["channelDetailFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelDetailFilter"))
		arg0, err = ec.unmarshalOchannelDetailFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetailFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelDetailFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllChannels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ChannelFilter
	if tmp, ok := rawArgs["channelFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelFilter"))
		arg0, err = ec.unmarshalOchannelFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["channelFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllCompanyBankings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CompanyBankingFilter
	if tmp, ok := rawArgs["companyBankingsFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyBankingsFilter"))
		arg0, err = ec.unmarshalNcompanyBankingFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["companyBankingsFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllCompanyMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CompanyMemberFilter
	if tmp, ok := rawArgs["companyMemberFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyMemberFilter"))
		arg0, err = ec.unmarshalOcompanyMemberFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMemberFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["companyMemberFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllFunding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.FundingFilter
	if tmp, ok := rawArgs["fundingFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingFilter"))
		arg0, err = ec.unmarshalOfundingFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fundingFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllLanguages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.LanguageFilter
	if tmp, ok := rawArgs["languageFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languageFilter"))
		arg0, err = ec.unmarshalOlanguageFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["languageFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllWithdrawalChannelLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.WithdrawalChannelLinkFilter
	if tmp, ok := rawArgs["withdrawalChannelLinkFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalChannelLinkFilter"))
		arg0, err = ec.unmarshalOWithdrawalChannelLinkFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdrawalChannelLinkFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllWithdrawals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.WithdrawalFilter
	if tmp, ok := rawArgs["withdrawalFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalFilter"))
		arg0, err = ec.unmarshalOwithdrawalFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdrawalFilter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_languageById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_locationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_withdrawalById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_withdrawalChannelLinkById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["withdrawalId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdrawalId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_withdrawalChannelLink_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.WithdrawalChannelLinkInput
	if tmp, ok := rawArgs["withdrawalChannelLinkInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalChannelLinkInput"))
		arg0, err = ec.unmarshalOWithdrawalChannelLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["withdrawalChannelLinkInput"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Account_id(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_userId(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_userName(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_userName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_userName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_email(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_fullName(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_birthDate(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_birthDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_birthDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_accountType(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_accountType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AccountType)
	fc.Result = res
	return ec.marshalOAccountType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_accountType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AccountType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Account_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Account) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Account_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Account_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Account",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_id(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_accountId(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_bankId(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_bankId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_bankId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_fullNameOnBank(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_fullNameOnBank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullNameOnBank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_fullNameOnBank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_bankAccount(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_bankAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_bankAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_currency(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccountBanking_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.AccountBanking) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccountBanking_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccountBanking_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccountBanking",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_id(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_advertisementId(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_advertisementId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertisementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_advertisementId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_accountId(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_campaignId(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_campaignId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_campaignId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_channelId(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_amount(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_currency(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_completionTime(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_completionTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_completionTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdPayments_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.AdPayments) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdPayments_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdPayments_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdPayments",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_advertisementId(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_advertisementId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertisementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_advertisementId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_Rate(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_Rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_Rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_channelShare(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_channelShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_channelShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_providerShare(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_providerShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_providerShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_totalBudget(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_totalBudget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBudget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_totalBudget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_maxLifeCycle(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_maxLifeCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLifeCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_maxLifeCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementCPMs_requiredViews(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementCPMs) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementCPMs_requiredViews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredViews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementCPMs_requiredViews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementCPMs",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_advertisementId(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_advertisementId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdvertisementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_advertisementId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNTimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_budget(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_budget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Budget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_budget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_providerBudgetShare(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_providerBudgetShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderBudgetShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_providerBudgetShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_channelBudgetShare(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_channelBudgetShare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelBudgetShare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_channelBudgetShare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_totalHour(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_totalHour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_totalHour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_totalClick(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_totalClick(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalClick, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_totalClick(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_totalViews(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_totalViews(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalViews, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_totalViews(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_totalForward(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_totalForward(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalForward, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_totalForward(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdvertisementResults_totalReaction(ctx context.Context, field graphql.CollectedField, obj *model.AdvertisementResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdvertisementResults_totalReaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalReaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdvertisementResults_totalReaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdvertisementResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_id(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_campaignId(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_campaignId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_campaignId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_contentId(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_contentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_contentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_channelId(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_messageId(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_messageId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_messageId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_status(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AdStatus)
	fc.Result = res
	return ec.marshalOAdStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AdStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Advertisements_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Advertisements) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Advertisements_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Advertisements_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Advertisements",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audiences_campaignId(ctx context.Context, field graphql.CollectedField, obj *model.Audiences) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audiences_campaignId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audiences_campaignId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audiences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audiences_category(ctx context.Context, field graphql.CollectedField, obj *model.Audiences) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audiences_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audiences_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audiences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Audiences_language(ctx context.Context, field graphql.CollectedField, obj *model.Audiences) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Audiences_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Audiences_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Audiences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_id(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_bankName(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_bankName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_bankName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_bankCode(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_bankCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_bankCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Banks_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Banks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Banks_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Banks_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Banks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Budgets_campaignId(ctx context.Context, field graphql.CollectedField, obj *model.Budgets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Budgets_campaignId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Budgets_campaignId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Budgets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Budgets_initialAmount(ctx context.Context, field graphql.CollectedField, obj *model.Budgets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Budgets_initialAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Budgets_initialAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Budgets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Budgets_usedAmount(ctx context.Context, field graphql.CollectedField, obj *model.Budgets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Budgets_usedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Budgets_usedAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Budgets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Budgets_refundedAmount(ctx context.Context, field graphql.CollectedField, obj *model.Budgets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Budgets_refundedAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefundedAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Budgets_refundedAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Budgets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Budgets_currency(ctx context.Context, field graphql.CollectedField, obj *model.Budgets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Budgets_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Budgets_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Budgets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_id(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_companyId(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_companyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_name(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_objective(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_objective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Objective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectiveType)
	fc.Result = res
	return ec.marshalOObjectiveType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_objective(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectiveType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_startDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Campaigns_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Campaigns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Campaigns_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Campaigns_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Campaigns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Categories_category(ctx context.Context, field graphql.CollectedField, obj *model.Categories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Categories_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Categories_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Categories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_id(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_accountId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_channelId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_amount(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_currency(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBalances_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBalances_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBalances_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelCategories_id(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCategories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelCategories_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelCategories_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelCategories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelCategories_channelId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCategories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelCategories_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelCategories_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelCategories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelCategories_category(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCategories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelCategories_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelCategories_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelCategories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelCollectedAdLinks_channelBalanceId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCollectedAdLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelBalanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelCollectedAdLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelCollectedAdLinks_adPaymentId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelCollectedAdLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdPaymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelCollectedAdLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelContentLanguages_id(ctx context.Context, field graphql.CollectedField, obj *model.ChannelContentLanguages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelContentLanguages_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelContentLanguages_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelContentLanguages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelContentLanguages_channelId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelContentLanguages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelContentLanguages_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelContentLanguages_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelContentLanguages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelContentLanguages_language(ctx context.Context, field graphql.CollectedField, obj *model.ChannelContentLanguages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelContentLanguages_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelContentLanguages_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelContentLanguages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_channelId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_subCount(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_subCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_subCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_averagePostView(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AveragePostView, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_averagePostView(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_postToSubRatio(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostToSubRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_postToSubRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_PostFrequency(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_PostFrequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_lastPostId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_lastPostId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_lastPost(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_lastPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_lastPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_collectedDate(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollectedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_collectedDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelDetails_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelDetails_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_id(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_accountId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_channelId(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_totalAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_currency(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_totalHour(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_totalHour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalHour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_totalHour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_totalAd(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_totalAd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_totalAd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelLifeTimeBalances_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.ChannelLifeTimeBalances) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelLifeTimeBalances_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelLifeTimeBalances_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelLifeTimeBalances",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_id(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_ownerId(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_ownerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_ownerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_userName(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_userName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_userName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_name(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_description(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_botAddAsAdmin(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_botAddAsAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotAddAsAdmin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_botAddAsAdmin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_channelCreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_channelCreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelCreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_channelCreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_country(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_currency(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_cpmRating(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_cpmRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channels().CpmRating(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CpmRates)
	fc.Result = res
	return ec.marshalOcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_cpmRating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_cpmRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_cpmRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_cpmRates_active(ctx, field)
			case "CPM":
				return ec.fieldContext_cpmRates_CPM(ctx, field)
			case "minCPMVolume":
				return ec.fieldContext_cpmRates_minCPMVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_cpmRates_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_cpmRates_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type cpmRates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_categories(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channels().Categories(rctx, obj, fc.Args["filter"].(*model.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelCategories)
	fc.Result = res
	return ec.marshalOChannelCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelCategories_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelCategories_channelId(ctx, field)
			case "category":
				return ec.fieldContext_ChannelCategories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCategories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Channels_categories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Channels_languages(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channels().Languages(rctx, obj, fc.Args["filter"].(*model.FilterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelContentLanguages)
	fc.Result = res
	return ec.marshalOChannelContentLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_languages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelContentLanguages_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelContentLanguages_channelId(ctx, field)
			case "language":
				return ec.fieldContext_ChannelContentLanguages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelContentLanguages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Channels_languages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Channels_channelDetails(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_channelDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Channels().ChannelDetails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ChannelDetails)
	fc.Result = res
	return ec.marshalOChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_channelDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelId":
				return ec.fieldContext_ChannelDetails_channelId(ctx, field)
			case "subCount":
				return ec.fieldContext_ChannelDetails_subCount(ctx, field)
			case "averagePostView":
				return ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
			case "postToSubRatio":
				return ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
			case "PostFrequency":
				return ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
			case "lastPostId":
				return ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
			case "lastPost":
				return ec.fieldContext_ChannelDetails_lastPost(ctx, field)
			case "collectedDate":
				return ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelDetails_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Channels_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Channels) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Channels_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Channels_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Channels",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_id(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_creatorId(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_creatorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_creatorId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_name(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_uniqueName(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_uniqueName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UniqueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_uniqueName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_tinNumber(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_tinNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TinNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_tinNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_vatNumber(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_vatNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VatNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_vatNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Companies_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Companies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Companies_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Companies_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Companies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_id(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_companyId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_companyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_bankId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_bankId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_bankId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_fullNameOnBank(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_fullNameOnBank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullNameOnBank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_fullNameOnBank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_bankAccount(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_bankAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_bankAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_currency(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyBankings_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyBankings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyBankings_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyBankings_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyBankings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocations_companyId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocations_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocations_companyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyLocations_locationId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyLocations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyLocations_locationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyLocations_locationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyLocations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_id(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_accountId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_companyId(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_companyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_role(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CompanyRole)
	fc.Result = res
	return ec.marshalOCompanyRole2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompanyRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyMembers_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyMembers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyMembers_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyMembers_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyMembers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentLinks_contentId(ctx context.Context, field graphql.CollectedField, obj *model.ContentLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentLinks_contentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentLinks_contentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentLinks_link(ctx context.Context, field graphql.CollectedField, obj *model.ContentLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentLinks_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentLinks_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentLinks_title(ctx context.Context, field graphql.CollectedField, obj *model.ContentLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentLinks_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentLinks_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_id(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_campaignId(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_campaignId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_campaignId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_contentType(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContentType)
	fc.Result = res
	return ec.marshalOContentType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContentType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_description(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contents_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contents_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contents_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletionResult_success(ctx context.Context, field graphql.CollectedField, obj *model.DeletionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletionResult_success(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletionResult_success(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletionResult_message(ctx context.Context, field graphql.CollectedField, obj *model.DeletionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletionResult_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletionResult_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_id(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_companyId(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_companyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_companyId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_amount(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_currency(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_key(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_method(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_fundingTxRef(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_fundingTxRef(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingTxRef, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_fundingTxRef(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_reference(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_paymentDate(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_paymentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_paymentDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_redirectUrl(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_redirectUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_redirectUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_status(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FundingStatus)
	fc.Result = res
	return ec.marshalOFundingStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_extra(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_extra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Funding().Extra(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_extra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_log(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_log(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Funding().Log(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_log(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_tax(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_tax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_tax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Funding_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Funding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Funding_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Funding_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Funding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_id(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_channelId(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_active(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_hourlyRate(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_hourlyRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HourlyRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_hourlyRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_minHourlyVolume(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_minHourlyVolume(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinHourlyVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_minHourlyVolume(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_maxHourlyVolume(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_maxHourlyVolume(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxHourlyVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_maxHourlyVolume(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HourlyRates_removeAt(ctx context.Context, field graphql.CollectedField, obj *model.HourlyRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HourlyRates_removeAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemoveAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HourlyRates_removeAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HourlyRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Languages_language(ctx context.Context, field graphql.CollectedField, obj *model.Languages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Languages_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Languages_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Languages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_id(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_country(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_state(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_city(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_address(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_postalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_postalCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Locations_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Locations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Locations_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Locations_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Locations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccount(rctx, fc.Args["input"].(model.CreateAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "userId":
				return ec.fieldContext_Account_userId(ctx, field)
			case "userName":
				return ec.fieldContext_Account_userName(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Account_phoneNumber(ctx, field)
			case "fullName":
				return ec.fieldContext_Account_fullName(ctx, field)
			case "birthDate":
				return ec.fieldContext_Account_birthDate(ctx, field)
			case "accountType":
				return ec.fieldContext_Account_accountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAccount(rctx, fc.Args["input"].(model.UpdateAccountInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "userId":
				return ec.fieldContext_Account_userId(ctx, field)
			case "userName":
				return ec.fieldContext_Account_userName(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Account_phoneNumber(ctx, field)
			case "fullName":
				return ec.fieldContext_Account_fullName(ctx, field)
			case "birthDate":
				return ec.fieldContext_Account_birthDate(ctx, field)
			case "accountType":
				return ec.fieldContext_Account_accountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCPMRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCPMRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCPMRate(rctx, fc.Args["input"].(model.CreateCPMRateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CpmRates)
	fc.Result = res
	return ec.marshalNcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCPMRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_cpmRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_cpmRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_cpmRates_active(ctx, field)
			case "CPM":
				return ec.fieldContext_cpmRates_CPM(ctx, field)
			case "minCPMVolume":
				return ec.fieldContext_cpmRates_minCPMVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_cpmRates_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_cpmRates_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type cpmRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCPMRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCPMRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCPMRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCPMRate(rctx, fc.Args["input"].(model.UpdateCPMRateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CpmRates)
	fc.Result = res
	return ec.marshalNcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCPMRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_cpmRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_cpmRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_cpmRates_active(ctx, field)
			case "CPM":
				return ec.fieldContext_cpmRates_CPM(ctx, field)
			case "minCPMVolume":
				return ec.fieldContext_cpmRates_minCPMVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_cpmRates_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_cpmRates_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type cpmRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCPMRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAccountBanking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAccountBanking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAccountBanking(rctx, fc.Args["input"].(model.CreateAccountBankingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccountBanking)
	fc.Result = res
	return ec.marshalNAccountBanking2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBanking(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAccountBanking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountBanking_id(ctx, field)
			case "accountId":
				return ec.fieldContext_AccountBanking_accountId(ctx, field)
			case "bankId":
				return ec.fieldContext_AccountBanking_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_AccountBanking_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_AccountBanking_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_AccountBanking_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountBanking_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountBanking_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AccountBanking_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountBanking", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAccountBanking_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAccountBanking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAccountBanking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAccountBanking(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAccountBanking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAccountBanking_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAdPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAdPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdPayment(rctx, fc.Args["input"].(model.CreateAdPaymentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdPayments)
	fc.Result = res
	return ec.marshalNAdPayments2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAdPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdPayments_id(ctx, field)
			case "advertisementId":
				return ec.fieldContext_AdPayments_advertisementId(ctx, field)
			case "accountId":
				return ec.fieldContext_AdPayments_accountId(ctx, field)
			case "campaignId":
				return ec.fieldContext_AdPayments_campaignId(ctx, field)
			case "channelId":
				return ec.fieldContext_AdPayments_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_AdPayments_amount(ctx, field)
			case "currency":
				return ec.fieldContext_AdPayments_currency(ctx, field)
			case "completionTime":
				return ec.fieldContext_AdPayments_completionTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdPayments_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdPayments_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdPayments_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAdPayment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAdPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAdPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdPayment(rctx, fc.Args["input"].(model.UpdateAdPaymentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdPayments)
	fc.Result = res
	return ec.marshalNAdPayments2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAdPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdPayments_id(ctx, field)
			case "advertisementId":
				return ec.fieldContext_AdPayments_advertisementId(ctx, field)
			case "accountId":
				return ec.fieldContext_AdPayments_accountId(ctx, field)
			case "campaignId":
				return ec.fieldContext_AdPayments_campaignId(ctx, field)
			case "channelId":
				return ec.fieldContext_AdPayments_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_AdPayments_amount(ctx, field)
			case "currency":
				return ec.fieldContext_AdPayments_currency(ctx, field)
			case "completionTime":
				return ec.fieldContext_AdPayments_completionTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdPayments_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdPayments_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdPayments_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAdPayment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAdvertisementCPM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAdvertisementCPM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdvertisementCpm(rctx, fc.Args["input"].(model.CreateAdvertisementCPMInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementCPMs)
	fc.Result = res
	return ec.marshalNAdvertisementCPMs2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementCPMs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAdvertisementCPM(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementCPMs_advertisementId(ctx, field)
			case "Rate":
				return ec.fieldContext_AdvertisementCPMs_Rate(ctx, field)
			case "channelShare":
				return ec.fieldContext_AdvertisementCPMs_channelShare(ctx, field)
			case "providerShare":
				return ec.fieldContext_AdvertisementCPMs_providerShare(ctx, field)
			case "totalBudget":
				return ec.fieldContext_AdvertisementCPMs_totalBudget(ctx, field)
			case "maxLifeCycle":
				return ec.fieldContext_AdvertisementCPMs_maxLifeCycle(ctx, field)
			case "requiredViews":
				return ec.fieldContext_AdvertisementCPMs_requiredViews(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementCPMs", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAdvertisementCPM_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAdvertisementCPM(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAdvertisementCPM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdvertisementCpm(rctx, fc.Args["input"].(model.UpdateAdvertisementCPMInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementCPMs)
	fc.Result = res
	return ec.marshalNAdvertisementCPMs2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementCPMs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAdvertisementCPM(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementCPMs_advertisementId(ctx, field)
			case "Rate":
				return ec.fieldContext_AdvertisementCPMs_Rate(ctx, field)
			case "channelShare":
				return ec.fieldContext_AdvertisementCPMs_channelShare(ctx, field)
			case "providerShare":
				return ec.fieldContext_AdvertisementCPMs_providerShare(ctx, field)
			case "totalBudget":
				return ec.fieldContext_AdvertisementCPMs_totalBudget(ctx, field)
			case "maxLifeCycle":
				return ec.fieldContext_AdvertisementCPMs_maxLifeCycle(ctx, field)
			case "requiredViews":
				return ec.fieldContext_AdvertisementCPMs_requiredViews(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementCPMs", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAdvertisementCPM_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAdvertisementResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAdvertisementResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdvertisementResult(rctx, fc.Args["input"].(model.CreateAdvertisementResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementResults)
	fc.Result = res
	return ec.marshalNAdvertisementResults2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementResults(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAdvertisementResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementResults_advertisementId(ctx, field)
			case "startedAt":
				return ec.fieldContext_AdvertisementResults_startedAt(ctx, field)
			case "budget":
				return ec.fieldContext_AdvertisementResults_budget(ctx, field)
			case "providerBudgetShare":
				return ec.fieldContext_AdvertisementResults_providerBudgetShare(ctx, field)
			case "channelBudgetShare":
				return ec.fieldContext_AdvertisementResults_channelBudgetShare(ctx, field)
			case "totalHour":
				return ec.fieldContext_AdvertisementResults_totalHour(ctx, field)
			case "totalClick":
				return ec.fieldContext_AdvertisementResults_totalClick(ctx, field)
			case "totalViews":
				return ec.fieldContext_AdvertisementResults_totalViews(ctx, field)
			case "totalForward":
				return ec.fieldContext_AdvertisementResults_totalForward(ctx, field)
			case "totalReaction":
				return ec.fieldContext_AdvertisementResults_totalReaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementResults", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAdvertisementResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAdvertisementResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAdvertisementResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdvertisementResult(rctx, fc.Args["input"].(model.UpdateAdvertisementResultInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementResults)
	fc.Result = res
	return ec.marshalNAdvertisementResults2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementResults(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAdvertisementResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementResults_advertisementId(ctx, field)
			case "startedAt":
				return ec.fieldContext_AdvertisementResults_startedAt(ctx, field)
			case "budget":
				return ec.fieldContext_AdvertisementResults_budget(ctx, field)
			case "providerBudgetShare":
				return ec.fieldContext_AdvertisementResults_providerBudgetShare(ctx, field)
			case "channelBudgetShare":
				return ec.fieldContext_AdvertisementResults_channelBudgetShare(ctx, field)
			case "totalHour":
				return ec.fieldContext_AdvertisementResults_totalHour(ctx, field)
			case "totalClick":
				return ec.fieldContext_AdvertisementResults_totalClick(ctx, field)
			case "totalViews":
				return ec.fieldContext_AdvertisementResults_totalViews(ctx, field)
			case "totalForward":
				return ec.fieldContext_AdvertisementResults_totalForward(ctx, field)
			case "totalReaction":
				return ec.fieldContext_AdvertisementResults_totalReaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementResults", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAdvertisementResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAdvertisement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAdvertisement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdvertisement(rctx, fc.Args["input"].(model.CreateAdvertisementInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Advertisements)
	fc.Result = res
	return ec.marshalNAdvertisements2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAdvertisement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Advertisements_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Advertisements_campaignId(ctx, field)
			case "contentId":
				return ec.fieldContext_Advertisements_contentId(ctx, field)
			case "channelId":
				return ec.fieldContext_Advertisements_channelId(ctx, field)
			case "messageId":
				return ec.fieldContext_Advertisements_messageId(ctx, field)
			case "status":
				return ec.fieldContext_Advertisements_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Advertisements_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Advertisements_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Advertisements_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Advertisements", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAdvertisement_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAdvertisement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAdvertisement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdvertisement(rctx, fc.Args["input"].(model.UpdateAdvertisementInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Advertisements)
	fc.Result = res
	return ec.marshalNAdvertisements2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAdvertisement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Advertisements_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Advertisements_campaignId(ctx, field)
			case "contentId":
				return ec.fieldContext_Advertisements_contentId(ctx, field)
			case "channelId":
				return ec.fieldContext_Advertisements_channelId(ctx, field)
			case "messageId":
				return ec.fieldContext_Advertisements_messageId(ctx, field)
			case "status":
				return ec.fieldContext_Advertisements_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Advertisements_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Advertisements_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Advertisements_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Advertisements", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAdvertisement_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAudience(rctx, fc.Args["input"].(model.CreateAudienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audiences)
	fc.Result = res
	return ec.marshalNAudiences2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAudiences(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Audiences_campaignId(ctx, field)
			case "category":
				return ec.fieldContext_Audiences_category(ctx, field)
			case "language":
				return ec.fieldContext_Audiences_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audiences", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAudience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAudience(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAudience(rctx, fc.Args["input"].(model.UpdateAudienceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audiences)
	fc.Result = res
	return ec.marshalNAudiences2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAudiences(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Audiences_campaignId(ctx, field)
			case "category":
				return ec.fieldContext_Audiences_category(ctx, field)
			case "language":
				return ec.fieldContext_Audiences_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audiences", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAudience_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBank(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createBank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBank(rctx, fc.Args["input"].(model.CreateBankInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Banks)
	fc.Result = res
	return ec.marshalNBanks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createBank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Banks_id(ctx, field)
			case "bankName":
				return ec.fieldContext_Banks_bankName(ctx, field)
			case "bankCode":
				return ec.fieldContext_Banks_bankCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Banks_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Banks_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Banks_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Banks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBank_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBank(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBank(rctx, fc.Args["input"].(model.UpdateBankInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Banks)
	fc.Result = res
	return ec.marshalNBanks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Banks_id(ctx, field)
			case "bankName":
				return ec.fieldContext_Banks_bankName(ctx, field)
			case "bankCode":
				return ec.fieldContext_Banks_bankCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Banks_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Banks_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Banks_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Banks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBank_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteBank(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteBank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBank(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteBank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteBank_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createBudget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createBudget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBudget(rctx, fc.Args["input"].(model.CreateBudgetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Budgets)
	fc.Result = res
	return ec.marshalNBudgets2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBudgets(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createBudget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Budgets_campaignId(ctx, field)
			case "initialAmount":
				return ec.fieldContext_Budgets_initialAmount(ctx, field)
			case "usedAmount":
				return ec.fieldContext_Budgets_usedAmount(ctx, field)
			case "refundedAmount":
				return ec.fieldContext_Budgets_refundedAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Budgets_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Budgets", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createBudget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateBudget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateBudget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBudget(rctx, fc.Args["input"].(model.UpdateBudgetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Budgets)
	fc.Result = res
	return ec.marshalNBudgets2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBudgets(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateBudget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Budgets_campaignId(ctx, field)
			case "initialAmount":
				return ec.fieldContext_Budgets_initialAmount(ctx, field)
			case "usedAmount":
				return ec.fieldContext_Budgets_usedAmount(ctx, field)
			case "refundedAmount":
				return ec.fieldContext_Budgets_refundedAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Budgets_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Budgets", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateBudget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCampaign(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCampaign(rctx, fc.Args["input"].(model.CreateCampaignInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaigns)
	fc.Result = res
	return ec.marshalNCampaigns2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCampaign(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Campaigns_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Campaigns_companyId(ctx, field)
			case "name":
				return ec.fieldContext_Campaigns_name(ctx, field)
			case "objective":
				return ec.fieldContext_Campaigns_objective(ctx, field)
			case "startDate":
				return ec.fieldContext_Campaigns_startDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Campaigns_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Campaigns_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Campaigns_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Campaigns", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCampaign_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCampaign(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCampaign(rctx, fc.Args["input"].(model.UpdateCampaignInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaigns)
	fc.Result = res
	return ec.marshalNCampaigns2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCampaign(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Campaigns_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Campaigns_companyId(ctx, field)
			case "name":
				return ec.fieldContext_Campaigns_name(ctx, field)
			case "objective":
				return ec.fieldContext_Campaigns_objective(ctx, field)
			case "startDate":
				return ec.fieldContext_Campaigns_startDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Campaigns_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Campaigns_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Campaigns_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Campaigns", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCampaign_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCampaign(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCampaign(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCampaign(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCampaign_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCategory(rctx, fc.Args["input"].(model.CreateCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Categories)
	fc.Result = res
	return ec.marshalNCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_Categories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannel(rctx, fc.Args["input"].(model.CreateChannelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channels)
	fc.Result = res
	return ec.marshalNChannels2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Channels_id(ctx, field)
			case "ownerId":
				return ec.fieldContext_Channels_ownerId(ctx, field)
			case "userName":
				return ec.fieldContext_Channels_userName(ctx, field)
			case "name":
				return ec.fieldContext_Channels_name(ctx, field)
			case "description":
				return ec.fieldContext_Channels_description(ctx, field)
			case "botAddAsAdmin":
				return ec.fieldContext_Channels_botAddAsAdmin(ctx, field)
			case "channelCreatedAt":
				return ec.fieldContext_Channels_channelCreatedAt(ctx, field)
			case "country":
				return ec.fieldContext_Channels_country(ctx, field)
			case "currency":
				return ec.fieldContext_Channels_currency(ctx, field)
			case "cpmRating":
				return ec.fieldContext_Channels_cpmRating(ctx, field)
			case "categories":
				return ec.fieldContext_Channels_categories(ctx, field)
			case "languages":
				return ec.fieldContext_Channels_languages(ctx, field)
			case "channelDetails":
				return ec.fieldContext_Channels_channelDetails(ctx, field)
			case "createdAt":
				return ec.fieldContext_Channels_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channels_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Channels_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channels", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChannel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannel(rctx, fc.Args["input"].(model.UpdateChannelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channels)
	fc.Result = res
	return ec.marshalNChannels2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChannel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Channels_id(ctx, field)
			case "ownerId":
				return ec.fieldContext_Channels_ownerId(ctx, field)
			case "userName":
				return ec.fieldContext_Channels_userName(ctx, field)
			case "name":
				return ec.fieldContext_Channels_name(ctx, field)
			case "description":
				return ec.fieldContext_Channels_description(ctx, field)
			case "botAddAsAdmin":
				return ec.fieldContext_Channels_botAddAsAdmin(ctx, field)
			case "channelCreatedAt":
				return ec.fieldContext_Channels_channelCreatedAt(ctx, field)
			case "country":
				return ec.fieldContext_Channels_country(ctx, field)
			case "currency":
				return ec.fieldContext_Channels_currency(ctx, field)
			case "cpmRating":
				return ec.fieldContext_Channels_cpmRating(ctx, field)
			case "categories":
				return ec.fieldContext_Channels_categories(ctx, field)
			case "languages":
				return ec.fieldContext_Channels_languages(ctx, field)
			case "channelDetails":
				return ec.fieldContext_Channels_channelDetails(ctx, field)
			case "createdAt":
				return ec.fieldContext_Channels_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channels_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Channels_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channels", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChannel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChannel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChannel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannel(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChannel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChannel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelBalance(rctx, fc.Args["input"].(model.CreateChannelBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelBalances)
	fc.Result = res
	return ec.marshalNChannelBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelBalances_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_ChannelBalances_amount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelBalances_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChannelBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChannelBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelBalance(rctx, fc.Args["input"].(model.UpdateChannelBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelBalances)
	fc.Result = res
	return ec.marshalNChannelBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChannelBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelBalances_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_ChannelBalances_amount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelBalances_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChannelBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelCategory(rctx, fc.Args["input"].(model.ChannelCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCategories)
	fc.Result = res
	return ec.marshalNChannelCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelCategories_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelCategories_channelId(ctx, field)
			case "category":
				return ec.fieldContext_ChannelCategories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCategories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChannelCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChannelCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelCategory(rctx, fc.Args["channelCategoryInput"].(*model.ChannelCategoryInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChannelCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChannelCategory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelCollectedAdLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelCollectedAdLink(rctx, fc.Args["input"].(model.ChannelCollectedAdLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCollectedAdLinks)
	fc.Result = res
	return ec.marshalNChannelCollectedAdLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelBalanceId":
				return ec.fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx, field)
			case "adPaymentId":
				return ec.fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCollectedAdLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelCollectedAdLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChannelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChannelCollectedAdLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelCollectedAdLink(rctx, fc.Args["channelCollectedAdLinkInput"].(*model.ChannelCollectedAdLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChannelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChannelCollectedAdLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelContentLanguage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelContentLanguage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelContentLanguage(rctx, fc.Args["input"].(model.ChannelContentLanguageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelContentLanguages)
	fc.Result = res
	return ec.marshalNChannelContentLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelContentLanguage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelContentLanguages_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelContentLanguages_channelId(ctx, field)
			case "language":
				return ec.fieldContext_ChannelContentLanguages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelContentLanguages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelContentLanguage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChannelContentLanguage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChannelContentLanguage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChannelContentLanguage(rctx, fc.Args["channelContentLanguageInput"].(*model.ChannelContentLanguageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChannelContentLanguage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChannelContentLanguage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelDetail(rctx, fc.Args["input"].(model.CreateChannelDetailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelDetails)
	fc.Result = res
	return ec.marshalNChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelId":
				return ec.fieldContext_ChannelDetails_channelId(ctx, field)
			case "subCount":
				return ec.fieldContext_ChannelDetails_subCount(ctx, field)
			case "averagePostView":
				return ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
			case "postToSubRatio":
				return ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
			case "PostFrequency":
				return ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
			case "lastPostId":
				return ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
			case "lastPost":
				return ec.fieldContext_ChannelDetails_lastPost(ctx, field)
			case "collectedDate":
				return ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelDetails_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelDetail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChannelDetail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChannelDetail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelDetail(rctx, fc.Args["input"].(model.UpdateChannelDetailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelDetails)
	fc.Result = res
	return ec.marshalNChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChannelDetail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelId":
				return ec.fieldContext_ChannelDetails_channelId(ctx, field)
			case "subCount":
				return ec.fieldContext_ChannelDetails_subCount(ctx, field)
			case "averagePostView":
				return ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
			case "postToSubRatio":
				return ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
			case "PostFrequency":
				return ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
			case "lastPostId":
				return ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
			case "lastPost":
				return ec.fieldContext_ChannelDetails_lastPost(ctx, field)
			case "collectedDate":
				return ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelDetails_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChannelDetail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChannelLifeTimeBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChannelLifeTimeBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChannelLifeTimeBalance(rctx, fc.Args["input"].(model.CreateChannelLifeTimeBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelLifeTimeBalances)
	fc.Result = res
	return ec.marshalNChannelLifeTimeBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelLifeTimeBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChannelLifeTimeBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelLifeTimeBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelLifeTimeBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelLifeTimeBalances_channelId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelLifeTimeBalances_currency(ctx, field)
			case "totalHour":
				return ec.fieldContext_ChannelLifeTimeBalances_totalHour(ctx, field)
			case "totalAd":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAd(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelLifeTimeBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelLifeTimeBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChannelLifeTimeBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateChannelLifeTimeBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateChannelLifeTimeBalance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateChannelLifeTimeBalance(rctx, fc.Args["input"].(model.UpdateChannelLifeTimeBalanceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelLifeTimeBalances)
	fc.Result = res
	return ec.marshalNChannelLifeTimeBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelLifeTimeBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateChannelLifeTimeBalance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelLifeTimeBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelLifeTimeBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelLifeTimeBalances_channelId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelLifeTimeBalances_currency(ctx, field)
			case "totalHour":
				return ec.fieldContext_ChannelLifeTimeBalances_totalHour(ctx, field)
			case "totalAd":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAd(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelLifeTimeBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelLifeTimeBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateChannelLifeTimeBalance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompany(rctx, fc.Args["input"].(model.CreateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Companies)
	fc.Result = res
	return ec.marshalNCompanies2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Companies_id(ctx, field)
			case "creatorId":
				return ec.fieldContext_Companies_creatorId(ctx, field)
			case "name":
				return ec.fieldContext_Companies_name(ctx, field)
			case "uniqueName":
				return ec.fieldContext_Companies_uniqueName(ctx, field)
			case "tinNumber":
				return ec.fieldContext_Companies_tinNumber(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Companies_vatNumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_Companies_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Companies_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Companies", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompany(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompany(rctx, fc.Args["input"].(model.UpdateCompanyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Companies)
	fc.Result = res
	return ec.marshalNCompanies2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompany(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Companies_id(ctx, field)
			case "creatorId":
				return ec.fieldContext_Companies_creatorId(ctx, field)
			case "name":
				return ec.fieldContext_Companies_name(ctx, field)
			case "uniqueName":
				return ec.fieldContext_Companies_uniqueName(ctx, field)
			case "tinNumber":
				return ec.fieldContext_Companies_tinNumber(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Companies_vatNumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_Companies_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Companies_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Companies", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompany_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompanyBanking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompanyBanking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompanyBanking(rctx, fc.Args["input"].(model.CreateCompanyBankingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyBankings)
	fc.Result = res
	return ec.marshalNCompanyBankings2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompanyBanking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyBankings_id(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyBankings_companyId(ctx, field)
			case "bankId":
				return ec.fieldContext_CompanyBankings_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_CompanyBankings_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_CompanyBankings_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_CompanyBankings_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyBankings_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyBankings_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_CompanyBankings_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyBankings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompanyBanking_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCompanyBanking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCompanyBanking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompanyBanking(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCompanyBanking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCompanyBanking_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompanyLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompanyLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompanyLocation(rctx, fc.Args["input"].(model.CreateCompanyLocationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyLocations)
	fc.Result = res
	return ec.marshalNCompanyLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyLocations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompanyLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "companyId":
				return ec.fieldContext_CompanyLocations_companyId(ctx, field)
			case "locationId":
				return ec.fieldContext_CompanyLocations_locationId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyLocations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompanyLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCompanyLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCompanyLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCompanyLocation(rctx, fc.Args["companyId"].(string), fc.Args["locationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCompanyLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCompanyLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCompanyMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCompanyMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCompanyMember(rctx, fc.Args["input"].(model.CreateCompanyMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyMembers)
	fc.Result = res
	return ec.marshalNCompanyMembers2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCompanyMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyMembers_id(ctx, field)
			case "accountId":
				return ec.fieldContext_CompanyMembers_accountId(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyMembers_companyId(ctx, field)
			case "role":
				return ec.fieldContext_CompanyMembers_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyMembers_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyMembers_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyMembers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCompanyMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompanyMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompanyMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompanyMember(rctx, fc.Args["input"].(model.UpdateCompanyMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyMembers)
	fc.Result = res
	return ec.marshalNCompanyMembers2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompanyMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyMembers_id(ctx, field)
			case "accountId":
				return ec.fieldContext_CompanyMembers_accountId(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyMembers_companyId(ctx, field)
			case "role":
				return ec.fieldContext_CompanyMembers_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyMembers_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyMembers_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyMembers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompanyMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateContent(rctx, fc.Args["input"].(model.CreateContentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contents)
	fc.Result = res
	return ec.marshalNContents2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contents_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Contents_campaignId(ctx, field)
			case "contentType":
				return ec.fieldContext_Contents_contentType(ctx, field)
			case "description":
				return ec.fieldContext_Contents_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contents_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contents_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Contents_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contents", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateContent(rctx, fc.Args["input"].(model.UpdateContentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contents)
	fc.Result = res
	return ec.marshalNContents2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contents_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Contents_campaignId(ctx, field)
			case "contentType":
				return ec.fieldContext_Contents_contentType(ctx, field)
			case "description":
				return ec.fieldContext_Contents_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contents_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contents_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Contents_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contents", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createContentLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createContentLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateContentLink(rctx, fc.Args["input"].(model.CreateContentLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContentLinks)
	fc.Result = res
	return ec.marshalNContentLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createContentLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contentId":
				return ec.fieldContext_ContentLinks_contentId(ctx, field)
			case "link":
				return ec.fieldContext_ContentLinks_link(ctx, field)
			case "title":
				return ec.fieldContext_ContentLinks_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createContentLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateContentLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateContentLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateContentLink(rctx, fc.Args["input"].(model.UpdateContentLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContentLinks)
	fc.Result = res
	return ec.marshalNContentLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateContentLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contentId":
				return ec.fieldContext_ContentLinks_contentId(ctx, field)
			case "link":
				return ec.fieldContext_ContentLinks_link(ctx, field)
			case "title":
				return ec.fieldContext_ContentLinks_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateContentLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFunding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createFunding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFunding(rctx, fc.Args["input"].(model.CreateFundingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Funding)
	fc.Result = res
	return ec.marshalNFunding2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createFunding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Funding_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Funding_companyId(ctx, field)
			case "amount":
				return ec.fieldContext_Funding_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Funding_currency(ctx, field)
			case "key":
				return ec.fieldContext_Funding_key(ctx, field)
			case "method":
				return ec.fieldContext_Funding_method(ctx, field)
			case "fundingTxRef":
				return ec.fieldContext_Funding_fundingTxRef(ctx, field)
			case "reference":
				return ec.fieldContext_Funding_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Funding_paymentDate(ctx, field)
			case "redirectUrl":
				return ec.fieldContext_Funding_redirectUrl(ctx, field)
			case "status":
				return ec.fieldContext_Funding_status(ctx, field)
			case "extra":
				return ec.fieldContext_Funding_extra(ctx, field)
			case "log":
				return ec.fieldContext_Funding_log(ctx, field)
			case "tax":
				return ec.fieldContext_Funding_tax(ctx, field)
			case "createdAt":
				return ec.fieldContext_Funding_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Funding_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Funding_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Funding", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFunding_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFunding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateFunding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFunding(rctx, fc.Args["input"].(model.UpdateFundingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Funding)
	fc.Result = res
	return ec.marshalNFunding2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateFunding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Funding_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Funding_companyId(ctx, field)
			case "amount":
				return ec.fieldContext_Funding_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Funding_currency(ctx, field)
			case "key":
				return ec.fieldContext_Funding_key(ctx, field)
			case "method":
				return ec.fieldContext_Funding_method(ctx, field)
			case "fundingTxRef":
				return ec.fieldContext_Funding_fundingTxRef(ctx, field)
			case "reference":
				return ec.fieldContext_Funding_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Funding_paymentDate(ctx, field)
			case "redirectUrl":
				return ec.fieldContext_Funding_redirectUrl(ctx, field)
			case "status":
				return ec.fieldContext_Funding_status(ctx, field)
			case "extra":
				return ec.fieldContext_Funding_extra(ctx, field)
			case "log":
				return ec.fieldContext_Funding_log(ctx, field)
			case "tax":
				return ec.fieldContext_Funding_tax(ctx, field)
			case "createdAt":
				return ec.fieldContext_Funding_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Funding_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Funding_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Funding", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFunding_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createHourlyRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createHourlyRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHourlyRate(rctx, fc.Args["input"].(model.CreateHourlyRateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.HourlyRates)
	fc.Result = res
	return ec.marshalNHourlyRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐHourlyRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createHourlyRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HourlyRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_HourlyRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_HourlyRates_active(ctx, field)
			case "hourlyRate":
				return ec.fieldContext_HourlyRates_hourlyRate(ctx, field)
			case "minHourlyVolume":
				return ec.fieldContext_HourlyRates_minHourlyVolume(ctx, field)
			case "maxHourlyVolume":
				return ec.fieldContext_HourlyRates_maxHourlyVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_HourlyRates_createdAt(ctx, field)
			case "removeAt":
				return ec.fieldContext_HourlyRates_removeAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HourlyRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createHourlyRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateHourlyRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateHourlyRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHourlyRate(rctx, fc.Args["input"].(model.UpdateHourlyRateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.HourlyRates)
	fc.Result = res
	return ec.marshalNHourlyRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐHourlyRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateHourlyRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HourlyRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_HourlyRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_HourlyRates_active(ctx, field)
			case "hourlyRate":
				return ec.fieldContext_HourlyRates_hourlyRate(ctx, field)
			case "minHourlyVolume":
				return ec.fieldContext_HourlyRates_minHourlyVolume(ctx, field)
			case "maxHourlyVolume":
				return ec.fieldContext_HourlyRates_maxHourlyVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_HourlyRates_createdAt(ctx, field)
			case "removeAt":
				return ec.fieldContext_HourlyRates_removeAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HourlyRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateHourlyRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLanguage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLanguage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLanguage(rctx, fc.Args["input"].(model.CreateLanguageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Languages)
	fc.Result = res
	return ec.marshalNLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLanguage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Languages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Languages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLanguage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLocation(rctx, fc.Args["input"].(model.CreateLocationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Locations)
	fc.Result = res
	return ec.marshalNLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLocations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Locations_id(ctx, field)
			case "country":
				return ec.fieldContext_Locations_country(ctx, field)
			case "state":
				return ec.fieldContext_Locations_state(ctx, field)
			case "city":
				return ec.fieldContext_Locations_city(ctx, field)
			case "address":
				return ec.fieldContext_Locations_address(ctx, field)
			case "postalCode":
				return ec.fieldContext_Locations_postalCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Locations_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Locations_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Locations_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Locations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLocation(rctx, fc.Args["input"].(model.UpdateLocationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Locations)
	fc.Result = res
	return ec.marshalNLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLocations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Locations_id(ctx, field)
			case "country":
				return ec.fieldContext_Locations_country(ctx, field)
			case "state":
				return ec.fieldContext_Locations_state(ctx, field)
			case "city":
				return ec.fieldContext_Locations_city(ctx, field)
			case "address":
				return ec.fieldContext_Locations_address(ctx, field)
			case "postalCode":
				return ec.fieldContext_Locations_postalCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Locations_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Locations_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Locations_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Locations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWithdrawal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWithdrawal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWithdrawal(rctx, fc.Args["input"].(model.CreateWithdrawalInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Withdrawals)
	fc.Result = res
	return ec.marshalNWithdrawals2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWithdrawal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Withdrawals_id(ctx, field)
			case "accountId":
				return ec.fieldContext_Withdrawals_accountId(ctx, field)
			case "accountBankId":
				return ec.fieldContext_Withdrawals_accountBankId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_Withdrawals_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Withdrawals_currency(ctx, field)
			case "fundingKey":
				return ec.fieldContext_Withdrawals_fundingKey(ctx, field)
			case "method":
				return ec.fieldContext_Withdrawals_method(ctx, field)
			case "reference":
				return ec.fieldContext_Withdrawals_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Withdrawals_paymentDate(ctx, field)
			case "status":
				return ec.fieldContext_Withdrawals_status(ctx, field)
			case "extra":
				return ec.fieldContext_Withdrawals_extra(ctx, field)
			case "log":
				return ec.fieldContext_Withdrawals_log(ctx, field)
			case "createdAt":
				return ec.fieldContext_Withdrawals_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Withdrawals_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Withdrawals_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Withdrawals", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWithdrawal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWithdrawal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWithdrawal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWithdrawal(rctx, fc.Args["input"].(model.UpdateWithdrawalInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Withdrawals)
	fc.Result = res
	return ec.marshalNWithdrawals2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWithdrawal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Withdrawals_id(ctx, field)
			case "accountId":
				return ec.fieldContext_Withdrawals_accountId(ctx, field)
			case "accountBankId":
				return ec.fieldContext_Withdrawals_accountBankId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_Withdrawals_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Withdrawals_currency(ctx, field)
			case "fundingKey":
				return ec.fieldContext_Withdrawals_fundingKey(ctx, field)
			case "method":
				return ec.fieldContext_Withdrawals_method(ctx, field)
			case "reference":
				return ec.fieldContext_Withdrawals_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Withdrawals_paymentDate(ctx, field)
			case "status":
				return ec.fieldContext_Withdrawals_status(ctx, field)
			case "extra":
				return ec.fieldContext_Withdrawals_extra(ctx, field)
			case "log":
				return ec.fieldContext_Withdrawals_log(ctx, field)
			case "createdAt":
				return ec.fieldContext_Withdrawals_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Withdrawals_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Withdrawals_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Withdrawals", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWithdrawal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWithdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWithdrawalChannelLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWithdrawalChannelLink(rctx, fc.Args["input"].(model.WithdrawalChannelLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.WithdrawalChannelLinks)
	fc.Result = res
	return ec.marshalNWithdrawalChannelLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWithdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "withdrawalId":
				return ec.fieldContext_WithdrawalChannelLinks_withdrawalId(ctx, field)
			case "channelBalanceId":
				return ec.fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawalChannelLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWithdrawalChannelLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteWithdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteWithdrawalChannelLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWithdrawalChannelLink(rctx, fc.Args["withdrawalChannelLinkInput"].(*model.WithdrawalChannelLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeletionResult)
	fc.Result = res
	return ec.marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteWithdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_DeletionResult_success(ctx, field)
			case "message":
				return ec.fieldContext_DeletionResult_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteWithdrawalChannelLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_account(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_account(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Account(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_account(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "userId":
				return ec.fieldContext_Account_userId(ctx, field)
			case "userName":
				return ec.fieldContext_Account_userName(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Account_phoneNumber(ctx, field)
			case "fullName":
				return ec.fieldContext_Account_fullName(ctx, field)
			case "birthDate":
				return ec.fieldContext_Account_birthDate(ctx, field)
			case "accountType":
				return ec.fieldContext_Account_accountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Account)
	fc.Result = res
	return ec.marshalNAccount2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Account_id(ctx, field)
			case "userId":
				return ec.fieldContext_Account_userId(ctx, field)
			case "userName":
				return ec.fieldContext_Account_userName(ctx, field)
			case "email":
				return ec.fieldContext_Account_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Account_phoneNumber(ctx, field)
			case "fullName":
				return ec.fieldContext_Account_fullName(ctx, field)
			case "birthDate":
				return ec.fieldContext_Account_birthDate(ctx, field)
			case "accountType":
				return ec.fieldContext_Account_accountType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Account_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Account_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Account", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cpmRateByChannelId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cpmRateByChannelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CpmRateByChannelID(rctx, fc.Args["channelId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CpmRates)
	fc.Result = res
	return ec.marshalNcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cpmRateByChannelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_cpmRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_cpmRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_cpmRates_active(ctx, field)
			case "CPM":
				return ec.fieldContext_cpmRates_CPM(ctx, field)
			case "minCPMVolume":
				return ec.fieldContext_cpmRates_minCPMVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_cpmRates_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_cpmRates_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type cpmRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cpmRateByChannelId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_accountBankingById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_accountBankingById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AccountBankingByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AccountBanking)
	fc.Result = res
	return ec.marshalNAccountBanking2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBanking(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_accountBankingById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountBanking_id(ctx, field)
			case "accountId":
				return ec.fieldContext_AccountBanking_accountId(ctx, field)
			case "bankId":
				return ec.fieldContext_AccountBanking_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_AccountBanking_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_AccountBanking_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_AccountBanking_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountBanking_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountBanking_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AccountBanking_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountBanking", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_accountBankingById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllAccountBankings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllAccountBankings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAccountBankings(rctx, fc.Args["accountBankingsFilter"].(model.AccountBankingsFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AccountBanking)
	fc.Result = res
	return ec.marshalNAccountBanking2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBankingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllAccountBankings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccountBanking_id(ctx, field)
			case "accountId":
				return ec.fieldContext_AccountBanking_accountId(ctx, field)
			case "bankId":
				return ec.fieldContext_AccountBanking_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_AccountBanking_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_AccountBanking_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_AccountBanking_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_AccountBanking_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AccountBanking_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AccountBanking_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccountBanking", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllAccountBankings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_adPaymentById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_adPaymentById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdPaymentByID(rctx, fc.Args["advertisementId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdPayments)
	fc.Result = res
	return ec.marshalNAdPayments2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_adPaymentById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdPayments_id(ctx, field)
			case "advertisementId":
				return ec.fieldContext_AdPayments_advertisementId(ctx, field)
			case "accountId":
				return ec.fieldContext_AdPayments_accountId(ctx, field)
			case "campaignId":
				return ec.fieldContext_AdPayments_campaignId(ctx, field)
			case "channelId":
				return ec.fieldContext_AdPayments_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_AdPayments_amount(ctx, field)
			case "currency":
				return ec.fieldContext_AdPayments_currency(ctx, field)
			case "completionTime":
				return ec.fieldContext_AdPayments_completionTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdPayments_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdPayments_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdPayments_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_adPaymentById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllAdPayments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllAdPayments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdPayments(rctx, fc.Args["adPaymentFilter"].(*model.AdPaymentFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdPayments)
	fc.Result = res
	return ec.marshalNAdPayments2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPaymentsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllAdPayments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdPayments_id(ctx, field)
			case "advertisementId":
				return ec.fieldContext_AdPayments_advertisementId(ctx, field)
			case "accountId":
				return ec.fieldContext_AdPayments_accountId(ctx, field)
			case "campaignId":
				return ec.fieldContext_AdPayments_campaignId(ctx, field)
			case "channelId":
				return ec.fieldContext_AdPayments_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_AdPayments_amount(ctx, field)
			case "currency":
				return ec.fieldContext_AdPayments_currency(ctx, field)
			case "completionTime":
				return ec.fieldContext_AdPayments_completionTime(ctx, field)
			case "createdAt":
				return ec.fieldContext_AdPayments_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_AdPayments_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_AdPayments_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdPayments", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllAdPayments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_advertisementCPMById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_advertisementCPMById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdvertisementCPMByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementCPMs)
	fc.Result = res
	return ec.marshalNAdvertisementCPMs2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementCPMs(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_advertisementCPMById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementCPMs_advertisementId(ctx, field)
			case "Rate":
				return ec.fieldContext_AdvertisementCPMs_Rate(ctx, field)
			case "channelShare":
				return ec.fieldContext_AdvertisementCPMs_channelShare(ctx, field)
			case "providerShare":
				return ec.fieldContext_AdvertisementCPMs_providerShare(ctx, field)
			case "totalBudget":
				return ec.fieldContext_AdvertisementCPMs_totalBudget(ctx, field)
			case "maxLifeCycle":
				return ec.fieldContext_AdvertisementCPMs_maxLifeCycle(ctx, field)
			case "requiredViews":
				return ec.fieldContext_AdvertisementCPMs_requiredViews(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementCPMs", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_advertisementCPMById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_advertisementResultById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_advertisementResultById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdvertisementResultByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdvertisementResults)
	fc.Result = res
	return ec.marshalNAdvertisementResults2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementResults(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_advertisementResultById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "advertisementId":
				return ec.fieldContext_AdvertisementResults_advertisementId(ctx, field)
			case "startedAt":
				return ec.fieldContext_AdvertisementResults_startedAt(ctx, field)
			case "budget":
				return ec.fieldContext_AdvertisementResults_budget(ctx, field)
			case "providerBudgetShare":
				return ec.fieldContext_AdvertisementResults_providerBudgetShare(ctx, field)
			case "channelBudgetShare":
				return ec.fieldContext_AdvertisementResults_channelBudgetShare(ctx, field)
			case "totalHour":
				return ec.fieldContext_AdvertisementResults_totalHour(ctx, field)
			case "totalClick":
				return ec.fieldContext_AdvertisementResults_totalClick(ctx, field)
			case "totalViews":
				return ec.fieldContext_AdvertisementResults_totalViews(ctx, field)
			case "totalForward":
				return ec.fieldContext_AdvertisementResults_totalForward(ctx, field)
			case "totalReaction":
				return ec.fieldContext_AdvertisementResults_totalReaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdvertisementResults", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_advertisementResultById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_advertisementById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_advertisementById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AdvertisementByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Advertisements)
	fc.Result = res
	return ec.marshalNAdvertisements2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_advertisementById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Advertisements_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Advertisements_campaignId(ctx, field)
			case "contentId":
				return ec.fieldContext_Advertisements_contentId(ctx, field)
			case "channelId":
				return ec.fieldContext_Advertisements_channelId(ctx, field)
			case "messageId":
				return ec.fieldContext_Advertisements_messageId(ctx, field)
			case "status":
				return ec.fieldContext_Advertisements_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Advertisements_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Advertisements_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Advertisements_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Advertisements", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_advertisementById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllAdvertisements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllAdvertisements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAdvertisements(rctx, fc.Args["advertisementFilter"].(*model.AdvertisementFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Advertisements)
	fc.Result = res
	return ec.marshalNAdvertisements2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllAdvertisements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Advertisements_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Advertisements_campaignId(ctx, field)
			case "contentId":
				return ec.fieldContext_Advertisements_contentId(ctx, field)
			case "channelId":
				return ec.fieldContext_Advertisements_channelId(ctx, field)
			case "messageId":
				return ec.fieldContext_Advertisements_messageId(ctx, field)
			case "status":
				return ec.fieldContext_Advertisements_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Advertisements_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Advertisements_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Advertisements_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Advertisements", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllAdvertisements_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_audienceById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_audienceById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AudienceByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Audiences)
	fc.Result = res
	return ec.marshalNAudiences2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAudiences(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_audienceById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Audiences_campaignId(ctx, field)
			case "category":
				return ec.fieldContext_Audiences_category(ctx, field)
			case "language":
				return ec.fieldContext_Audiences_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Audiences", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_audienceById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bankById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bankById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BankByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Banks)
	fc.Result = res
	return ec.marshalNBanks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bankById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Banks_id(ctx, field)
			case "bankName":
				return ec.fieldContext_Banks_bankName(ctx, field)
			case "bankCode":
				return ec.fieldContext_Banks_bankCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Banks_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Banks_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Banks_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Banks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_bankById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllBanks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllBanks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllBanks(rctx, fc.Args["bankFilter"].(model.BankFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Banks)
	fc.Result = res
	return ec.marshalNBanks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanksᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllBanks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Banks_id(ctx, field)
			case "bankName":
				return ec.fieldContext_Banks_bankName(ctx, field)
			case "bankCode":
				return ec.fieldContext_Banks_bankCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Banks_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Banks_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Banks_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Banks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllBanks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_budgetById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_budgetById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BudgetByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Budgets)
	fc.Result = res
	return ec.marshalNBudgets2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBudgets(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_budgetById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignId":
				return ec.fieldContext_Budgets_campaignId(ctx, field)
			case "initialAmount":
				return ec.fieldContext_Budgets_initialAmount(ctx, field)
			case "usedAmount":
				return ec.fieldContext_Budgets_usedAmount(ctx, field)
			case "refundedAmount":
				return ec.fieldContext_Budgets_refundedAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Budgets_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Budgets", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_budgetById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_campaignById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_campaignById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CampaignByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaigns)
	fc.Result = res
	return ec.marshalNCampaigns2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_campaignById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Campaigns_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Campaigns_companyId(ctx, field)
			case "name":
				return ec.fieldContext_Campaigns_name(ctx, field)
			case "objective":
				return ec.fieldContext_Campaigns_objective(ctx, field)
			case "startDate":
				return ec.fieldContext_Campaigns_startDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Campaigns_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Campaigns_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Campaigns_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Campaigns", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_campaignById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllCampaigns(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllCampaigns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCampaigns(rctx, fc.Args["campaignFilter"].(*model.CampaignFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Campaigns)
	fc.Result = res
	return ec.marshalNCampaigns2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaignsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllCampaigns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Campaigns_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Campaigns_companyId(ctx, field)
			case "name":
				return ec.fieldContext_Campaigns_name(ctx, field)
			case "objective":
				return ec.fieldContext_Campaigns_objective(ctx, field)
			case "startDate":
				return ec.fieldContext_Campaigns_startDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Campaigns_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Campaigns_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Campaigns_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Campaigns", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllCampaigns_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_categoryById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_categoryById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CategoryByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Categories)
	fc.Result = res
	return ec.marshalNCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_categoryById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_Categories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_categoryById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCategories(rctx, fc.Args["categoryFilter"].(*model.CategoryFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Categories)
	fc.Result = res
	return ec.marshalNCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategoriesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_Categories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Categories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllCategories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Channels)
	fc.Result = res
	return ec.marshalNChannels2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Channels_id(ctx, field)
			case "ownerId":
				return ec.fieldContext_Channels_ownerId(ctx, field)
			case "userName":
				return ec.fieldContext_Channels_userName(ctx, field)
			case "name":
				return ec.fieldContext_Channels_name(ctx, field)
			case "description":
				return ec.fieldContext_Channels_description(ctx, field)
			case "botAddAsAdmin":
				return ec.fieldContext_Channels_botAddAsAdmin(ctx, field)
			case "channelCreatedAt":
				return ec.fieldContext_Channels_channelCreatedAt(ctx, field)
			case "country":
				return ec.fieldContext_Channels_country(ctx, field)
			case "currency":
				return ec.fieldContext_Channels_currency(ctx, field)
			case "cpmRating":
				return ec.fieldContext_Channels_cpmRating(ctx, field)
			case "categories":
				return ec.fieldContext_Channels_categories(ctx, field)
			case "languages":
				return ec.fieldContext_Channels_languages(ctx, field)
			case "channelDetails":
				return ec.fieldContext_Channels_channelDetails(ctx, field)
			case "createdAt":
				return ec.fieldContext_Channels_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channels_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Channels_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channels", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllChannels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllChannels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllChannels(rctx, fc.Args["channelFilter"].(*model.ChannelFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Channels)
	fc.Result = res
	return ec.marshalNChannels2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllChannels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Channels_id(ctx, field)
			case "ownerId":
				return ec.fieldContext_Channels_ownerId(ctx, field)
			case "userName":
				return ec.fieldContext_Channels_userName(ctx, field)
			case "name":
				return ec.fieldContext_Channels_name(ctx, field)
			case "description":
				return ec.fieldContext_Channels_description(ctx, field)
			case "botAddAsAdmin":
				return ec.fieldContext_Channels_botAddAsAdmin(ctx, field)
			case "channelCreatedAt":
				return ec.fieldContext_Channels_channelCreatedAt(ctx, field)
			case "country":
				return ec.fieldContext_Channels_country(ctx, field)
			case "currency":
				return ec.fieldContext_Channels_currency(ctx, field)
			case "cpmRating":
				return ec.fieldContext_Channels_cpmRating(ctx, field)
			case "categories":
				return ec.fieldContext_Channels_categories(ctx, field)
			case "languages":
				return ec.fieldContext_Channels_languages(ctx, field)
			case "channelDetails":
				return ec.fieldContext_Channels_channelDetails(ctx, field)
			case "createdAt":
				return ec.fieldContext_Channels_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Channels_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Channels_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Channels", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllChannels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelBalanceById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelBalanceById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelBalanceByID(rctx, fc.Args["channelId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelBalances)
	fc.Result = res
	return ec.marshalNChannelBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelBalanceById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelBalances_channelId(ctx, field)
			case "amount":
				return ec.fieldContext_ChannelBalances_amount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelBalances_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelBalanceById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllChannelCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllChannelCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllChannelCategories(rctx, fc.Args["channelCategoryFilter"].(*model.ChannelCategoryFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelCategories)
	fc.Result = res
	return ec.marshalNChannelCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoriesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllChannelCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelCategories_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelCategories_channelId(ctx, field)
			case "category":
				return ec.fieldContext_ChannelCategories_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCategories", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllChannelCategories_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelCollectedAdLinkById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelCollectedAdLinkById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelCollectedAdLinkByID(rctx, fc.Args["adPaymentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCollectedAdLinks)
	fc.Result = res
	return ec.marshalNChannelCollectedAdLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelCollectedAdLinkById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelBalanceId":
				return ec.fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx, field)
			case "adPaymentId":
				return ec.fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCollectedAdLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelCollectedAdLinkById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelCollectedAdLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelCollectedAdLink(rctx, fc.Args["channelCollectedAdLinkInput"].(*model.ChannelCollectedAdLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelCollectedAdLinks)
	fc.Result = res
	return ec.marshalNChannelCollectedAdLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelCollectedAdLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelBalanceId":
				return ec.fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx, field)
			case "adPaymentId":
				return ec.fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCollectedAdLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelCollectedAdLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllChannelCollectedAdLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllChannelCollectedAdLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllChannelCollectedAdLinks(rctx, fc.Args["channelCollectedAdLinkFilter"].(*model.ChannelCollectedAdLinkFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelCollectedAdLinks)
	fc.Result = res
	return ec.marshalNChannelCollectedAdLinks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinksᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllChannelCollectedAdLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelBalanceId":
				return ec.fieldContext_ChannelCollectedAdLinks_channelBalanceId(ctx, field)
			case "adPaymentId":
				return ec.fieldContext_ChannelCollectedAdLinks_adPaymentId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelCollectedAdLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllChannelCollectedAdLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllChannelContentLanguages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllChannelContentLanguages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllChannelContentLanguages(rctx, fc.Args["channelContentLanguageFilter"].(*model.ChannelContentLanguageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelContentLanguages)
	fc.Result = res
	return ec.marshalNChannelContentLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguagesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllChannelContentLanguages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelContentLanguages_id(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelContentLanguages_channelId(ctx, field)
			case "language":
				return ec.fieldContext_ChannelContentLanguages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelContentLanguages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllChannelContentLanguages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllChannelDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllChannelDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllChannelDetails(rctx, fc.Args["channelDetailFilter"].(*model.ChannelDetailFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChannelDetails)
	fc.Result = res
	return ec.marshalNChannelDetails2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllChannelDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelId":
				return ec.fieldContext_ChannelDetails_channelId(ctx, field)
			case "subCount":
				return ec.fieldContext_ChannelDetails_subCount(ctx, field)
			case "averagePostView":
				return ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
			case "postToSubRatio":
				return ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
			case "PostFrequency":
				return ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
			case "lastPostId":
				return ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
			case "lastPost":
				return ec.fieldContext_ChannelDetails_lastPost(ctx, field)
			case "collectedDate":
				return ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelDetails_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllChannelDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelDetailById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelDetailById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelDetailByID(rctx, fc.Args["channelId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelDetails)
	fc.Result = res
	return ec.marshalNChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelDetailById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "channelId":
				return ec.fieldContext_ChannelDetails_channelId(ctx, field)
			case "subCount":
				return ec.fieldContext_ChannelDetails_subCount(ctx, field)
			case "averagePostView":
				return ec.fieldContext_ChannelDetails_averagePostView(ctx, field)
			case "postToSubRatio":
				return ec.fieldContext_ChannelDetails_postToSubRatio(ctx, field)
			case "PostFrequency":
				return ec.fieldContext_ChannelDetails_PostFrequency(ctx, field)
			case "lastPostId":
				return ec.fieldContext_ChannelDetails_lastPostId(ctx, field)
			case "lastPost":
				return ec.fieldContext_ChannelDetails_lastPost(ctx, field)
			case "collectedDate":
				return ec.fieldContext_ChannelDetails_collectedDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelDetails_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelDetails_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelDetails_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelDetailById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_channelLifeTimeBalanceById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_channelLifeTimeBalanceById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ChannelLifeTimeBalanceByID(rctx, fc.Args["channelId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ChannelLifeTimeBalances)
	fc.Result = res
	return ec.marshalNChannelLifeTimeBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelLifeTimeBalances(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_channelLifeTimeBalanceById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelLifeTimeBalances_id(ctx, field)
			case "accountId":
				return ec.fieldContext_ChannelLifeTimeBalances_accountId(ctx, field)
			case "channelId":
				return ec.fieldContext_ChannelLifeTimeBalances_channelId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_ChannelLifeTimeBalances_currency(ctx, field)
			case "totalHour":
				return ec.fieldContext_ChannelLifeTimeBalances_totalHour(ctx, field)
			case "totalAd":
				return ec.fieldContext_ChannelLifeTimeBalances_totalAd(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChannelLifeTimeBalances_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ChannelLifeTimeBalances_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelLifeTimeBalances", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_channelLifeTimeBalanceById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companyById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companyById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompanyByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Companies)
	fc.Result = res
	return ec.marshalNCompanies2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanies(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companyById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Companies_id(ctx, field)
			case "creatorId":
				return ec.fieldContext_Companies_creatorId(ctx, field)
			case "name":
				return ec.fieldContext_Companies_name(ctx, field)
			case "uniqueName":
				return ec.fieldContext_Companies_uniqueName(ctx, field)
			case "tinNumber":
				return ec.fieldContext_Companies_tinNumber(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Companies_vatNumber(ctx, field)
			case "createdAt":
				return ec.fieldContext_Companies_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Companies_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Companies", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companyById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companyBankingById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companyBankingById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompanyBankingByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyBankings)
	fc.Result = res
	return ec.marshalNCompanyBankings2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companyBankingById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyBankings_id(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyBankings_companyId(ctx, field)
			case "bankId":
				return ec.fieldContext_CompanyBankings_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_CompanyBankings_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_CompanyBankings_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_CompanyBankings_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyBankings_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyBankings_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_CompanyBankings_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyBankings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companyBankingById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllCompanyBankings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllCompanyBankings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCompanyBankings(rctx, fc.Args["companyBankingsFilter"].(model.CompanyBankingFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CompanyBankings)
	fc.Result = res
	return ec.marshalNCompanyBankings2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankingsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllCompanyBankings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyBankings_id(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyBankings_companyId(ctx, field)
			case "bankId":
				return ec.fieldContext_CompanyBankings_bankId(ctx, field)
			case "fullNameOnBank":
				return ec.fieldContext_CompanyBankings_fullNameOnBank(ctx, field)
			case "bankAccount":
				return ec.fieldContext_CompanyBankings_bankAccount(ctx, field)
			case "currency":
				return ec.fieldContext_CompanyBankings_currency(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyBankings_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyBankings_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_CompanyBankings_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyBankings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllCompanyBankings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companyLocationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companyLocationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompanyLocationByID(rctx, fc.Args["companyId"].(string), fc.Args["locationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyLocations)
	fc.Result = res
	return ec.marshalNCompanyLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyLocations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companyLocationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "companyId":
				return ec.fieldContext_CompanyLocations_companyId(ctx, field)
			case "locationId":
				return ec.fieldContext_CompanyLocations_locationId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyLocations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companyLocationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companyMemberById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_companyMemberById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompanyMemberByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CompanyMembers)
	fc.Result = res
	return ec.marshalNCompanyMembers2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_companyMemberById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyMembers_id(ctx, field)
			case "accountId":
				return ec.fieldContext_CompanyMembers_accountId(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyMembers_companyId(ctx, field)
			case "role":
				return ec.fieldContext_CompanyMembers_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyMembers_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyMembers_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyMembers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companyMemberById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllCompanyMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllCompanyMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllCompanyMembers(rctx, fc.Args["companyMemberFilter"].(*model.CompanyMemberFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CompanyMembers)
	fc.Result = res
	return ec.marshalNCompanyMembers2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembersᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllCompanyMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CompanyMembers_id(ctx, field)
			case "accountId":
				return ec.fieldContext_CompanyMembers_accountId(ctx, field)
			case "companyId":
				return ec.fieldContext_CompanyMembers_companyId(ctx, field)
			case "role":
				return ec.fieldContext_CompanyMembers_role(ctx, field)
			case "createdAt":
				return ec.fieldContext_CompanyMembers_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CompanyMembers_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyMembers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllCompanyMembers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contentById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contentById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContentByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contents)
	fc.Result = res
	return ec.marshalNContents2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contentById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contents_id(ctx, field)
			case "campaignId":
				return ec.fieldContext_Contents_campaignId(ctx, field)
			case "contentType":
				return ec.fieldContext_Contents_contentType(ctx, field)
			case "description":
				return ec.fieldContext_Contents_description(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contents_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contents_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Contents_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contents", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contentById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contentLinkById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contentLinkById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContentLinkByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContentLinks)
	fc.Result = res
	return ec.marshalNContentLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contentLinkById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contentId":
				return ec.fieldContext_ContentLinks_contentId(ctx, field)
			case "link":
				return ec.fieldContext_ContentLinks_link(ctx, field)
			case "title":
				return ec.fieldContext_ContentLinks_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contentLinkById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_fundingById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fundingById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FundingByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Funding)
	fc.Result = res
	return ec.marshalNFunding2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fundingById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Funding_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Funding_companyId(ctx, field)
			case "amount":
				return ec.fieldContext_Funding_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Funding_currency(ctx, field)
			case "key":
				return ec.fieldContext_Funding_key(ctx, field)
			case "method":
				return ec.fieldContext_Funding_method(ctx, field)
			case "fundingTxRef":
				return ec.fieldContext_Funding_fundingTxRef(ctx, field)
			case "reference":
				return ec.fieldContext_Funding_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Funding_paymentDate(ctx, field)
			case "redirectUrl":
				return ec.fieldContext_Funding_redirectUrl(ctx, field)
			case "status":
				return ec.fieldContext_Funding_status(ctx, field)
			case "extra":
				return ec.fieldContext_Funding_extra(ctx, field)
			case "log":
				return ec.fieldContext_Funding_log(ctx, field)
			case "tax":
				return ec.fieldContext_Funding_tax(ctx, field)
			case "createdAt":
				return ec.fieldContext_Funding_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Funding_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Funding_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Funding", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fundingById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllFunding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllFunding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllFunding(rctx, fc.Args["fundingFilter"].(*model.FundingFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Funding)
	fc.Result = res
	return ec.marshalNFunding2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllFunding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Funding_id(ctx, field)
			case "companyId":
				return ec.fieldContext_Funding_companyId(ctx, field)
			case "amount":
				return ec.fieldContext_Funding_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Funding_currency(ctx, field)
			case "key":
				return ec.fieldContext_Funding_key(ctx, field)
			case "method":
				return ec.fieldContext_Funding_method(ctx, field)
			case "fundingTxRef":
				return ec.fieldContext_Funding_fundingTxRef(ctx, field)
			case "reference":
				return ec.fieldContext_Funding_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Funding_paymentDate(ctx, field)
			case "redirectUrl":
				return ec.fieldContext_Funding_redirectUrl(ctx, field)
			case "status":
				return ec.fieldContext_Funding_status(ctx, field)
			case "extra":
				return ec.fieldContext_Funding_extra(ctx, field)
			case "log":
				return ec.fieldContext_Funding_log(ctx, field)
			case "tax":
				return ec.fieldContext_Funding_tax(ctx, field)
			case "createdAt":
				return ec.fieldContext_Funding_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Funding_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Funding_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Funding", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllFunding_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_HourlyRateById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_HourlyRateById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().HourlyRateByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.HourlyRates)
	fc.Result = res
	return ec.marshalNHourlyRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐHourlyRates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_HourlyRateById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HourlyRates_id(ctx, field)
			case "channelId":
				return ec.fieldContext_HourlyRates_channelId(ctx, field)
			case "active":
				return ec.fieldContext_HourlyRates_active(ctx, field)
			case "hourlyRate":
				return ec.fieldContext_HourlyRates_hourlyRate(ctx, field)
			case "minHourlyVolume":
				return ec.fieldContext_HourlyRates_minHourlyVolume(ctx, field)
			case "maxHourlyVolume":
				return ec.fieldContext_HourlyRates_maxHourlyVolume(ctx, field)
			case "createdAt":
				return ec.fieldContext_HourlyRates_createdAt(ctx, field)
			case "removeAt":
				return ec.fieldContext_HourlyRates_removeAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HourlyRates", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_HourlyRateById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_languageById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_languageById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LanguageByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Languages)
	fc.Result = res
	return ec.marshalNLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_languageById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Languages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Languages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_languageById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllLanguages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllLanguages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllLanguages(rctx, fc.Args["languageFilter"].(*model.LanguageFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Languages)
	fc.Result = res
	return ec.marshalNLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguagesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllLanguages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "language":
				return ec.fieldContext_Languages_language(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Languages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllLanguages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_locationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_locationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LocationByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Locations)
	fc.Result = res
	return ec.marshalNLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLocations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_locationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Locations_id(ctx, field)
			case "country":
				return ec.fieldContext_Locations_country(ctx, field)
			case "state":
				return ec.fieldContext_Locations_state(ctx, field)
			case "city":
				return ec.fieldContext_Locations_city(ctx, field)
			case "address":
				return ec.fieldContext_Locations_address(ctx, field)
			case "postalCode":
				return ec.fieldContext_Locations_postalCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Locations_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Locations_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Locations_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Locations", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_locationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_withdrawalById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_withdrawalById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WithdrawalByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Withdrawals)
	fc.Result = res
	return ec.marshalNWithdrawals2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_withdrawalById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Withdrawals_id(ctx, field)
			case "accountId":
				return ec.fieldContext_Withdrawals_accountId(ctx, field)
			case "accountBankId":
				return ec.fieldContext_Withdrawals_accountBankId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_Withdrawals_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Withdrawals_currency(ctx, field)
			case "fundingKey":
				return ec.fieldContext_Withdrawals_fundingKey(ctx, field)
			case "method":
				return ec.fieldContext_Withdrawals_method(ctx, field)
			case "reference":
				return ec.fieldContext_Withdrawals_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Withdrawals_paymentDate(ctx, field)
			case "status":
				return ec.fieldContext_Withdrawals_status(ctx, field)
			case "extra":
				return ec.fieldContext_Withdrawals_extra(ctx, field)
			case "log":
				return ec.fieldContext_Withdrawals_log(ctx, field)
			case "createdAt":
				return ec.fieldContext_Withdrawals_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Withdrawals_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Withdrawals_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Withdrawals", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_withdrawalById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllWithdrawals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllWithdrawals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllWithdrawals(rctx, fc.Args["withdrawalFilter"].(*model.WithdrawalFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Withdrawals)
	fc.Result = res
	return ec.marshalNWithdrawals2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllWithdrawals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Withdrawals_id(ctx, field)
			case "accountId":
				return ec.fieldContext_Withdrawals_accountId(ctx, field)
			case "accountBankId":
				return ec.fieldContext_Withdrawals_accountBankId(ctx, field)
			case "totalAmount":
				return ec.fieldContext_Withdrawals_totalAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Withdrawals_currency(ctx, field)
			case "fundingKey":
				return ec.fieldContext_Withdrawals_fundingKey(ctx, field)
			case "method":
				return ec.fieldContext_Withdrawals_method(ctx, field)
			case "reference":
				return ec.fieldContext_Withdrawals_reference(ctx, field)
			case "paymentDate":
				return ec.fieldContext_Withdrawals_paymentDate(ctx, field)
			case "status":
				return ec.fieldContext_Withdrawals_status(ctx, field)
			case "extra":
				return ec.fieldContext_Withdrawals_extra(ctx, field)
			case "log":
				return ec.fieldContext_Withdrawals_log(ctx, field)
			case "createdAt":
				return ec.fieldContext_Withdrawals_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Withdrawals_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Withdrawals_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Withdrawals", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllWithdrawals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_withdrawalChannelLinkById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_withdrawalChannelLinkById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WithdrawalChannelLinkByID(rctx, fc.Args["withdrawalId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.WithdrawalChannelLinks)
	fc.Result = res
	return ec.marshalNWithdrawalChannelLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_withdrawalChannelLinkById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "withdrawalId":
				return ec.fieldContext_WithdrawalChannelLinks_withdrawalId(ctx, field)
			case "channelBalanceId":
				return ec.fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawalChannelLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_withdrawalChannelLinkById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_withdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_withdrawalChannelLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WithdrawalChannelLink(rctx, fc.Args["withdrawalChannelLinkInput"].(*model.WithdrawalChannelLinkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.WithdrawalChannelLinks)
	fc.Result = res
	return ec.marshalNWithdrawalChannelLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_withdrawalChannelLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "withdrawalId":
				return ec.fieldContext_WithdrawalChannelLinks_withdrawalId(ctx, field)
			case "channelBalanceId":
				return ec.fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawalChannelLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_withdrawalChannelLink_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllWithdrawalChannelLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllWithdrawalChannelLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllWithdrawalChannelLinks(rctx, fc.Args["withdrawalChannelLinkFilter"].(*model.WithdrawalChannelLinkFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.WithdrawalChannelLinks)
	fc.Result = res
	return ec.marshalNWithdrawalChannelLinks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinksᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllWithdrawalChannelLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "withdrawalId":
				return ec.fieldContext_WithdrawalChannelLinks_withdrawalId(ctx, field)
			case "channelBalanceId":
				return ec.fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WithdrawalChannelLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllWithdrawalChannelLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_text(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_done(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_done(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Done, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_done(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawalChannelLinks_withdrawalId(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawalChannelLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WithdrawalChannelLinks_withdrawalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithdrawalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WithdrawalChannelLinks_withdrawalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawalChannelLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WithdrawalChannelLinks_channelBalanceId(ctx context.Context, field graphql.CollectedField, obj *model.WithdrawalChannelLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelBalanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WithdrawalChannelLinks_channelBalanceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WithdrawalChannelLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_id(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_accountId(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_accountId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_accountId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_accountBankId(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_accountBankId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountBankID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_accountBankId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_totalAmount(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_totalAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_totalAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_currency(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_fundingKey(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_fundingKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_fundingKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_method(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_reference(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_paymentDate(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_paymentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_paymentDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_status(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_extra(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_extra(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Withdrawals().Extra(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_extra(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_log(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_log(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Withdrawals().Log(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_log(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Withdrawals_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Withdrawals) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Withdrawals_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Withdrawals_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Withdrawals",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_id(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_channelId(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_active(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_CPM(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_CPM(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cpm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_CPM(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_minCPMVolume(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_minCPMVolume(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinCPMVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_minCPMVolume(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _cpmRates_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CpmRates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_cpmRates_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_cpmRates_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "cpmRates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputFilterInput(ctx context.Context, obj interface{}) (model.FilterInput, error) {
	var it model.FilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"after", "before", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "after":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "before":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Before = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWithdrawalChannelLinkFilter(ctx context.Context, obj interface{}) (model.WithdrawalChannelLinkFilter, error) {
	var it model.WithdrawalChannelLinkFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelBalanceId", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelBalanceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBalanceId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBalanceID = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWithdrawalChannelLinkInput(ctx context.Context, obj interface{}) (model.WithdrawalChannelLinkInput, error) {
	var it model.WithdrawalChannelLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"withdrawalId", "channelBalanceId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "withdrawalId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withdrawalId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WithdrawalID = data
		case "channelBalanceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBalanceId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBalanceID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputaccountBankingsFilter(ctx context.Context, obj interface{}) (model.AccountBankingsFilter, error) {
	var it model.AccountBankingsFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "accountId", "bankId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "bankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadPaymentFilter(ctx context.Context, obj interface{}) (model.AdPaymentFilter, error) {
	var it model.AdPaymentFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "campaignId", "channelId", "amount", "currency", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputadvertisementFilter(ctx context.Context, obj interface{}) (model.AdvertisementFilter, error) {
	var it model.AdvertisementFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "companyId", "status", "rate", "channelBudgetShare", "requiredViews", "Views", "Hours", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOAdStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "rate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rate"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rate = data
		case "channelBudgetShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBudgetShare"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBudgetShare = data
		case "requiredViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredViews"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredViews = data
		case "Views":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Views"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Views = data
		case "Hours":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Hours"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hours = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputbankFilter(ctx context.Context, obj interface{}) (model.BankFilter, error) {
	var it model.BankFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcampaignFilter(ctx context.Context, obj interface{}) (model.CampaignFilter, error) {
	var it model.CampaignFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "companyId", "objective", "categories", "languages", "initialBudget", "usedAmount", "contentType", "advertisementStatus", "advertisementRate", "advertisementRequiredViews", "advertisementViews", "advertisementHours", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "objective":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objective"))
			data, err := ec.unmarshalOObjectiveType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Objective = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "languages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Languages = data
		case "initialBudget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialBudget"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialBudget = data
		case "usedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedAmount"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedAmount = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOContentType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "advertisementStatus":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementStatus"))
			data, err := ec.unmarshalOAdStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementStatus = data
		case "advertisementRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementRate"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementRate = data
		case "advertisementRequiredViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementRequiredViews"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementRequiredViews = data
		case "advertisementViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementViews"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementViews = data
		case "advertisementHours":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementHours"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementHours = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcategoryFilter(ctx context.Context, obj interface{}) (model.CategoryFilter, error) {
	var it model.CategoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelCategoryFilter(ctx context.Context, obj interface{}) (model.ChannelCategoryFilter, error) {
	var it model.ChannelCategoryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "category", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelCategoryInput(ctx context.Context, obj interface{}) (model.ChannelCategoryInput, error) {
	var it model.ChannelCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelCollectedAdLinkFilter(ctx context.Context, obj interface{}) (model.ChannelCollectedAdLinkFilter, error) {
	var it model.ChannelCollectedAdLinkFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelBalanceId", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelBalanceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBalanceId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBalanceID = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelCollectedAdLinkInput(ctx context.Context, obj interface{}) (model.ChannelCollectedAdLinkInput, error) {
	var it model.ChannelCollectedAdLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelBalanceId", "adPaymentId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelBalanceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBalanceId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBalanceID = data
		case "adPaymentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adPaymentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdPaymentID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelContentLanguageFilter(ctx context.Context, obj interface{}) (model.ChannelContentLanguageFilter, error) {
	var it model.ChannelContentLanguageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "language", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "language":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Language = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelContentLanguageInput(ctx context.Context, obj interface{}) (model.ChannelContentLanguageInput, error) {
	var it model.ChannelContentLanguageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "language"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "language":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Language = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelDetailFilter(ctx context.Context, obj interface{}) (model.ChannelDetailFilter, error) {
	var it model.ChannelDetailFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputchannelFilter(ctx context.Context, obj interface{}) (model.ChannelFilter, error) {
	var it model.ChannelFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "country", "categories", "languages", "subCount", "cpmFilter", "postViewFilter", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "languages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Languages = data
		case "subCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subCount"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubCount = data
		case "cpmFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpmFilter"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CpmFilter = data
		case "postViewFilter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postViewFilter"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostViewFilter = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcompanyBankingFilter(ctx context.Context, obj interface{}) (model.CompanyBankingFilter, error) {
	var it model.CompanyBankingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "companyId", "bankId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "bankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcompanyMemberFilter(ctx context.Context, obj interface{}) (model.CompanyMemberFilter, error) {
	var it model.CompanyMemberFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "accountId", "role", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOCompanyRole2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRoleᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAccountBankingInput(ctx context.Context, obj interface{}) (model.CreateAccountBankingInput, error) {
	var it model.CreateAccountBankingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "bankId", "fullNameOnBank", "bankAccount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "bankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankID = data
		case "fullNameOnBank":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullNameOnBank"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullNameOnBank = data
		case "bankAccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankAccount"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankAccount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAccountInput(ctx context.Context, obj interface{}) (model.CreateAccountInput, error) {
	var it model.CreateAccountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId", "userName", "email", "phoneNumber", "fullName", "birthDate", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "userName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "fullName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullName = data
		case "birthDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthDate = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAdPaymentInput(ctx context.Context, obj interface{}) (model.CreateAdPaymentInput, error) {
	var it model.CreateAdPaymentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "accountId", "campaignId", "channelId", "amount", "currency", "completionTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "completionTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionTime"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAdvertisementCPMInput(ctx context.Context, obj interface{}) (model.CreateAdvertisementCPMInput, error) {
	var it model.CreateAdvertisementCPMInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "Rate", "channelShare", "providerShare", "totalBudget", "maxLifeCycle", "requiredViews"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "Rate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rate"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rate = data
		case "channelShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelShare"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelShare = data
		case "providerShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerShare"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderShare = data
		case "totalBudget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBudget"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBudget = data
		case "maxLifeCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLifeCycle"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxLifeCycle = data
		case "requiredViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredViews"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredViews = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAdvertisementInput(ctx context.Context, obj interface{}) (model.CreateAdvertisementInput, error) {
	var it model.CreateAdvertisementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "contentId", "channelId", "messageId", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "contentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentID = data
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "messageId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOAdStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAdvertisementResultInput(ctx context.Context, obj interface{}) (model.CreateAdvertisementResultInput, error) {
	var it model.CreateAdvertisementResultInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "startedAt", "budget", "providerBudgetShare", "channelBudgetShare", "totalHour", "totalClick", "totalViews", "totalForward", "totalReaction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalNTimestamp2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "budget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("budget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Budget = data
		case "providerBudgetShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerBudgetShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderBudgetShare = data
		case "channelBudgetShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBudgetShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBudgetShare = data
		case "totalHour":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalHour"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalHour = data
		case "totalClick":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalClick"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalClick = data
		case "totalViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalViews"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalViews = data
		case "totalForward":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalForward"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalForward = data
		case "totalReaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalReaction"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalReaction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateAudienceInput(ctx context.Context, obj interface{}) (model.CreateAudienceInput, error) {
	var it model.CreateAudienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "category", "language"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "language":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Language = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBankInput(ctx context.Context, obj interface{}) (model.CreateBankInput, error) {
	var it model.CreateBankInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"bankName", "bankCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "bankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "bankCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateBudgetInput(ctx context.Context, obj interface{}) (model.CreateBudgetInput, error) {
	var it model.CreateBudgetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "initialAmount", "usedAmount", "refundedAmount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "initialAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialAmount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialAmount = data
		case "usedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedAmount = data
		case "refundedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refundedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefundedAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCPMRateInput(ctx context.Context, obj interface{}) (model.CreateCPMRateInput, error) {
	var it model.CreateCPMRateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "active", "CPM", "minCPMVolume"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "CPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CPM"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpm = data
		case "minCPMVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minCPMVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinCPMVolume = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCampaignInput(ctx context.Context, obj interface{}) (model.CreateCampaignInput, error) {
	var it model.CreateCampaignInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "name", "objective", "startDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "objective":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objective"))
			data, err := ec.unmarshalOObjectiveType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Objective = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCategoryInput(ctx context.Context, obj interface{}) (model.CreateCategoryInput, error) {
	var it model.CreateCategoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateChannelBalanceInput(ctx context.Context, obj interface{}) (model.CreateChannelBalanceInput, error) {
	var it model.CreateChannelBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "channelId", "amount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateChannelDetailInput(ctx context.Context, obj interface{}) (model.CreateChannelDetailInput, error) {
	var it model.CreateChannelDetailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "subCount", "averagePostView", "postToSubRatio", "PostFrequency", "lastPostId", "lastPost", "collectedDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "subCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubCount = data
		case "averagePostView":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagePostView"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AveragePostView = data
		case "postToSubRatio":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postToSubRatio"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostToSubRatio = data
		case "PostFrequency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PostFrequency"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostFrequency = data
		case "lastPostId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastPostId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastPostID = data
		case "lastPost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastPost"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastPost = data
		case "collectedDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectedDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollectedDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateChannelInput(ctx context.Context, obj interface{}) (model.CreateChannelInput, error) {
	var it model.CreateChannelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ownerId", "userName", "name", "description", "botAddAsAdmin", "channelCreatedAt", "country", "currency", "cpmRate", "categories", "languages"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		case "userName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "botAddAsAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botAddAsAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BotAddAsAdmin = data
		case "channelCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelCreatedAt"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelCreatedAt = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "cpmRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpmRate"))
			data, err := ec.unmarshalOcreateCPMRateInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCPMRateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CpmRate = data
		case "categories":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Categories = data
		case "languages":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Languages = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateChannelLifeTimeBalanceInput(ctx context.Context, obj interface{}) (model.CreateChannelLifeTimeBalanceInput, error) {
	var it model.CreateChannelLifeTimeBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "channelId", "totalAmount", "currency", "totalHour", "totalAd"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "totalAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAmount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "totalHour":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalHour"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalHour = data
		case "totalAd":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAd"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAd = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCompanyBankingInput(ctx context.Context, obj interface{}) (model.CreateCompanyBankingInput, error) {
	var it model.CreateCompanyBankingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "bankId", "fullNameOnBank", "bankAccount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "bankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankID = data
		case "fullNameOnBank":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullNameOnBank"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullNameOnBank = data
		case "bankAccount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankAccount"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankAccount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCompanyInput(ctx context.Context, obj interface{}) (model.CreateCompanyInput, error) {
	var it model.CreateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"creatorId", "name", "uniqueName", "tinNumber", "vatNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "creatorId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creatorId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatorID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "uniqueName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniqueName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UniqueName = data
		case "tinNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tinNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TinNumber = data
		case "vatNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCompanyLocationInput(ctx context.Context, obj interface{}) (model.CreateCompanyLocationInput, error) {
	var it model.CreateCompanyLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "locationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "locationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateCompanyMemberInput(ctx context.Context, obj interface{}) (model.CreateCompanyMemberInput, error) {
	var it model.CreateCompanyMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "companyId", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOCompanyRole2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateContentInput(ctx context.Context, obj interface{}) (model.CreateContentInput, error) {
	var it model.CreateContentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "contentType", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOContentType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateContentLinkInput(ctx context.Context, obj interface{}) (model.CreateContentLinkInput, error) {
	var it model.CreateContentLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contentId", "link", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentID = data
		case "link":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Link = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateFundingInput(ctx context.Context, obj interface{}) (model.CreateFundingInput, error) {
	var it model.CreateFundingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "amount", "currency", "key", "method", "fundingTxRef", "reference", "paymentDate", "redirectUrl", "status", "extra", "log", "tax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "fundingTxRef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingTxRef"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingTxRef = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "paymentDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentDate = data
		case "redirectUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirectUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RedirectURL = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOFundingStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "extra":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extra"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extra = data
		case "log":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Log = data
		case "tax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tax"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tax = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateHourlyRateInput(ctx context.Context, obj interface{}) (model.CreateHourlyRateInput, error) {
	var it model.CreateHourlyRateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "active", "hourlyRate", "minHourlyVolume", "maxHourlyVolume"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "hourlyRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hourlyRate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.HourlyRate = data
		case "minHourlyVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minHourlyVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinHourlyVolume = data
		case "maxHourlyVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxHourlyVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxHourlyVolume = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateLanguageInput(ctx context.Context, obj interface{}) (model.CreateLanguageInput, error) {
	var it model.CreateLanguageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"language"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "language":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Language = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateLocationInput(ctx context.Context, obj interface{}) (model.CreateLocationInput, error) {
	var it model.CreateLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"country", "state", "city", "address", "postalCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "postalCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateWithdrawalInput(ctx context.Context, obj interface{}) (model.CreateWithdrawalInput, error) {
	var it model.CreateWithdrawalInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "accountBankId", "totalAmount", "currency", "fundingKey", "method", "reference", "paymentDate", "status", "extra", "log"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "accountBankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountBankId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountBankID = data
		case "totalAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAmount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "fundingKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingKey = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "paymentDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "extra":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extra"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extra = data
		case "log":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Log = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputfundingFilter(ctx context.Context, obj interface{}) (model.FundingFilter, error) {
	var it model.FundingFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"companyId", "status", "amount", "currency", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "companyId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOFundingStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputlanguageFilter(ctx context.Context, obj interface{}) (model.LanguageFilter, error) {
	var it model.LanguageFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputminMaxFilterInput(ctx context.Context, obj interface{}) (model.MinMaxFilterInput, error) {
	var it model.MinMaxFilterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAccountInput(ctx context.Context, obj interface{}) (model.UpdateAccountInput, error) {
	var it model.UpdateAccountInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userName", "email", "phoneNumber", "fullName", "birthDate", "accountType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "userName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "fullName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FullName = data
		case "birthDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthDate = data
		case "accountType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
			data, err := ec.unmarshalOAccountType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountType(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAdPaymentInput(ctx context.Context, obj interface{}) (model.UpdateAdPaymentInput, error) {
	var it model.UpdateAdPaymentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "amount", "currency", "completionTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "completionTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completionTime"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompletionTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAdvertisementCPMInput(ctx context.Context, obj interface{}) (model.UpdateAdvertisementCPMInput, error) {
	var it model.UpdateAdvertisementCPMInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "Rate", "channelShare", "providerShare", "totalBudget", "maxLifeCycle", "requiredViews"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "Rate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rate = data
		case "channelShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelShare = data
		case "providerShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderShare = data
		case "totalBudget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalBudget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalBudget = data
		case "maxLifeCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxLifeCycle"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxLifeCycle = data
		case "requiredViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiredViews"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequiredViews = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAdvertisementInput(ctx context.Context, obj interface{}) (model.UpdateAdvertisementInput, error) {
	var it model.UpdateAdvertisementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOAdStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAdvertisementResultInput(ctx context.Context, obj interface{}) (model.UpdateAdvertisementResultInput, error) {
	var it model.UpdateAdvertisementResultInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"advertisementId", "startedAt", "budget", "providerBudgetShare", "channelBudgetShare", "totalHour", "totalClick", "totalViews", "totalForward", "totalReaction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "advertisementId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("advertisementId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdvertisementID = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "budget":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("budget"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Budget = data
		case "providerBudgetShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerBudgetShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProviderBudgetShare = data
		case "channelBudgetShare":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelBudgetShare"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelBudgetShare = data
		case "totalHour":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalHour"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalHour = data
		case "totalClick":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalClick"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalClick = data
		case "totalViews":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalViews"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalViews = data
		case "totalForward":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalForward"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalForward = data
		case "totalReaction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalReaction"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalReaction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateAudienceInput(ctx context.Context, obj interface{}) (model.UpdateAudienceInput, error) {
	var it model.UpdateAudienceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "category", "language"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "language":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Language = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBankInput(ctx context.Context, obj interface{}) (model.UpdateBankInput, error) {
	var it model.UpdateBankInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "bankName", "bankCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "bankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "bankCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateBudgetInput(ctx context.Context, obj interface{}) (model.UpdateBudgetInput, error) {
	var it model.UpdateBudgetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"campaignId", "initialAmount", "usedAmount", "refundedAmount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "campaignId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CampaignID = data
		case "initialAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialAmount = data
		case "usedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsedAmount = data
		case "refundedAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refundedAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RefundedAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCPMRateInput(ctx context.Context, obj interface{}) (model.UpdateCPMRateInput, error) {
	var it model.UpdateCPMRateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "active", "CPM", "minCPMVolume"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "CPM":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CPM"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Cpm = data
		case "minCPMVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minCPMVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinCPMVolume = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCampaignInput(ctx context.Context, obj interface{}) (model.UpdateCampaignInput, error) {
	var it model.UpdateCampaignInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "objective", "startDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "objective":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("objective"))
			data, err := ec.unmarshalOObjectiveType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Objective = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateChannelBalanceInput(ctx context.Context, obj interface{}) (model.UpdateChannelBalanceInput, error) {
	var it model.UpdateChannelBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "amount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateChannelDetailInput(ctx context.Context, obj interface{}) (model.UpdateChannelDetailInput, error) {
	var it model.UpdateChannelDetailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"channelId", "subCount", "averagePostView", "postToSubRatio", "PostFrequency", "lastPostId", "lastPost", "collectedDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "channelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelID = data
		case "subCount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subCount"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubCount = data
		case "averagePostView":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("averagePostView"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.AveragePostView = data
		case "postToSubRatio":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postToSubRatio"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostToSubRatio = data
		case "PostFrequency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PostFrequency"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostFrequency = data
		case "lastPostId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastPostId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastPostID = data
		case "lastPost":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastPost"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastPost = data
		case "collectedDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collectedDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CollectedDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateChannelInput(ctx context.Context, obj interface{}) (model.UpdateChannelInput, error) {
	var it model.UpdateChannelInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "ownerId", "userName", "name", "description", "botAddAsAdmin", "country", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		case "userName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "botAddAsAdmin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botAddAsAdmin"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BotAddAsAdmin = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateChannelLifeTimeBalanceInput(ctx context.Context, obj interface{}) (model.UpdateChannelLifeTimeBalanceInput, error) {
	var it model.UpdateChannelLifeTimeBalanceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "totalAmount", "currency", "totalHour", "totalAd"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "totalAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "totalHour":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalHour"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalHour = data
		case "totalAd":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAd"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAd = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCompanyInput(ctx context.Context, obj interface{}) (model.UpdateCompanyInput, error) {
	var it model.UpdateCompanyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "uniqueName", "tinNumber", "vatNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "uniqueName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uniqueName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UniqueName = data
		case "tinNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tinNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TinNumber = data
		case "vatNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateCompanyMemberInput(ctx context.Context, obj interface{}) (model.UpdateCompanyMemberInput, error) {
	var it model.UpdateCompanyMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOCompanyRole2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateContentInput(ctx context.Context, obj interface{}) (model.UpdateContentInput, error) {
	var it model.UpdateContentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "contentType", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOContentType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateContentLinkInput(ctx context.Context, obj interface{}) (model.UpdateContentLinkInput, error) {
	var it model.UpdateContentLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contentId", "link", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentID = data
		case "link":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Link = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateFundingInput(ctx context.Context, obj interface{}) (model.UpdateFundingInput, error) {
	var it model.UpdateFundingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "amount", "currency", "key", "method", "fundingTxRef", "reference", "paymentDate", "redirectUrl", "status", "extra", "log", "tax"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "fundingTxRef":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingTxRef"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingTxRef = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "paymentDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentDate = data
		case "redirectUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("redirectUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RedirectURL = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOFundingStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "extra":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extra"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extra = data
		case "log":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Log = data
		case "tax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tax"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tax = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateHourlyRateInput(ctx context.Context, obj interface{}) (model.UpdateHourlyRateInput, error) {
	var it model.UpdateHourlyRateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "active", "hourlyRate", "minHourlyVolume", "maxHourlyVolume"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "active":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Active = data
		case "hourlyRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hourlyRate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.HourlyRate = data
		case "minHourlyVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minHourlyVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MinHourlyVolume = data
		case "maxHourlyVolume":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxHourlyVolume"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxHourlyVolume = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateLocationInput(ctx context.Context, obj interface{}) (model.UpdateLocationInput, error) {
	var it model.UpdateLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "country", "state", "city", "address", "postalCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "state":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "city":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "postalCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateWithdrawalInput(ctx context.Context, obj interface{}) (model.UpdateWithdrawalInput, error) {
	var it model.UpdateWithdrawalInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "totalAmount", "currency", "fundingKey", "method", "reference", "paymentDate", "status", "extra", "log"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "totalAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAmount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "fundingKey":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingKey"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingKey = data
		case "method":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "reference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "paymentDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentDate"))
			data, err := ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PaymentDate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "extra":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extra"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extra = data
		case "log":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("log"))
			data, err := ec.unmarshalOAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
			it.Log = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputwithdrawalFilter(ctx context.Context, obj interface{}) (model.WithdrawalFilter, error) {
	var it model.WithdrawalFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"accountId", "accountBankId", "status", "totalAmount", "currency", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "accountId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountID = data
		case "accountBankId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountBankId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountBankID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "totalAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalAmount"))
			data, err := ec.unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalAmount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accountImplementors = []string{"Account"}

func (ec *executionContext) _Account(ctx context.Context, sel ast.SelectionSet, obj *model.Account) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Account")
		case "id":
			out.Values[i] = ec._Account_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Account_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userName":
			out.Values[i] = ec._Account_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Account_email(ctx, field, obj)
		case "phoneNumber":
			out.Values[i] = ec._Account_phoneNumber(ctx, field, obj)
		case "fullName":
			out.Values[i] = ec._Account_fullName(ctx, field, obj)
		case "birthDate":
			out.Values[i] = ec._Account_birthDate(ctx, field, obj)
		case "accountType":
			out.Values[i] = ec._Account_accountType(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Account_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Account_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var accountBankingImplementors = []string{"AccountBanking"}

func (ec *executionContext) _AccountBanking(ctx context.Context, sel ast.SelectionSet, obj *model.AccountBanking) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accountBankingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccountBanking")
		case "id":
			out.Values[i] = ec._AccountBanking_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountId":
			out.Values[i] = ec._AccountBanking_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankId":
			out.Values[i] = ec._AccountBanking_bankId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fullNameOnBank":
			out.Values[i] = ec._AccountBanking_fullNameOnBank(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount":
			out.Values[i] = ec._AccountBanking_bankAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currency":
			out.Values[i] = ec._AccountBanking_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AccountBanking_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AccountBanking_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._AccountBanking_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var adPaymentsImplementors = []string{"AdPayments"}

func (ec *executionContext) _AdPayments(ctx context.Context, sel ast.SelectionSet, obj *model.AdPayments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adPaymentsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdPayments")
		case "id":
			out.Values[i] = ec._AdPayments_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "advertisementId":
			out.Values[i] = ec._AdPayments_advertisementId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountId":
			out.Values[i] = ec._AdPayments_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "campaignId":
			out.Values[i] = ec._AdPayments_campaignId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._AdPayments_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._AdPayments_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._AdPayments_currency(ctx, field, obj)
		case "completionTime":
			out.Values[i] = ec._AdPayments_completionTime(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AdPayments_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AdPayments_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._AdPayments_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var advertisementCPMsImplementors = []string{"AdvertisementCPMs"}

func (ec *executionContext) _AdvertisementCPMs(ctx context.Context, sel ast.SelectionSet, obj *model.AdvertisementCPMs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, advertisementCPMsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdvertisementCPMs")
		case "advertisementId":
			out.Values[i] = ec._AdvertisementCPMs_advertisementId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Rate":
			out.Values[i] = ec._AdvertisementCPMs_Rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelShare":
			out.Values[i] = ec._AdvertisementCPMs_channelShare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "providerShare":
			out.Values[i] = ec._AdvertisementCPMs_providerShare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalBudget":
			out.Values[i] = ec._AdvertisementCPMs_totalBudget(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxLifeCycle":
			out.Values[i] = ec._AdvertisementCPMs_maxLifeCycle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredViews":
			out.Values[i] = ec._AdvertisementCPMs_requiredViews(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var advertisementResultsImplementors = []string{"AdvertisementResults"}

func (ec *executionContext) _AdvertisementResults(ctx context.Context, sel ast.SelectionSet, obj *model.AdvertisementResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, advertisementResultsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdvertisementResults")
		case "advertisementId":
			out.Values[i] = ec._AdvertisementResults_advertisementId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startedAt":
			out.Values[i] = ec._AdvertisementResults_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "budget":
			out.Values[i] = ec._AdvertisementResults_budget(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "providerBudgetShare":
			out.Values[i] = ec._AdvertisementResults_providerBudgetShare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelBudgetShare":
			out.Values[i] = ec._AdvertisementResults_channelBudgetShare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalHour":
			out.Values[i] = ec._AdvertisementResults_totalHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalClick":
			out.Values[i] = ec._AdvertisementResults_totalClick(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalViews":
			out.Values[i] = ec._AdvertisementResults_totalViews(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalForward":
			out.Values[i] = ec._AdvertisementResults_totalForward(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalReaction":
			out.Values[i] = ec._AdvertisementResults_totalReaction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var advertisementsImplementors = []string{"Advertisements"}

func (ec *executionContext) _Advertisements(ctx context.Context, sel ast.SelectionSet, obj *model.Advertisements) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, advertisementsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Advertisements")
		case "id":
			out.Values[i] = ec._Advertisements_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "campaignId":
			out.Values[i] = ec._Advertisements_campaignId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentId":
			out.Values[i] = ec._Advertisements_contentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._Advertisements_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "messageId":
			out.Values[i] = ec._Advertisements_messageId(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Advertisements_status(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Advertisements_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Advertisements_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Advertisements_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var audiencesImplementors = []string{"Audiences"}

func (ec *executionContext) _Audiences(ctx context.Context, sel ast.SelectionSet, obj *model.Audiences) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, audiencesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Audiences")
		case "campaignId":
			out.Values[i] = ec._Audiences_campaignId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._Audiences_category(ctx, field, obj)
		case "language":
			out.Values[i] = ec._Audiences_language(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var banksImplementors = []string{"Banks"}

func (ec *executionContext) _Banks(ctx context.Context, sel ast.SelectionSet, obj *model.Banks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, banksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Banks")
		case "id":
			out.Values[i] = ec._Banks_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankName":
			out.Values[i] = ec._Banks_bankName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankCode":
			out.Values[i] = ec._Banks_bankCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Banks_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Banks_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Banks_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var budgetsImplementors = []string{"Budgets"}

func (ec *executionContext) _Budgets(ctx context.Context, sel ast.SelectionSet, obj *model.Budgets) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, budgetsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Budgets")
		case "campaignId":
			out.Values[i] = ec._Budgets_campaignId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "initialAmount":
			out.Values[i] = ec._Budgets_initialAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usedAmount":
			out.Values[i] = ec._Budgets_usedAmount(ctx, field, obj)
		case "refundedAmount":
			out.Values[i] = ec._Budgets_refundedAmount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Budgets_currency(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var campaignsImplementors = []string{"Campaigns"}

func (ec *executionContext) _Campaigns(ctx context.Context, sel ast.SelectionSet, obj *model.Campaigns) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, campaignsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Campaigns")
		case "id":
			out.Values[i] = ec._Campaigns_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyId":
			out.Values[i] = ec._Campaigns_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Campaigns_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objective":
			out.Values[i] = ec._Campaigns_objective(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._Campaigns_startDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Campaigns_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Campaigns_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Campaigns_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var categoriesImplementors = []string{"Categories"}

func (ec *executionContext) _Categories(ctx context.Context, sel ast.SelectionSet, obj *model.Categories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoriesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Categories")
		case "category":
			out.Values[i] = ec._Categories_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelBalancesImplementors = []string{"ChannelBalances"}

func (ec *executionContext) _ChannelBalances(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelBalances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelBalancesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelBalances")
		case "id":
			out.Values[i] = ec._ChannelBalances_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountId":
			out.Values[i] = ec._ChannelBalances_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._ChannelBalances_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._ChannelBalances_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._ChannelBalances_currency(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ChannelBalances_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ChannelBalances_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._ChannelBalances_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelCategoriesImplementors = []string{"ChannelCategories"}

func (ec *executionContext) _ChannelCategories(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelCategories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelCategoriesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelCategories")
		case "id":
			out.Values[i] = ec._ChannelCategories_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._ChannelCategories_channelId(ctx, field, obj)
		case "category":
			out.Values[i] = ec._ChannelCategories_category(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelCollectedAdLinksImplementors = []string{"ChannelCollectedAdLinks"}

func (ec *executionContext) _ChannelCollectedAdLinks(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelCollectedAdLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelCollectedAdLinksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelCollectedAdLinks")
		case "channelBalanceId":
			out.Values[i] = ec._ChannelCollectedAdLinks_channelBalanceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "adPaymentId":
			out.Values[i] = ec._ChannelCollectedAdLinks_adPaymentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelContentLanguagesImplementors = []string{"ChannelContentLanguages"}

func (ec *executionContext) _ChannelContentLanguages(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelContentLanguages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelContentLanguagesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelContentLanguages")
		case "id":
			out.Values[i] = ec._ChannelContentLanguages_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._ChannelContentLanguages_channelId(ctx, field, obj)
		case "language":
			out.Values[i] = ec._ChannelContentLanguages_language(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelDetailsImplementors = []string{"ChannelDetails"}

func (ec *executionContext) _ChannelDetails(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelDetails")
		case "channelId":
			out.Values[i] = ec._ChannelDetails_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subCount":
			out.Values[i] = ec._ChannelDetails_subCount(ctx, field, obj)
		case "averagePostView":
			out.Values[i] = ec._ChannelDetails_averagePostView(ctx, field, obj)
		case "postToSubRatio":
			out.Values[i] = ec._ChannelDetails_postToSubRatio(ctx, field, obj)
		case "PostFrequency":
			out.Values[i] = ec._ChannelDetails_PostFrequency(ctx, field, obj)
		case "lastPostId":
			out.Values[i] = ec._ChannelDetails_lastPostId(ctx, field, obj)
		case "lastPost":
			out.Values[i] = ec._ChannelDetails_lastPost(ctx, field, obj)
		case "collectedDate":
			out.Values[i] = ec._ChannelDetails_collectedDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ChannelDetails_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ChannelDetails_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._ChannelDetails_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelLifeTimeBalancesImplementors = []string{"ChannelLifeTimeBalances"}

func (ec *executionContext) _ChannelLifeTimeBalances(ctx context.Context, sel ast.SelectionSet, obj *model.ChannelLifeTimeBalances) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelLifeTimeBalancesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelLifeTimeBalances")
		case "id":
			out.Values[i] = ec._ChannelLifeTimeBalances_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountId":
			out.Values[i] = ec._ChannelLifeTimeBalances_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._ChannelLifeTimeBalances_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAmount":
			out.Values[i] = ec._ChannelLifeTimeBalances_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currency":
			out.Values[i] = ec._ChannelLifeTimeBalances_currency(ctx, field, obj)
		case "totalHour":
			out.Values[i] = ec._ChannelLifeTimeBalances_totalHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAd":
			out.Values[i] = ec._ChannelLifeTimeBalances_totalAd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ChannelLifeTimeBalances_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ChannelLifeTimeBalances_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._ChannelLifeTimeBalances_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var channelsImplementors = []string{"Channels"}

func (ec *executionContext) _Channels(ctx context.Context, sel ast.SelectionSet, obj *model.Channels) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Channels")
		case "id":
			out.Values[i] = ec._Channels_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ownerId":
			out.Values[i] = ec._Channels_ownerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userName":
			out.Values[i] = ec._Channels_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Channels_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Channels_description(ctx, field, obj)
		case "botAddAsAdmin":
			out.Values[i] = ec._Channels_botAddAsAdmin(ctx, field, obj)
		case "channelCreatedAt":
			out.Values[i] = ec._Channels_channelCreatedAt(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Channels_country(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Channels_currency(ctx, field, obj)
		case "cpmRating":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channels_cpmRating(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "categories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channels_categories(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "languages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channels_languages(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "channelDetails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Channels_channelDetails(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Channels_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Channels_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Channels_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companiesImplementors = []string{"Companies"}

func (ec *executionContext) _Companies(ctx context.Context, sel ast.SelectionSet, obj *model.Companies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companiesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Companies")
		case "id":
			out.Values[i] = ec._Companies_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "creatorId":
			out.Values[i] = ec._Companies_creatorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Companies_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uniqueName":
			out.Values[i] = ec._Companies_uniqueName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tinNumber":
			out.Values[i] = ec._Companies_tinNumber(ctx, field, obj)
		case "vatNumber":
			out.Values[i] = ec._Companies_vatNumber(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Companies_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Companies_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyBankingsImplementors = []string{"CompanyBankings"}

func (ec *executionContext) _CompanyBankings(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyBankings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyBankingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyBankings")
		case "id":
			out.Values[i] = ec._CompanyBankings_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyId":
			out.Values[i] = ec._CompanyBankings_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankId":
			out.Values[i] = ec._CompanyBankings_bankId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fullNameOnBank":
			out.Values[i] = ec._CompanyBankings_fullNameOnBank(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount":
			out.Values[i] = ec._CompanyBankings_bankAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currency":
			out.Values[i] = ec._CompanyBankings_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._CompanyBankings_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CompanyBankings_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._CompanyBankings_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyLocationsImplementors = []string{"CompanyLocations"}

func (ec *executionContext) _CompanyLocations(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyLocations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyLocationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyLocations")
		case "companyId":
			out.Values[i] = ec._CompanyLocations_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locationId":
			out.Values[i] = ec._CompanyLocations_locationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyMembersImplementors = []string{"CompanyMembers"}

func (ec *executionContext) _CompanyMembers(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyMembers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyMembersImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyMembers")
		case "id":
			out.Values[i] = ec._CompanyMembers_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "accountId":
			out.Values[i] = ec._CompanyMembers_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "companyId":
			out.Values[i] = ec._CompanyMembers_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._CompanyMembers_role(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._CompanyMembers_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CompanyMembers_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contentLinksImplementors = []string{"ContentLinks"}

func (ec *executionContext) _ContentLinks(ctx context.Context, sel ast.SelectionSet, obj *model.ContentLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentLinksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentLinks")
		case "contentId":
			out.Values[i] = ec._ContentLinks_contentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "link":
			out.Values[i] = ec._ContentLinks_link(ctx, field, obj)
		case "title":
			out.Values[i] = ec._ContentLinks_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contentsImplementors = []string{"Contents"}

func (ec *executionContext) _Contents(ctx context.Context, sel ast.SelectionSet, obj *model.Contents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contents")
		case "id":
			out.Values[i] = ec._Contents_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "campaignId":
			out.Values[i] = ec._Contents_campaignId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentType":
			out.Values[i] = ec._Contents_contentType(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Contents_description(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Contents_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Contents_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Contents_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletionResultImplementors = []string{"DeletionResult"}

func (ec *executionContext) _DeletionResult(ctx context.Context, sel ast.SelectionSet, obj *model.DeletionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletionResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletionResult")
		case "success":
			out.Values[i] = ec._DeletionResult_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._DeletionResult_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fundingImplementors = []string{"Funding"}

func (ec *executionContext) _Funding(ctx context.Context, sel ast.SelectionSet, obj *model.Funding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fundingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Funding")
		case "id":
			out.Values[i] = ec._Funding_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "companyId":
			out.Values[i] = ec._Funding_companyId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._Funding_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currency":
			out.Values[i] = ec._Funding_currency(ctx, field, obj)
		case "key":
			out.Values[i] = ec._Funding_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "method":
			out.Values[i] = ec._Funding_method(ctx, field, obj)
		case "fundingTxRef":
			out.Values[i] = ec._Funding_fundingTxRef(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Funding_reference(ctx, field, obj)
		case "paymentDate":
			out.Values[i] = ec._Funding_paymentDate(ctx, field, obj)
		case "redirectUrl":
			out.Values[i] = ec._Funding_redirectUrl(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Funding_status(ctx, field, obj)
		case "extra":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Funding_extra(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "log":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Funding_log(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tax":
			out.Values[i] = ec._Funding_tax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Funding_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Funding_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Funding_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var hourlyRatesImplementors = []string{"HourlyRates"}

func (ec *executionContext) _HourlyRates(ctx context.Context, sel ast.SelectionSet, obj *model.HourlyRates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hourlyRatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HourlyRates")
		case "id":
			out.Values[i] = ec._HourlyRates_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._HourlyRates_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._HourlyRates_active(ctx, field, obj)
		case "hourlyRate":
			out.Values[i] = ec._HourlyRates_hourlyRate(ctx, field, obj)
		case "minHourlyVolume":
			out.Values[i] = ec._HourlyRates_minHourlyVolume(ctx, field, obj)
		case "maxHourlyVolume":
			out.Values[i] = ec._HourlyRates_maxHourlyVolume(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._HourlyRates_createdAt(ctx, field, obj)
		case "removeAt":
			out.Values[i] = ec._HourlyRates_removeAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var languagesImplementors = []string{"Languages"}

func (ec *executionContext) _Languages(ctx context.Context, sel ast.SelectionSet, obj *model.Languages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, languagesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Languages")
		case "language":
			out.Values[i] = ec._Languages_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationsImplementors = []string{"Locations"}

func (ec *executionContext) _Locations(ctx context.Context, sel ast.SelectionSet, obj *model.Locations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Locations")
		case "id":
			out.Values[i] = ec._Locations_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._Locations_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "state":
			out.Values[i] = ec._Locations_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "city":
			out.Values[i] = ec._Locations_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._Locations_address(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._Locations_postalCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Locations_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Locations_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Locations_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCPMRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCPMRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCPMRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCPMRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAccountBanking":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAccountBanking(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAccountBanking":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAccountBanking(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAdPayment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdPayment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAdPayment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdPayment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAdvertisementCPM":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdvertisementCPM(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAdvertisementCPM":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdvertisementCPM(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAdvertisementResult":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdvertisementResult(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAdvertisementResult":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdvertisementResult(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAdvertisement":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAdvertisement(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAdvertisement":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAdvertisement(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAudience":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAudience(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAudience":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAudience(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createBank":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBank(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateBank":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBank(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteBank":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteBank(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createBudget":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createBudget(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateBudget":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateBudget(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCampaign":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCampaign(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCampaign":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCampaign(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCampaign":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCampaign(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCategory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChannel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChannel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChannel":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChannel(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChannelBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChannelBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelCategory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChannelCategory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChannelCategory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelCollectedAdLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelCollectedAdLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChannelCollectedAdLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChannelCollectedAdLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelContentLanguage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelContentLanguage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChannelContentLanguage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChannelContentLanguage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelDetail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelDetail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChannelDetail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChannelDetail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChannelLifeTimeBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChannelLifeTimeBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateChannelLifeTimeBalance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateChannelLifeTimeBalance(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompany(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCompany":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompany(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompanyBanking":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompanyBanking(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCompanyBanking":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCompanyBanking(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompanyLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompanyLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteCompanyLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCompanyLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCompanyMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCompanyMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCompanyMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompanyMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createContent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createContent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateContent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateContent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createContentLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createContentLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateContentLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateContentLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFunding":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFunding(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFunding":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFunding(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createHourlyRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createHourlyRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateHourlyRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateHourlyRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLanguage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLanguage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWithdrawal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWithdrawal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateWithdrawal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWithdrawal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createWithdrawalChannelLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWithdrawalChannelLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteWithdrawalChannelLink":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteWithdrawalChannelLink(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "account":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_account(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cpmRateByChannelId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cpmRateByChannelId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "accountBankingById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_accountBankingById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllAccountBankings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAccountBankings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "adPaymentById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_adPaymentById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllAdPayments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdPayments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "advertisementCPMById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_advertisementCPMById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "advertisementResultById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_advertisementResultById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "advertisementById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_advertisementById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllAdvertisements":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAdvertisements(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "audienceById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_audienceById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bankById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bankById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllBanks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllBanks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "budgetById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_budgetById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "campaignById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_campaignById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllCampaigns":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllCampaigns(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "categoryById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_categoryById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllCategories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllChannels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllChannels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelBalanceById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelBalanceById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllChannelCategories":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllChannelCategories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelCollectedAdLinkById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelCollectedAdLinkById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelCollectedAdLink":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelCollectedAdLink(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllChannelCollectedAdLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllChannelCollectedAdLinks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllChannelContentLanguages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllChannelContentLanguages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllChannelDetails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllChannelDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelDetailById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelDetailById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "channelLifeTimeBalanceById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_channelLifeTimeBalanceById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companyById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companyById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companyBankingById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companyBankingById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllCompanyBankings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllCompanyBankings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companyLocationById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companyLocationById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companyMemberById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companyMemberById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllCompanyMembers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllCompanyMembers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contentById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contentById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contentLinkById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contentLinkById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "fundingById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fundingById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllFunding":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllFunding(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "HourlyRateById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_HourlyRateById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "languageById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_languageById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllLanguages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllLanguages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "locationById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_locationById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "withdrawalById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_withdrawalById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllWithdrawals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllWithdrawals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "withdrawalChannelLinkById":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_withdrawalChannelLinkById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "withdrawalChannelLink":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_withdrawalChannelLink(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllWithdrawalChannelLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllWithdrawalChannelLinks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._User_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "done":
			out.Values[i] = ec._User_done(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawalChannelLinksImplementors = []string{"WithdrawalChannelLinks"}

func (ec *executionContext) _WithdrawalChannelLinks(ctx context.Context, sel ast.SelectionSet, obj *model.WithdrawalChannelLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawalChannelLinksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WithdrawalChannelLinks")
		case "withdrawalId":
			out.Values[i] = ec._WithdrawalChannelLinks_withdrawalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelBalanceId":
			out.Values[i] = ec._WithdrawalChannelLinks_channelBalanceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var withdrawalsImplementors = []string{"Withdrawals"}

func (ec *executionContext) _Withdrawals(ctx context.Context, sel ast.SelectionSet, obj *model.Withdrawals) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, withdrawalsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Withdrawals")
		case "id":
			out.Values[i] = ec._Withdrawals_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accountId":
			out.Values[i] = ec._Withdrawals_accountId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accountBankId":
			out.Values[i] = ec._Withdrawals_accountBankId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalAmount":
			out.Values[i] = ec._Withdrawals_totalAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currency":
			out.Values[i] = ec._Withdrawals_currency(ctx, field, obj)
		case "fundingKey":
			out.Values[i] = ec._Withdrawals_fundingKey(ctx, field, obj)
		case "method":
			out.Values[i] = ec._Withdrawals_method(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Withdrawals_reference(ctx, field, obj)
		case "paymentDate":
			out.Values[i] = ec._Withdrawals_paymentDate(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Withdrawals_status(ctx, field, obj)
		case "extra":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Withdrawals_extra(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "log":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Withdrawals_log(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._Withdrawals_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Withdrawals_updatedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._Withdrawals_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cpmRatesImplementors = []string{"cpmRates"}

func (ec *executionContext) _cpmRates(ctx context.Context, sel ast.SelectionSet, obj *model.CpmRates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cpmRatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("cpmRates")
		case "id":
			out.Values[i] = ec._cpmRates_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelId":
			out.Values[i] = ec._cpmRates_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._cpmRates_active(ctx, field, obj)
		case "CPM":
			out.Values[i] = ec._cpmRates_CPM(ctx, field, obj)
		case "minCPMVolume":
			out.Values[i] = ec._cpmRates_minCPMVolume(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._cpmRates_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._cpmRates_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccount2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx context.Context, sel ast.SelectionSet, v model.Account) graphql.Marshaler {
	return ec._Account(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccount2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccount(ctx context.Context, sel ast.SelectionSet, v *model.Account) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Account(ctx, sel, v)
}

func (ec *executionContext) marshalNAccountBanking2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBanking(ctx context.Context, sel ast.SelectionSet, v model.AccountBanking) graphql.Marshaler {
	return ec._AccountBanking(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccountBanking2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBankingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AccountBanking) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAccountBanking2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBanking(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAccountBanking2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBanking(ctx context.Context, sel ast.SelectionSet, v *model.AccountBanking) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AccountBanking(ctx, sel, v)
}

func (ec *executionContext) marshalNAdPayments2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx context.Context, sel ast.SelectionSet, v model.AdPayments) graphql.Marshaler {
	return ec._AdPayments(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdPayments2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPaymentsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdPayments) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdPayments2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdPayments2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPayments(ctx context.Context, sel ast.SelectionSet, v *model.AdPayments) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdPayments(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx context.Context, v interface{}) (model.AdStatus, error) {
	var res model.AdStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx context.Context, sel ast.SelectionSet, v model.AdStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAdvertisementCPMs2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementCPMs(ctx context.Context, sel ast.SelectionSet, v model.AdvertisementCPMs) graphql.Marshaler {
	return ec._AdvertisementCPMs(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdvertisementCPMs2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementCPMs(ctx context.Context, sel ast.SelectionSet, v *model.AdvertisementCPMs) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdvertisementCPMs(ctx, sel, v)
}

func (ec *executionContext) marshalNAdvertisementResults2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementResults(ctx context.Context, sel ast.SelectionSet, v model.AdvertisementResults) graphql.Marshaler {
	return ec._AdvertisementResults(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdvertisementResults2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementResults(ctx context.Context, sel ast.SelectionSet, v *model.AdvertisementResults) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdvertisementResults(ctx, sel, v)
}

func (ec *executionContext) marshalNAdvertisements2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx context.Context, sel ast.SelectionSet, v model.Advertisements) graphql.Marshaler {
	return ec._Advertisements(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdvertisements2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Advertisements) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdvertisements2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdvertisements2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisements(ctx context.Context, sel ast.SelectionSet, v *model.Advertisements) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Advertisements(ctx, sel, v)
}

func (ec *executionContext) marshalNAudiences2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAudiences(ctx context.Context, sel ast.SelectionSet, v model.Audiences) graphql.Marshaler {
	return ec._Audiences(ctx, sel, &v)
}

func (ec *executionContext) marshalNAudiences2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAudiences(ctx context.Context, sel ast.SelectionSet, v *model.Audiences) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Audiences(ctx, sel, v)
}

func (ec *executionContext) marshalNBanks2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx context.Context, sel ast.SelectionSet, v model.Banks) graphql.Marshaler {
	return ec._Banks(ctx, sel, &v)
}

func (ec *executionContext) marshalNBanks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanksᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Banks) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBanks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBanks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBanks(ctx context.Context, sel ast.SelectionSet, v *model.Banks) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Banks(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBudgets2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBudgets(ctx context.Context, sel ast.SelectionSet, v model.Budgets) graphql.Marshaler {
	return ec._Budgets(ctx, sel, &v)
}

func (ec *executionContext) marshalNBudgets2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBudgets(ctx context.Context, sel ast.SelectionSet, v *model.Budgets) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Budgets(ctx, sel, v)
}

func (ec *executionContext) marshalNCampaigns2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx context.Context, sel ast.SelectionSet, v model.Campaigns) graphql.Marshaler {
	return ec._Campaigns(ctx, sel, &v)
}

func (ec *executionContext) marshalNCampaigns2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaignsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Campaigns) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCampaigns2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCampaigns2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaigns(ctx context.Context, sel ast.SelectionSet, v *model.Campaigns) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Campaigns(ctx, sel, v)
}

func (ec *executionContext) marshalNCategories2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategories(ctx context.Context, sel ast.SelectionSet, v model.Categories) graphql.Marshaler {
	return ec._Categories(ctx, sel, &v)
}

func (ec *executionContext) marshalNCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategoriesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Categories) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategories(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategories(ctx context.Context, sel ast.SelectionSet, v *model.Categories) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Categories(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelBalances2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelBalances(ctx context.Context, sel ast.SelectionSet, v model.ChannelBalances) graphql.Marshaler {
	return ec._ChannelBalances(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelBalances(ctx context.Context, sel ast.SelectionSet, v *model.ChannelBalances) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelBalances(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelCategories2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx context.Context, sel ast.SelectionSet, v model.ChannelCategories) graphql.Marshaler {
	return ec._ChannelCategories(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoriesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelCategories) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx context.Context, sel ast.SelectionSet, v *model.ChannelCategories) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelCategories(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelCollectedAdLinks2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx context.Context, sel ast.SelectionSet, v model.ChannelCollectedAdLinks) graphql.Marshaler {
	return ec._ChannelCollectedAdLinks(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelCollectedAdLinks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinksᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelCollectedAdLinks) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelCollectedAdLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelCollectedAdLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinks(ctx context.Context, sel ast.SelectionSet, v *model.ChannelCollectedAdLinks) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelCollectedAdLinks(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelContentLanguages2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx context.Context, sel ast.SelectionSet, v model.ChannelContentLanguages) graphql.Marshaler {
	return ec._ChannelContentLanguages(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelContentLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguagesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelContentLanguages) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelContentLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelContentLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx context.Context, sel ast.SelectionSet, v *model.ChannelContentLanguages) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelContentLanguages(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelDetails2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx context.Context, sel ast.SelectionSet, v model.ChannelDetails) graphql.Marshaler {
	return ec._ChannelDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelDetails2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx context.Context, sel ast.SelectionSet, v *model.ChannelDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNChannelLifeTimeBalances2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelLifeTimeBalances(ctx context.Context, sel ast.SelectionSet, v model.ChannelLifeTimeBalances) graphql.Marshaler {
	return ec._ChannelLifeTimeBalances(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannelLifeTimeBalances2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelLifeTimeBalances(ctx context.Context, sel ast.SelectionSet, v *model.ChannelLifeTimeBalances) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelLifeTimeBalances(ctx, sel, v)
}

func (ec *executionContext) marshalNChannels2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx context.Context, sel ast.SelectionSet, v model.Channels) graphql.Marshaler {
	return ec._Channels(ctx, sel, &v)
}

func (ec *executionContext) marshalNChannels2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Channels) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannels2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannels2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannels(ctx context.Context, sel ast.SelectionSet, v *model.Channels) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Channels(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanies2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanies(ctx context.Context, sel ast.SelectionSet, v model.Companies) graphql.Marshaler {
	return ec._Companies(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanies2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanies(ctx context.Context, sel ast.SelectionSet, v *model.Companies) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Companies(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyBankings2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankings(ctx context.Context, sel ast.SelectionSet, v model.CompanyBankings) graphql.Marshaler {
	return ec._CompanyBankings(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyBankings2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankingsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CompanyBankings) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyBankings2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankings(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCompanyBankings2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankings(ctx context.Context, sel ast.SelectionSet, v *model.CompanyBankings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyBankings(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyLocations2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyLocations(ctx context.Context, sel ast.SelectionSet, v model.CompanyLocations) graphql.Marshaler {
	return ec._CompanyLocations(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyLocations(ctx context.Context, sel ast.SelectionSet, v *model.CompanyLocations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyLocations(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyMembers2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx context.Context, sel ast.SelectionSet, v model.CompanyMembers) graphql.Marshaler {
	return ec._CompanyMembers(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyMembers2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembersᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CompanyMembers) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyMembers2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCompanyMembers2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMembers(ctx context.Context, sel ast.SelectionSet, v *model.CompanyMembers) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyMembers(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyRole2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx context.Context, v interface{}) (model.CompanyRole, error) {
	var res model.CompanyRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyRole2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx context.Context, sel ast.SelectionSet, v model.CompanyRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContentLinks2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentLinks(ctx context.Context, sel ast.SelectionSet, v model.ContentLinks) graphql.Marshaler {
	return ec._ContentLinks(ctx, sel, &v)
}

func (ec *executionContext) marshalNContentLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentLinks(ctx context.Context, sel ast.SelectionSet, v *model.ContentLinks) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContentLinks(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContentType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx context.Context, v interface{}) (model.ContentType, error) {
	var res model.ContentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx context.Context, sel ast.SelectionSet, v model.ContentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContents2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContents(ctx context.Context, sel ast.SelectionSet, v model.Contents) graphql.Marshaler {
	return ec._Contents(ctx, sel, &v)
}

func (ec *executionContext) marshalNContents2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContents(ctx context.Context, sel ast.SelectionSet, v *model.Contents) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contents(ctx, sel, v)
}

func (ec *executionContext) marshalNDeletionResult2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx context.Context, sel ast.SelectionSet, v model.DeletionResult) graphql.Marshaler {
	return ec._DeletionResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletionResult2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐDeletionResult(ctx context.Context, sel ast.SelectionSet, v *model.DeletionResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNFunding2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx context.Context, sel ast.SelectionSet, v model.Funding) graphql.Marshaler {
	return ec._Funding(ctx, sel, &v)
}

func (ec *executionContext) marshalNFunding2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Funding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFunding2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFunding2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFunding(ctx context.Context, sel ast.SelectionSet, v *model.Funding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Funding(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFundingStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx context.Context, v interface{}) (model.FundingStatus, error) {
	var res model.FundingStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFundingStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx context.Context, sel ast.SelectionSet, v model.FundingStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNHourlyRates2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐHourlyRates(ctx context.Context, sel ast.SelectionSet, v model.HourlyRates) graphql.Marshaler {
	return ec._HourlyRates(ctx, sel, &v)
}

func (ec *executionContext) marshalNHourlyRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐHourlyRates(ctx context.Context, sel ast.SelectionSet, v *model.HourlyRates) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HourlyRates(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLanguages2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguages(ctx context.Context, sel ast.SelectionSet, v model.Languages) graphql.Marshaler {
	return ec._Languages(ctx, sel, &v)
}

func (ec *executionContext) marshalNLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguagesᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Languages) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguages(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguages(ctx context.Context, sel ast.SelectionSet, v *model.Languages) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Languages(ctx, sel, v)
}

func (ec *executionContext) marshalNLocations2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLocations(ctx context.Context, sel ast.SelectionSet, v model.Locations) graphql.Marshaler {
	return ec._Locations(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocations2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLocations(ctx context.Context, sel ast.SelectionSet, v *model.Locations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Locations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNObjectiveType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx context.Context, v interface{}) (model.ObjectiveType, error) {
	var res model.ObjectiveType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObjectiveType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx context.Context, sel ast.SelectionSet, v model.ObjectiveType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx context.Context, v interface{}) (model.Status, error) {
	var res model.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v model.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTimestamp2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamp2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNWithdrawalChannelLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkInput(ctx context.Context, v interface{}) (model.WithdrawalChannelLinkInput, error) {
	res, err := ec.unmarshalInputWithdrawalChannelLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWithdrawalChannelLinks2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx context.Context, sel ast.SelectionSet, v model.WithdrawalChannelLinks) graphql.Marshaler {
	return ec._WithdrawalChannelLinks(ctx, sel, &v)
}

func (ec *executionContext) marshalNWithdrawalChannelLinks2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinksᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WithdrawalChannelLinks) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawalChannelLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawalChannelLinks2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinks(ctx context.Context, sel ast.SelectionSet, v *model.WithdrawalChannelLinks) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WithdrawalChannelLinks(ctx, sel, v)
}

func (ec *executionContext) marshalNWithdrawals2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx context.Context, sel ast.SelectionSet, v model.Withdrawals) graphql.Marshaler {
	return ec._Withdrawals(ctx, sel, &v)
}

func (ec *executionContext) marshalNWithdrawals2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Withdrawals) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWithdrawals2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWithdrawals2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawals(ctx context.Context, sel ast.SelectionSet, v *model.Withdrawals) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Withdrawals(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNaccountBankingsFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountBankingsFilter(ctx context.Context, v interface{}) (model.AccountBankingsFilter, error) {
	res, err := ec.unmarshalInputaccountBankingsFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNbankFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐBankFilter(ctx context.Context, v interface{}) (model.BankFilter, error) {
	res, err := ec.unmarshalInputbankFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNchannelCategoryInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryInput(ctx context.Context, v interface{}) (model.ChannelCategoryInput, error) {
	res, err := ec.unmarshalInputchannelCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNchannelCollectedAdLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkInput(ctx context.Context, v interface{}) (model.ChannelCollectedAdLinkInput, error) {
	res, err := ec.unmarshalInputchannelCollectedAdLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNchannelContentLanguageInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageInput(ctx context.Context, v interface{}) (model.ChannelContentLanguageInput, error) {
	res, err := ec.unmarshalInputchannelContentLanguageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcompanyBankingFilter2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyBankingFilter(ctx context.Context, v interface{}) (model.CompanyBankingFilter, error) {
	res, err := ec.unmarshalInputcompanyBankingFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNcpmRates2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx context.Context, sel ast.SelectionSet, v model.CpmRates) graphql.Marshaler {
	return ec._cpmRates(ctx, sel, &v)
}

func (ec *executionContext) marshalNcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx context.Context, sel ast.SelectionSet, v *model.CpmRates) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._cpmRates(ctx, sel, v)
}

func (ec *executionContext) unmarshalNcreateAccountBankingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAccountBankingInput(ctx context.Context, v interface{}) (model.CreateAccountBankingInput, error) {
	res, err := ec.unmarshalInputcreateAccountBankingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAccountInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAccountInput(ctx context.Context, v interface{}) (model.CreateAccountInput, error) {
	res, err := ec.unmarshalInputcreateAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAdPaymentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdPaymentInput(ctx context.Context, v interface{}) (model.CreateAdPaymentInput, error) {
	res, err := ec.unmarshalInputcreateAdPaymentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAdvertisementCPMInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementCPMInput(ctx context.Context, v interface{}) (model.CreateAdvertisementCPMInput, error) {
	res, err := ec.unmarshalInputcreateAdvertisementCPMInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAdvertisementInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementInput(ctx context.Context, v interface{}) (model.CreateAdvertisementInput, error) {
	res, err := ec.unmarshalInputcreateAdvertisementInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAdvertisementResultInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAdvertisementResultInput(ctx context.Context, v interface{}) (model.CreateAdvertisementResultInput, error) {
	res, err := ec.unmarshalInputcreateAdvertisementResultInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateAudienceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateAudienceInput(ctx context.Context, v interface{}) (model.CreateAudienceInput, error) {
	res, err := ec.unmarshalInputcreateAudienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateBankInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateBankInput(ctx context.Context, v interface{}) (model.CreateBankInput, error) {
	res, err := ec.unmarshalInputcreateBankInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateBudgetInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateBudgetInput(ctx context.Context, v interface{}) (model.CreateBudgetInput, error) {
	res, err := ec.unmarshalInputcreateBudgetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCPMRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCPMRateInput(ctx context.Context, v interface{}) (model.CreateCPMRateInput, error) {
	res, err := ec.unmarshalInputcreateCPMRateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCampaignInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCampaignInput(ctx context.Context, v interface{}) (model.CreateCampaignInput, error) {
	res, err := ec.unmarshalInputcreateCampaignInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCategoryInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCategoryInput(ctx context.Context, v interface{}) (model.CreateCategoryInput, error) {
	res, err := ec.unmarshalInputcreateCategoryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateChannelBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelBalanceInput(ctx context.Context, v interface{}) (model.CreateChannelBalanceInput, error) {
	res, err := ec.unmarshalInputcreateChannelBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateChannelDetailInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelDetailInput(ctx context.Context, v interface{}) (model.CreateChannelDetailInput, error) {
	res, err := ec.unmarshalInputcreateChannelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateChannelInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelInput(ctx context.Context, v interface{}) (model.CreateChannelInput, error) {
	res, err := ec.unmarshalInputcreateChannelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateChannelLifeTimeBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateChannelLifeTimeBalanceInput(ctx context.Context, v interface{}) (model.CreateChannelLifeTimeBalanceInput, error) {
	res, err := ec.unmarshalInputcreateChannelLifeTimeBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCompanyBankingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyBankingInput(ctx context.Context, v interface{}) (model.CreateCompanyBankingInput, error) {
	res, err := ec.unmarshalInputcreateCompanyBankingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCompanyInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyInput(ctx context.Context, v interface{}) (model.CreateCompanyInput, error) {
	res, err := ec.unmarshalInputcreateCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCompanyLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyLocationInput(ctx context.Context, v interface{}) (model.CreateCompanyLocationInput, error) {
	res, err := ec.unmarshalInputcreateCompanyLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateCompanyMemberInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCompanyMemberInput(ctx context.Context, v interface{}) (model.CreateCompanyMemberInput, error) {
	res, err := ec.unmarshalInputcreateCompanyMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateContentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateContentInput(ctx context.Context, v interface{}) (model.CreateContentInput, error) {
	res, err := ec.unmarshalInputcreateContentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateContentLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateContentLinkInput(ctx context.Context, v interface{}) (model.CreateContentLinkInput, error) {
	res, err := ec.unmarshalInputcreateContentLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateFundingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateFundingInput(ctx context.Context, v interface{}) (model.CreateFundingInput, error) {
	res, err := ec.unmarshalInputcreateFundingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateHourlyRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateHourlyRateInput(ctx context.Context, v interface{}) (model.CreateHourlyRateInput, error) {
	res, err := ec.unmarshalInputcreateHourlyRateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateLanguageInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateLanguageInput(ctx context.Context, v interface{}) (model.CreateLanguageInput, error) {
	res, err := ec.unmarshalInputcreateLanguageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateLocationInput(ctx context.Context, v interface{}) (model.CreateLocationInput, error) {
	res, err := ec.unmarshalInputcreateLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateWithdrawalInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateWithdrawalInput(ctx context.Context, v interface{}) (model.CreateWithdrawalInput, error) {
	res, err := ec.unmarshalInputcreateWithdrawalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAccountInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAccountInput(ctx context.Context, v interface{}) (model.UpdateAccountInput, error) {
	res, err := ec.unmarshalInputupdateAccountInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAdPaymentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdPaymentInput(ctx context.Context, v interface{}) (model.UpdateAdPaymentInput, error) {
	res, err := ec.unmarshalInputupdateAdPaymentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAdvertisementCPMInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementCPMInput(ctx context.Context, v interface{}) (model.UpdateAdvertisementCPMInput, error) {
	res, err := ec.unmarshalInputupdateAdvertisementCPMInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAdvertisementInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementInput(ctx context.Context, v interface{}) (model.UpdateAdvertisementInput, error) {
	res, err := ec.unmarshalInputupdateAdvertisementInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAdvertisementResultInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAdvertisementResultInput(ctx context.Context, v interface{}) (model.UpdateAdvertisementResultInput, error) {
	res, err := ec.unmarshalInputupdateAdvertisementResultInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateAudienceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateAudienceInput(ctx context.Context, v interface{}) (model.UpdateAudienceInput, error) {
	res, err := ec.unmarshalInputupdateAudienceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateBankInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateBankInput(ctx context.Context, v interface{}) (model.UpdateBankInput, error) {
	res, err := ec.unmarshalInputupdateBankInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateBudgetInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateBudgetInput(ctx context.Context, v interface{}) (model.UpdateBudgetInput, error) {
	res, err := ec.unmarshalInputupdateBudgetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateCPMRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCPMRateInput(ctx context.Context, v interface{}) (model.UpdateCPMRateInput, error) {
	res, err := ec.unmarshalInputupdateCPMRateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateCampaignInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCampaignInput(ctx context.Context, v interface{}) (model.UpdateCampaignInput, error) {
	res, err := ec.unmarshalInputupdateCampaignInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateChannelBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelBalanceInput(ctx context.Context, v interface{}) (model.UpdateChannelBalanceInput, error) {
	res, err := ec.unmarshalInputupdateChannelBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateChannelDetailInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelDetailInput(ctx context.Context, v interface{}) (model.UpdateChannelDetailInput, error) {
	res, err := ec.unmarshalInputupdateChannelDetailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateChannelInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelInput(ctx context.Context, v interface{}) (model.UpdateChannelInput, error) {
	res, err := ec.unmarshalInputupdateChannelInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateChannelLifeTimeBalanceInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateChannelLifeTimeBalanceInput(ctx context.Context, v interface{}) (model.UpdateChannelLifeTimeBalanceInput, error) {
	res, err := ec.unmarshalInputupdateChannelLifeTimeBalanceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateCompanyInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCompanyInput(ctx context.Context, v interface{}) (model.UpdateCompanyInput, error) {
	res, err := ec.unmarshalInputupdateCompanyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateCompanyMemberInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateCompanyMemberInput(ctx context.Context, v interface{}) (model.UpdateCompanyMemberInput, error) {
	res, err := ec.unmarshalInputupdateCompanyMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateContentInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateContentInput(ctx context.Context, v interface{}) (model.UpdateContentInput, error) {
	res, err := ec.unmarshalInputupdateContentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateContentLinkInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateContentLinkInput(ctx context.Context, v interface{}) (model.UpdateContentLinkInput, error) {
	res, err := ec.unmarshalInputupdateContentLinkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateFundingInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateFundingInput(ctx context.Context, v interface{}) (model.UpdateFundingInput, error) {
	res, err := ec.unmarshalInputupdateFundingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateHourlyRateInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateHourlyRateInput(ctx context.Context, v interface{}) (model.UpdateHourlyRateInput, error) {
	res, err := ec.unmarshalInputupdateHourlyRateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateLocationInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateLocationInput(ctx context.Context, v interface{}) (model.UpdateLocationInput, error) {
	res, err := ec.unmarshalInputupdateLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateWithdrawalInput2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐUpdateWithdrawalInput(ctx context.Context, v interface{}) (model.UpdateWithdrawalInput, error) {
	res, err := ec.unmarshalInputupdateWithdrawalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAccountType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountType(ctx context.Context, v interface{}) (*model.AccountType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AccountType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAccountType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAccountType(ctx context.Context, sel ast.SelectionSet, v *model.AccountType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAdStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatusᚄ(ctx context.Context, v interface{}) ([]model.AdStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AdStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAdStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAdStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AdStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAdStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx context.Context, v interface{}) (*model.AdStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AdStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdStatus(ctx context.Context, sel ast.SelectionSet, v *model.AdStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOChannelCategories2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelCategories) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChannelCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOChannelCategories2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategories(ctx context.Context, sel ast.SelectionSet, v *model.ChannelCategories) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChannelCategories(ctx, sel, v)
}

func (ec *executionContext) marshalOChannelContentLanguages2ᚕᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx context.Context, sel ast.SelectionSet, v []*model.ChannelContentLanguages) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChannelContentLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOChannelContentLanguages2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguages(ctx context.Context, sel ast.SelectionSet, v *model.ChannelContentLanguages) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChannelContentLanguages(ctx, sel, v)
}

func (ec *executionContext) marshalOChannelDetails2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetails(ctx context.Context, sel ast.SelectionSet, v *model.ChannelDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChannelDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyRole2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRoleᚄ(ctx context.Context, v interface{}) ([]model.CompanyRole, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CompanyRole, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyRole2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCompanyRole2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []model.CompanyRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompanyRole2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCompanyRole2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx context.Context, v interface{}) (*model.CompanyRole, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CompanyRole)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompanyRole2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyRole(ctx context.Context, sel ast.SelectionSet, v *model.CompanyRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContentType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentTypeᚄ(ctx context.Context, v interface{}) ([]model.ContentType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ContentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContentType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOContentType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ContentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOContentType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx context.Context, v interface{}) (*model.ContentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContentType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐContentType(ctx context.Context, sel ast.SelectionSet, v *model.ContentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFilterInput(ctx context.Context, v interface{}) (*model.FilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFundingStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatusᚄ(ctx context.Context, v interface{}) ([]model.FundingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.FundingStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFundingStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFundingStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []model.FundingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFundingStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFundingStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx context.Context, v interface{}) (*model.FundingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FundingStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFundingStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingStatus(ctx context.Context, sel ast.SelectionSet, v *model.FundingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOObjectiveType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveTypeᚄ(ctx context.Context, v interface{}) ([]model.ObjectiveType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ObjectiveType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNObjectiveType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOObjectiveType2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ObjectiveType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObjectiveType2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOObjectiveType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx context.Context, v interface{}) (*model.ObjectiveType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ObjectiveType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectiveType2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐObjectiveType(ctx context.Context, sel ast.SelectionSet, v *model.ObjectiveType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatusᚄ(ctx context.Context, v interface{}) ([]model.Status, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.Status, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOStatus2ᚕadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStatus2adtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx context.Context, v interface{}) (*model.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStatus2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v *model.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOWithdrawalChannelLinkFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkFilter(ctx context.Context, v interface{}) (*model.WithdrawalChannelLinkFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWithdrawalChannelLinkFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOWithdrawalChannelLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalChannelLinkInput(ctx context.Context, v interface{}) (*model.WithdrawalChannelLinkInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWithdrawalChannelLinkInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOadPaymentFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdPaymentFilter(ctx context.Context, v interface{}) (*model.AdPaymentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadPaymentFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOadvertisementFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐAdvertisementFilter(ctx context.Context, v interface{}) (*model.AdvertisementFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputadvertisementFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcampaignFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCampaignFilter(ctx context.Context, v interface{}) (*model.CampaignFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcampaignFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcategoryFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCategoryFilter(ctx context.Context, v interface{}) (*model.CategoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcategoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelCategoryFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryFilter(ctx context.Context, v interface{}) (*model.ChannelCategoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelCategoryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelCategoryInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCategoryInput(ctx context.Context, v interface{}) (*model.ChannelCategoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelCategoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelCollectedAdLinkFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkFilter(ctx context.Context, v interface{}) (*model.ChannelCollectedAdLinkFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelCollectedAdLinkFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelCollectedAdLinkInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelCollectedAdLinkInput(ctx context.Context, v interface{}) (*model.ChannelCollectedAdLinkInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelCollectedAdLinkInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelContentLanguageFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageFilter(ctx context.Context, v interface{}) (*model.ChannelContentLanguageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelContentLanguageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelContentLanguageInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelContentLanguageInput(ctx context.Context, v interface{}) (*model.ChannelContentLanguageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelContentLanguageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelDetailFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelDetailFilter(ctx context.Context, v interface{}) (*model.ChannelDetailFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelDetailFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOchannelFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐChannelFilter(ctx context.Context, v interface{}) (*model.ChannelFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputchannelFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOcompanyMemberFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCompanyMemberFilter(ctx context.Context, v interface{}) (*model.CompanyMemberFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcompanyMemberFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOcpmRates2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCpmRates(ctx context.Context, sel ast.SelectionSet, v *model.CpmRates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._cpmRates(ctx, sel, v)
}

func (ec *executionContext) unmarshalOcreateCPMRateInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐCreateCPMRateInput(ctx context.Context, v interface{}) (*model.CreateCPMRateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputcreateCPMRateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOfundingFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐFundingFilter(ctx context.Context, v interface{}) (*model.FundingFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputfundingFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOlanguageFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐLanguageFilter(ctx context.Context, v interface{}) (*model.LanguageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputlanguageFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOminMaxFilterInput2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐMinMaxFilterInput(ctx context.Context, v interface{}) (*model.MinMaxFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputminMaxFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOwithdrawalFilter2ᚖadtecᚋbackendᚋsrcᚋgraphqlᚋmodelᚐWithdrawalFilter(ctx context.Context, v interface{}) (*model.WithdrawalFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputwithdrawalFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
