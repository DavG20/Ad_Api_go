package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"adtec/backend/src/graphql/generated"
	"adtec/backend/src/graphql/model"
	"adtec/backend/src/router/CPMRateRouter"
	"adtec/backend/src/router/channelCategoryRouter"
	"adtec/backend/src/router/channelContentLanguageRouter"
	"adtec/backend/src/router/channelDetailRouter"
	"adtec/backend/src/router/channelRouter"
	"context"
)

// CpmRating is the resolver for the cpmRating field.
func (r *channelsResolver) CpmRating(ctx context.Context, obj *model.Channels) (*model.CpmRates, error) {
	return CPMRateRouter.Get(ctx, obj.ID)
}

// Categories is the resolver for the categories field.
func (r *channelsResolver) Categories(ctx context.Context, obj *model.Channels, filter *model.FilterInput) ([]*model.ChannelCategories, error) {
	inputFilter := model.ChannelCategoryFilter{
		ChannelID: &obj.ID,
		Filter:    filter,
	}
	return channelCategoryRouter.GetAll(ctx, &inputFilter)
}

// Languages is the resolver for the languages field.
func (r *channelsResolver) Languages(ctx context.Context, obj *model.Channels, filter *model.FilterInput) ([]*model.ChannelContentLanguages, error) {
	inputFilter := model.ChannelContentLanguageFilter{
		ChannelID: &obj.ID,
		Filter:    filter,
	}
	return channelContentLanguageRouter.GetAll(ctx, &inputFilter)
}

// ChannelDetails is the resolver for the channelDetails field.
func (r *channelsResolver) ChannelDetails(ctx context.Context, obj *model.Channels) (*model.ChannelDetails, error) {
	return channelDetailRouter.Get(ctx, obj.ID)
}

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, input model.CreateChannelInput) (*model.Channels, error) {
	return channelRouter.Create(ctx, input)
}

// UpdateChannel is the resolver for the updateChannel field.
func (r *mutationResolver) UpdateChannel(ctx context.Context, input model.UpdateChannelInput) (*model.Channels, error) {
	return channelRouter.Update(ctx, input)
}

// DeleteChannel is the resolver for the deleteChannel field.
func (r *mutationResolver) DeleteChannel(ctx context.Context, id string) (*model.DeletionResult, error) {
	return channelRouter.Delete(ctx, id)
}

// ChannelByID is the resolver for the channelById field.
func (r *queryResolver) ChannelByID(ctx context.Context, id string) (*model.Channels, error) {
	return channelRouter.Get(ctx, id)
}

// GetAllChannels is the resolver for the getAllChannels field.
func (r *queryResolver) GetAllChannels(ctx context.Context, channelFilter *model.ChannelFilter) ([]*model.Channels, error) {
	return channelRouter.GetAll(ctx, channelFilter)
}

// Channels returns generated.ChannelsResolver implementation.
func (r *Resolver) Channels() generated.ChannelsResolver { return &channelsResolver{r} }

type channelsResolver struct{ *Resolver }
