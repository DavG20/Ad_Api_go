package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"adtec/backend/src/graphql/generated"
	"adtec/backend/src/graphql/model"
	"adtec/backend/src/router/fundingRouter"
	"adtec/backend/src/utils"
	"context"
	"encoding/json"
)

// Extra is the resolver for the extra field.
func (r *fundingResolver) Extra(ctx context.Context, obj *model.Funding) (interface{}, error) {
	if obj != nil && obj.Extra != nil {
		log := utils.ByteConvertor(obj.Extra)
		var response interface{}
		_ = json.Unmarshal(log, &response)
		return response, nil
	}
	return nil, nil
}

// Log is the resolver for the log field.
func (r *fundingResolver) Log(ctx context.Context, obj *model.Funding) (interface{}, error) {
	if obj != nil && obj.Log != nil {
		log := utils.ByteConvertor(obj.Log)
		var response interface{}
		_ = json.Unmarshal(log, &response)
		return response, nil
	}
	return nil, nil
}

// CreateFunding is the resolver for the createFunding field.
func (r *mutationResolver) CreateFunding(ctx context.Context, input model.CreateFundingInput) (*model.Funding, error) {
	return fundingRouter.Create(ctx, input)
}

// UpdateFunding is the resolver for the updateFunding field.
func (r *mutationResolver) UpdateFunding(ctx context.Context, input model.UpdateFundingInput) (*model.Funding, error) {
	return fundingRouter.Update(ctx, input)
}

// FundingByID is the resolver for the fundingById field.
func (r *queryResolver) FundingByID(ctx context.Context, id string) (*model.Funding, error) {
	return fundingRouter.Get(ctx, id)
}

// GetAllFunding is the resolver for the getAllFunding field.
func (r *queryResolver) GetAllFunding(ctx context.Context, fundingFilter *model.FundingFilter) ([]*model.Funding, error) {
	return fundingRouter.GetAll(ctx, fundingFilter)
}

// Funding returns generated.FundingResolver implementation.
func (r *Resolver) Funding() generated.FundingResolver { return &fundingResolver{r} }

type fundingResolver struct{ *Resolver }
